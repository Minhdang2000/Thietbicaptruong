
Modbbus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d738  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d4  0800d848  0800d848  0001d848  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e01c  0800e01c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800e01c  0800e01c  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e01c  0800e01c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e01c  0800e01c  0001e01c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e020  0800e020  0001e020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800e024  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000308c  200001e4  0800e208  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003270  0800e208  00023270  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b365  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ca7  00000000  00000000  0003b572  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001820  00000000  00000000  0003f220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016a8  00000000  00000000  00040a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005103  00000000  00000000  000420e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001921d  00000000  00000000  000471eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098f4c  00000000  00000000  00060408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f9354  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a58  00000000  00000000  000f93a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d830 	.word	0x0800d830

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	0800d830 	.word	0x0800d830

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	4605      	mov	r5, r0
 8000b6c:	460c      	mov	r4, r1
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2300      	movs	r3, #0
 8000b72:	4628      	mov	r0, r5
 8000b74:	4621      	mov	r1, r4
 8000b76:	f7ff ff21 	bl	80009bc <__aeabi_dcmplt>
 8000b7a:	b928      	cbnz	r0, 8000b88 <__aeabi_d2lz+0x20>
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	4621      	mov	r1, r4
 8000b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b84:	f000 b80a 	b.w	8000b9c <__aeabi_d2ulz>
 8000b88:	4628      	mov	r0, r5
 8000b8a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b8e:	f000 f805 	bl	8000b9c <__aeabi_d2ulz>
 8000b92:	4240      	negs	r0, r0
 8000b94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b98:	bd38      	pop	{r3, r4, r5, pc}
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2ulz>:
 8000b9c:	b5d0      	push	{r4, r6, r7, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <__aeabi_d2ulz+0x34>)
 8000ba2:	4606      	mov	r6, r0
 8000ba4:	460f      	mov	r7, r1
 8000ba6:	f7ff fc97 	bl	80004d8 <__aeabi_dmul>
 8000baa:	f7ff ff6d 	bl	8000a88 <__aeabi_d2uiz>
 8000bae:	4604      	mov	r4, r0
 8000bb0:	f7ff fc18 	bl	80003e4 <__aeabi_ui2d>
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <__aeabi_d2ulz+0x38>)
 8000bb8:	f7ff fc8e 	bl	80004d8 <__aeabi_dmul>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	4639      	mov	r1, r7
 8000bc4:	f7ff fad0 	bl	8000168 <__aeabi_dsub>
 8000bc8:	f7ff ff5e 	bl	8000a88 <__aeabi_d2uiz>
 8000bcc:	4621      	mov	r1, r4
 8000bce:	bdd0      	pop	{r4, r6, r7, pc}
 8000bd0:	3df00000 	.word	0x3df00000
 8000bd4:	41f00000 	.word	0x41f00000

08000bd8 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart2.Instance)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	4b0e      	ldr	r3, [pc, #56]	; (8000c20 <HAL_UART_RxCpltCallback+0x48>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	d114      	bne.n	8000c16 <HAL_UART_RxCpltCallback+0x3e>
	{
		static BaseType_t xHigherPriorityTaskWoken;
		xHigherPriorityTaskWoken = pdFALSE;
 8000bec:	4b0d      	ldr	r3, [pc, #52]	; (8000c24 <HAL_UART_RxCpltCallback+0x4c>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
		xQueueSendFromISR(myQueueDataHandle,&buffer,NULL);
 8000bf2:	4b0d      	ldr	r3, [pc, #52]	; (8000c28 <HAL_UART_RxCpltCallback+0x50>)
 8000bf4:	6818      	ldr	r0, [r3, #0]
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	490c      	ldr	r1, [pc, #48]	; (8000c2c <HAL_UART_RxCpltCallback+0x54>)
 8000bfc:	f005 fd66 	bl	80066cc <xQueueGenericSendFromISR>
		xSemaphoreGiveFromISR(myCountingSem01Handle,&xHigherPriorityTaskWoken);
 8000c00:	4b0b      	ldr	r3, [pc, #44]	; (8000c30 <HAL_UART_RxCpltCallback+0x58>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4907      	ldr	r1, [pc, #28]	; (8000c24 <HAL_UART_RxCpltCallback+0x4c>)
 8000c06:	4618      	mov	r0, r3
 8000c08:	f005 fdf8 	bl	80067fc <xQueueGiveFromISR>
		HAL_UART_Receive_IT(&huart2, buffer, 1);
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	4907      	ldr	r1, [pc, #28]	; (8000c2c <HAL_UART_RxCpltCallback+0x54>)
 8000c10:	4803      	ldr	r0, [pc, #12]	; (8000c20 <HAL_UART_RxCpltCallback+0x48>)
 8000c12:	f003 fa40 	bl	8004096 <HAL_UART_Receive_IT>
	}
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	200002a0 	.word	0x200002a0
 8000c24:	200003ec 	.word	0x200003ec
 8000c28:	200002e8 	.word	0x200002e8
 8000c2c:	200002fc 	.word	0x200002fc
 8000c30:	200002f0 	.word	0x200002f0

08000c34 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == B_Temp_Pin)
 8000c3e:	88fb      	ldrh	r3, [r7, #6]
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d116      	bne.n	8000c72 <HAL_GPIO_EXTI_Callback+0x3e>
	{
		 static uint32_t last_interrupt_time = 0;
		 uint32_t current_time = HAL_GetTick();
 8000c44:	f001 f81a 	bl	8001c7c <HAL_GetTick>
 8000c48:	60b8      	str	r0, [r7, #8]
		 if ((current_time - last_interrupt_time) > 200)
 8000c4a:	4b18      	ldr	r3, [pc, #96]	; (8000cac <HAL_GPIO_EXTI_Callback+0x78>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	68ba      	ldr	r2, [r7, #8]
 8000c50:	1ad3      	subs	r3, r2, r3
 8000c52:	2bc8      	cmp	r3, #200	; 0xc8
 8000c54:	d909      	bls.n	8000c6a <HAL_GPIO_EXTI_Callback+0x36>
		 {
			 a = 1;
 8000c56:	4b16      	ldr	r3, [pc, #88]	; (8000cb0 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000c58:	2201      	movs	r2, #1
 8000c5a:	601a      	str	r2, [r3, #0]
			 Send_Error_Status();
 8000c5c:	f004 fd56 	bl	800570c <Send_Error_Status>
			 HAL_GPIO_WritePin(GPIOB, Led_Temp_Pin, GPIO_PIN_SET);
 8000c60:	2201      	movs	r2, #1
 8000c62:	2140      	movs	r1, #64	; 0x40
 8000c64:	4813      	ldr	r0, [pc, #76]	; (8000cb4 <HAL_GPIO_EXTI_Callback+0x80>)
 8000c66:	f001 fb4b 	bl	8002300 <HAL_GPIO_WritePin>
//			 HAL_GPIO_TogglePin(GPIOB, Led_Temp_Pin);
		 }
		 last_interrupt_time = current_time;
 8000c6a:	4a10      	ldr	r2, [pc, #64]	; (8000cac <HAL_GPIO_EXTI_Callback+0x78>)
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOB, Led_Water_Pin, GPIO_PIN_SET);
//			HAL_GPIO_TogglePin(GPIOB, Led_Water_Pin);
		}
		last_interrupt_time = current_time;
	}
}
 8000c70:	e018      	b.n	8000ca4 <HAL_GPIO_EXTI_Callback+0x70>
	else if (GPIO_Pin == B_Water_Pin)
 8000c72:	88fb      	ldrh	r3, [r7, #6]
 8000c74:	2b02      	cmp	r3, #2
 8000c76:	d115      	bne.n	8000ca4 <HAL_GPIO_EXTI_Callback+0x70>
		uint32_t current_time = HAL_GetTick();
 8000c78:	f001 f800 	bl	8001c7c <HAL_GetTick>
 8000c7c:	60f8      	str	r0, [r7, #12]
		if ((current_time - last_interrupt_time) > 200)
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <HAL_GPIO_EXTI_Callback+0x84>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	68fa      	ldr	r2, [r7, #12]
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	2bc8      	cmp	r3, #200	; 0xc8
 8000c88:	d909      	bls.n	8000c9e <HAL_GPIO_EXTI_Callback+0x6a>
			a = 1;
 8000c8a:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	601a      	str	r2, [r3, #0]
			Send_Error_Status();
 8000c90:	f004 fd3c 	bl	800570c <Send_Error_Status>
			HAL_GPIO_WritePin(GPIOB, Led_Water_Pin, GPIO_PIN_SET);
 8000c94:	2201      	movs	r2, #1
 8000c96:	2120      	movs	r1, #32
 8000c98:	4806      	ldr	r0, [pc, #24]	; (8000cb4 <HAL_GPIO_EXTI_Callback+0x80>)
 8000c9a:	f001 fb31 	bl	8002300 <HAL_GPIO_WritePin>
		last_interrupt_time = current_time;
 8000c9e:	4a06      	ldr	r2, [pc, #24]	; (8000cb8 <HAL_GPIO_EXTI_Callback+0x84>)
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	6013      	str	r3, [r2, #0]
}
 8000ca4:	bf00      	nop
 8000ca6:	3710      	adds	r7, #16
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	200003f0 	.word	0x200003f0
 8000cb0:	20000344 	.word	0x20000344
 8000cb4:	40010c00 	.word	0x40010c00
 8000cb8:	200003f4 	.word	0x200003f4

08000cbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08c      	sub	sp, #48	; 0x30
 8000cc0:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cc2:	f000 ffb3 	bl	8001c2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cc6:	f000 f885 	bl	8000dd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cca:	f000 f96d 	bl	8000fa8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000cce:	f000 f8bd 	bl	8000e4c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000cd2:	f000 f93f 	bl	8000f54 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000cd6:	f000 f8ef 	bl	8000eb8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000cda:	2201      	movs	r2, #1
 8000cdc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ce0:	482c      	ldr	r0, [pc, #176]	; (8000d94 <main+0xd8>)
 8000ce2:	f001 fb0d 	bl	8002300 <HAL_GPIO_WritePin>
  CLCD_4BIT_Init(&LCD1, 16, 2, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin,
 8000ce6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000cea:	930a      	str	r3, [sp, #40]	; 0x28
 8000cec:	4b29      	ldr	r3, [pc, #164]	; (8000d94 <main+0xd8>)
 8000cee:	9309      	str	r3, [sp, #36]	; 0x24
 8000cf0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cf4:	9308      	str	r3, [sp, #32]
 8000cf6:	4b27      	ldr	r3, [pc, #156]	; (8000d94 <main+0xd8>)
 8000cf8:	9307      	str	r3, [sp, #28]
 8000cfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cfe:	9306      	str	r3, [sp, #24]
 8000d00:	4b25      	ldr	r3, [pc, #148]	; (8000d98 <main+0xdc>)
 8000d02:	9305      	str	r3, [sp, #20]
 8000d04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d08:	9304      	str	r3, [sp, #16]
 8000d0a:	4b23      	ldr	r3, [pc, #140]	; (8000d98 <main+0xdc>)
 8000d0c:	9303      	str	r3, [sp, #12]
 8000d0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d12:	9302      	str	r3, [sp, #8]
 8000d14:	4b20      	ldr	r3, [pc, #128]	; (8000d98 <main+0xdc>)
 8000d16:	9301      	str	r3, [sp, #4]
 8000d18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d1c:	9300      	str	r3, [sp, #0]
 8000d1e:	4b1e      	ldr	r3, [pc, #120]	; (8000d98 <main+0xdc>)
 8000d20:	2202      	movs	r2, #2
 8000d22:	2110      	movs	r1, #16
 8000d24:	481d      	ldr	r0, [pc, #116]	; (8000d9c <main+0xe0>)
 8000d26:	f003 ff9a 	bl	8004c5e <CLCD_4BIT_Init>
    									D4_GPIO_Port, D4_Pin, D5_GPIO_Port, D5_Pin,
    									D6_GPIO_Port, D6_Pin, D7_GPIO_Port, D7_Pin);
  LoRa_Setup();
 8000d2a:	f000 fc09 	bl	8001540 <LoRa_Setup>
  LoRa_init(&myLoRa);
 8000d2e:	481c      	ldr	r0, [pc, #112]	; (8000da0 <main+0xe4>)
 8000d30:	f004 fb3b 	bl	80053aa <LoRa_init>
  LoRa_startReceiving(&myLoRa);
 8000d34:	481a      	ldr	r0, [pc, #104]	; (8000da0 <main+0xe4>)
 8000d36:	f004 fb2c 	bl	8005392 <LoRa_startReceiving>
  HAL_UART_Receive_IT(&huart2, buffer, 1);
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	4919      	ldr	r1, [pc, #100]	; (8000da4 <main+0xe8>)
 8000d3e:	481a      	ldr	r0, [pc, #104]	; (8000da8 <main+0xec>)
 8000d40:	f003 f9a9 	bl	8004096 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8000d44:	4819      	ldr	r0, [pc, #100]	; (8000dac <main+0xf0>)
 8000d46:	f002 fd1d 	bl	8003784 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d4a:	f004 fed5 	bl	8005af8 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of myBinarySem01 */
  myBinarySem01Handle = osSemaphoreNew(1, 1, &myBinarySem01_attributes);
 8000d4e:	4a18      	ldr	r2, [pc, #96]	; (8000db0 <main+0xf4>)
 8000d50:	2101      	movs	r1, #1
 8000d52:	2001      	movs	r0, #1
 8000d54:	f005 f80e 	bl	8005d74 <osSemaphoreNew>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	4a16      	ldr	r2, [pc, #88]	; (8000db4 <main+0xf8>)
 8000d5c:	6013      	str	r3, [r2, #0]

  /* creation of myCountingSem01 */
  myCountingSem01Handle = osSemaphoreNew(5, 5, &myCountingSem01_attributes);
 8000d5e:	4a16      	ldr	r2, [pc, #88]	; (8000db8 <main+0xfc>)
 8000d60:	2105      	movs	r1, #5
 8000d62:	2005      	movs	r0, #5
 8000d64:	f005 f806 	bl	8005d74 <osSemaphoreNew>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	4a14      	ldr	r2, [pc, #80]	; (8000dbc <main+0x100>)
 8000d6c:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueueData */
  myQueueDataHandle = osMessageQueueNew (16, sizeof(uint16_t), &myQueueData_attributes);
 8000d6e:	4a14      	ldr	r2, [pc, #80]	; (8000dc0 <main+0x104>)
 8000d70:	2102      	movs	r1, #2
 8000d72:	2010      	movs	r0, #16
 8000d74:	f005 f89a 	bl	8005eac <osMessageQueueNew>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	4a12      	ldr	r2, [pc, #72]	; (8000dc4 <main+0x108>)
 8000d7c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000d7e:	4a12      	ldr	r2, [pc, #72]	; (8000dc8 <main+0x10c>)
 8000d80:	2100      	movs	r1, #0
 8000d82:	4812      	ldr	r0, [pc, #72]	; (8000dcc <main+0x110>)
 8000d84:	f004 ff1e 	bl	8005bc4 <osThreadNew>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	4a11      	ldr	r2, [pc, #68]	; (8000dd0 <main+0x114>)
 8000d8c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000d8e:	f004 fee5 	bl	8005b5c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d92:	e7fe      	b.n	8000d92 <main+0xd6>
 8000d94:	40010c00 	.word	0x40010c00
 8000d98:	40010800 	.word	0x40010800
 8000d9c:	20000368 	.word	0x20000368
 8000da0:	200003c0 	.word	0x200003c0
 8000da4:	200002fc 	.word	0x200002fc
 8000da8:	200002a0 	.word	0x200002a0
 8000dac:	20000258 	.word	0x20000258
 8000db0:	0800d940 	.word	0x0800d940
 8000db4:	200002ec 	.word	0x200002ec
 8000db8:	0800d950 	.word	0x0800d950
 8000dbc:	200002f0 	.word	0x200002f0
 8000dc0:	0800d928 	.word	0x0800d928
 8000dc4:	200002e8 	.word	0x200002e8
 8000dc8:	0800d904 	.word	0x0800d904
 8000dcc:	080015bd 	.word	0x080015bd
 8000dd0:	200002e4 	.word	0x200002e4

08000dd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b090      	sub	sp, #64	; 0x40
 8000dd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dda:	f107 0318 	add.w	r3, r7, #24
 8000dde:	2228      	movs	r2, #40	; 0x28
 8000de0:	2100      	movs	r1, #0
 8000de2:	4618      	mov	r0, r3
 8000de4:	f008 f98b 	bl	80090fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000de8:	1d3b      	adds	r3, r7, #4
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]
 8000df0:	609a      	str	r2, [r3, #8]
 8000df2:	60da      	str	r2, [r3, #12]
 8000df4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000df6:	2302      	movs	r3, #2
 8000df8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dfe:	2310      	movs	r3, #16
 8000e00:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e02:	2300      	movs	r3, #0
 8000e04:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e06:	f107 0318 	add.w	r3, r7, #24
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f001 faa8 	bl	8002360 <HAL_RCC_OscConfig>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000e16:	f000 fc5f 	bl	80016d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e1a:	230f      	movs	r3, #15
 8000e1c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e22:	2300      	movs	r3, #0
 8000e24:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e26:	2300      	movs	r3, #0
 8000e28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e2e:	1d3b      	adds	r3, r7, #4
 8000e30:	2100      	movs	r1, #0
 8000e32:	4618      	mov	r0, r3
 8000e34:	f001 fd16 	bl	8002864 <HAL_RCC_ClockConfig>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000e3e:	f000 fc4b 	bl	80016d8 <Error_Handler>
  }
}
 8000e42:	bf00      	nop
 8000e44:	3740      	adds	r7, #64	; 0x40
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
	...

08000e4c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e50:	4b17      	ldr	r3, [pc, #92]	; (8000eb0 <MX_SPI1_Init+0x64>)
 8000e52:	4a18      	ldr	r2, [pc, #96]	; (8000eb4 <MX_SPI1_Init+0x68>)
 8000e54:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e56:	4b16      	ldr	r3, [pc, #88]	; (8000eb0 <MX_SPI1_Init+0x64>)
 8000e58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e5c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e5e:	4b14      	ldr	r3, [pc, #80]	; (8000eb0 <MX_SPI1_Init+0x64>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e64:	4b12      	ldr	r3, [pc, #72]	; (8000eb0 <MX_SPI1_Init+0x64>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e6a:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <MX_SPI1_Init+0x64>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e70:	4b0f      	ldr	r3, [pc, #60]	; (8000eb0 <MX_SPI1_Init+0x64>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e76:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <MX_SPI1_Init+0x64>)
 8000e78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e7c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e7e:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <MX_SPI1_Init+0x64>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e84:	4b0a      	ldr	r3, [pc, #40]	; (8000eb0 <MX_SPI1_Init+0x64>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e8a:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <MX_SPI1_Init+0x64>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e90:	4b07      	ldr	r3, [pc, #28]	; (8000eb0 <MX_SPI1_Init+0x64>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e96:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <MX_SPI1_Init+0x64>)
 8000e98:	220a      	movs	r2, #10
 8000e9a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e9c:	4804      	ldr	r0, [pc, #16]	; (8000eb0 <MX_SPI1_Init+0x64>)
 8000e9e:	f001 fea9 	bl	8002bf4 <HAL_SPI_Init>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ea8:	f000 fc16 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20000200 	.word	0x20000200
 8000eb4:	40013000 	.word	0x40013000

08000eb8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ebe:	f107 0308 	add.w	r3, r7, #8
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	605a      	str	r2, [r3, #4]
 8000ec8:	609a      	str	r2, [r3, #8]
 8000eca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ecc:	463b      	mov	r3, r7
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ed4:	4b1e      	ldr	r3, [pc, #120]	; (8000f50 <MX_TIM2_Init+0x98>)
 8000ed6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eda:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000;
 8000edc:	4b1c      	ldr	r3, [pc, #112]	; (8000f50 <MX_TIM2_Init+0x98>)
 8000ede:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000ee2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee4:	4b1a      	ldr	r3, [pc, #104]	; (8000f50 <MX_TIM2_Init+0x98>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000;
 8000eea:	4b19      	ldr	r3, [pc, #100]	; (8000f50 <MX_TIM2_Init+0x98>)
 8000eec:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000ef0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ef2:	4b17      	ldr	r3, [pc, #92]	; (8000f50 <MX_TIM2_Init+0x98>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ef8:	4b15      	ldr	r3, [pc, #84]	; (8000f50 <MX_TIM2_Init+0x98>)
 8000efa:	2280      	movs	r2, #128	; 0x80
 8000efc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000efe:	4814      	ldr	r0, [pc, #80]	; (8000f50 <MX_TIM2_Init+0x98>)
 8000f00:	f002 fbf0 	bl	80036e4 <HAL_TIM_Base_Init>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000f0a:	f000 fbe5 	bl	80016d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f12:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f14:	f107 0308 	add.w	r3, r7, #8
 8000f18:	4619      	mov	r1, r3
 8000f1a:	480d      	ldr	r0, [pc, #52]	; (8000f50 <MX_TIM2_Init+0x98>)
 8000f1c:	f002 fd8c 	bl	8003a38 <HAL_TIM_ConfigClockSource>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000f26:	f000 fbd7 	bl	80016d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f32:	463b      	mov	r3, r7
 8000f34:	4619      	mov	r1, r3
 8000f36:	4806      	ldr	r0, [pc, #24]	; (8000f50 <MX_TIM2_Init+0x98>)
 8000f38:	f002 ff5e 	bl	8003df8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000f42:	f000 fbc9 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f46:	bf00      	nop
 8000f48:	3718      	adds	r7, #24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000258 	.word	0x20000258

08000f54 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f58:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <MX_USART2_UART_Init+0x4c>)
 8000f5a:	4a12      	ldr	r2, [pc, #72]	; (8000fa4 <MX_USART2_UART_Init+0x50>)
 8000f5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8000f5e:	4b10      	ldr	r3, [pc, #64]	; (8000fa0 <MX_USART2_UART_Init+0x4c>)
 8000f60:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000f64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f66:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <MX_USART2_UART_Init+0x4c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 8000f6c:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <MX_USART2_UART_Init+0x4c>)
 8000f6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f72:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f74:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <MX_USART2_UART_Init+0x4c>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f7a:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <MX_USART2_UART_Init+0x4c>)
 8000f7c:	220c      	movs	r2, #12
 8000f7e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f80:	4b07      	ldr	r3, [pc, #28]	; (8000fa0 <MX_USART2_UART_Init+0x4c>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f86:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <MX_USART2_UART_Init+0x4c>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f8c:	4804      	ldr	r0, [pc, #16]	; (8000fa0 <MX_USART2_UART_Init+0x4c>)
 8000f8e:	f002 ffa3 	bl	8003ed8 <HAL_UART_Init>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8000f98:	f000 fb9e 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	200002a0 	.word	0x200002a0
 8000fa4:	40004400 	.word	0x40004400

08000fa8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b088      	sub	sp, #32
 8000fac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fae:	f107 0310 	add.w	r3, r7, #16
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	605a      	str	r2, [r3, #4]
 8000fb8:	609a      	str	r2, [r3, #8]
 8000fba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fbc:	4b46      	ldr	r3, [pc, #280]	; (80010d8 <MX_GPIO_Init+0x130>)
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	4a45      	ldr	r2, [pc, #276]	; (80010d8 <MX_GPIO_Init+0x130>)
 8000fc2:	f043 0310 	orr.w	r3, r3, #16
 8000fc6:	6193      	str	r3, [r2, #24]
 8000fc8:	4b43      	ldr	r3, [pc, #268]	; (80010d8 <MX_GPIO_Init+0x130>)
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	f003 0310 	and.w	r3, r3, #16
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fd4:	4b40      	ldr	r3, [pc, #256]	; (80010d8 <MX_GPIO_Init+0x130>)
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	4a3f      	ldr	r2, [pc, #252]	; (80010d8 <MX_GPIO_Init+0x130>)
 8000fda:	f043 0320 	orr.w	r3, r3, #32
 8000fde:	6193      	str	r3, [r2, #24]
 8000fe0:	4b3d      	ldr	r3, [pc, #244]	; (80010d8 <MX_GPIO_Init+0x130>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	f003 0320 	and.w	r3, r3, #32
 8000fe8:	60bb      	str	r3, [r7, #8]
 8000fea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fec:	4b3a      	ldr	r3, [pc, #232]	; (80010d8 <MX_GPIO_Init+0x130>)
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	4a39      	ldr	r2, [pc, #228]	; (80010d8 <MX_GPIO_Init+0x130>)
 8000ff2:	f043 0304 	orr.w	r3, r3, #4
 8000ff6:	6193      	str	r3, [r2, #24]
 8000ff8:	4b37      	ldr	r3, [pc, #220]	; (80010d8 <MX_GPIO_Init+0x130>)
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	f003 0304 	and.w	r3, r3, #4
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001004:	4b34      	ldr	r3, [pc, #208]	; (80010d8 <MX_GPIO_Init+0x130>)
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	4a33      	ldr	r2, [pc, #204]	; (80010d8 <MX_GPIO_Init+0x130>)
 800100a:	f043 0308 	orr.w	r3, r3, #8
 800100e:	6193      	str	r3, [r2, #24]
 8001010:	4b31      	ldr	r3, [pc, #196]	; (80010d8 <MX_GPIO_Init+0x130>)
 8001012:	699b      	ldr	r3, [r3, #24]
 8001014:	f003 0308 	and.w	r3, r3, #8
 8001018:	603b      	str	r3, [r7, #0]
 800101a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NSS_Pin|RST_Pin, GPIO_PIN_SET);
 800101c:	2201      	movs	r2, #1
 800101e:	f240 4101 	movw	r1, #1025	; 0x401
 8001022:	482e      	ldr	r0, [pc, #184]	; (80010dc <MX_GPIO_Init+0x134>)
 8001024:	f001 f96c 	bl	8002300 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Blink_Pin|D7_Pin|D6_Pin|Led_Water_Pin
 8001028:	2200      	movs	r2, #0
 800102a:	f24e 0160 	movw	r1, #57440	; 0xe060
 800102e:	482b      	ldr	r0, [pc, #172]	; (80010dc <MX_GPIO_Init+0x134>)
 8001030:	f001 f966 	bl	8002300 <HAL_GPIO_WritePin>
                          |Led_Temp_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D5_Pin|D4_Pin|EN_Pin|RW_Pin
 8001034:	2200      	movs	r2, #0
 8001036:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 800103a:	4829      	ldr	r0, [pc, #164]	; (80010e0 <MX_GPIO_Init+0x138>)
 800103c:	f001 f960 	bl	8002300 <HAL_GPIO_WritePin>
                          |RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : B_Temp_Pin B_Water_Pin */
  GPIO_InitStruct.Pin = B_Temp_Pin|B_Water_Pin;
 8001040:	2303      	movs	r3, #3
 8001042:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001044:	4b27      	ldr	r3, [pc, #156]	; (80010e4 <MX_GPIO_Init+0x13c>)
 8001046:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104c:	f107 0310 	add.w	r3, r7, #16
 8001050:	4619      	mov	r1, r3
 8001052:	4823      	ldr	r0, [pc, #140]	; (80010e0 <MX_GPIO_Init+0x138>)
 8001054:	f000 ffd0 	bl	8001ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : NSS_Pin RST_Pin Blink_Pin D7_Pin
                           D6_Pin Led_Water_Pin Led_Temp_Pin */
  GPIO_InitStruct.Pin = NSS_Pin|RST_Pin|Blink_Pin|D7_Pin
 8001058:	f24e 4361 	movw	r3, #58465	; 0xe461
 800105c:	613b      	str	r3, [r7, #16]
                          |D6_Pin|Led_Water_Pin|Led_Temp_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105e:	2301      	movs	r3, #1
 8001060:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001066:	2302      	movs	r3, #2
 8001068:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800106a:	f107 0310 	add.w	r3, r7, #16
 800106e:	4619      	mov	r1, r3
 8001070:	481a      	ldr	r0, [pc, #104]	; (80010dc <MX_GPIO_Init+0x134>)
 8001072:	f000 ffc1 	bl	8001ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8001076:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800107a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800107c:	4b1a      	ldr	r3, [pc, #104]	; (80010e8 <MX_GPIO_Init+0x140>)
 800107e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8001084:	f107 0310 	add.w	r3, r7, #16
 8001088:	4619      	mov	r1, r3
 800108a:	4814      	ldr	r0, [pc, #80]	; (80010dc <MX_GPIO_Init+0x134>)
 800108c:	f000 ffb4 	bl	8001ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D5_Pin D4_Pin EN_Pin RW_Pin
                           RS_Pin */
  GPIO_InitStruct.Pin = D5_Pin|D4_Pin|EN_Pin|RW_Pin
 8001090:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001094:	613b      	str	r3, [r7, #16]
                          |RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001096:	2301      	movs	r3, #1
 8001098:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109e:	2302      	movs	r3, #2
 80010a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a2:	f107 0310 	add.w	r3, r7, #16
 80010a6:	4619      	mov	r1, r3
 80010a8:	480d      	ldr	r0, [pc, #52]	; (80010e0 <MX_GPIO_Init+0x138>)
 80010aa:	f000 ffa5 	bl	8001ff8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 7, 0);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2107      	movs	r1, #7
 80010b2:	2006      	movs	r0, #6
 80010b4:	f000 fec5 	bl	8001e42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80010b8:	2006      	movs	r0, #6
 80010ba:	f000 fede 	bl	8001e7a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 7, 0);
 80010be:	2200      	movs	r2, #0
 80010c0:	2107      	movs	r1, #7
 80010c2:	2007      	movs	r0, #7
 80010c4:	f000 febd 	bl	8001e42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80010c8:	2007      	movs	r0, #7
 80010ca:	f000 fed6 	bl	8001e7a <HAL_NVIC_EnableIRQ>

}
 80010ce:	bf00      	nop
 80010d0:	3720      	adds	r7, #32
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40021000 	.word	0x40021000
 80010dc:	40010c00 	.word	0x40010c00
 80010e0:	40010800 	.word	0x40010800
 80010e4:	10210000 	.word	0x10210000
 80010e8:	10110000 	.word	0x10110000

080010ec <Process_Modbus>:

/* USER CODE BEGIN 4 */
void Process_Modbus(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
	static uint8_t LoRa_TxBuffer[10];
	switch(i)
 80010f0:	4bb9      	ldr	r3, [pc, #740]	; (80013d8 <Process_Modbus+0x2ec>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2b06      	cmp	r3, #6
 80010f6:	f200 8208 	bhi.w	800150a <Process_Modbus+0x41e>
 80010fa:	a201      	add	r2, pc, #4	; (adr r2, 8001100 <Process_Modbus+0x14>)
 80010fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001100:	0800111d 	.word	0x0800111d
 8001104:	08001167 	.word	0x08001167
 8001108:	080012ad 	.word	0x080012ad
 800110c:	08001337 	.word	0x08001337
 8001110:	08001387 	.word	0x08001387
 8001114:	0800141d 	.word	0x0800141d
 8001118:	0800146d 	.word	0x0800146d
	{
	case 0:
		Error_Stat = Receive_Error_Status(Data_16[0]);
 800111c:	4baf      	ldr	r3, [pc, #700]	; (80013dc <Process_Modbus+0x2f0>)
 800111e:	881b      	ldrh	r3, [r3, #0]
 8001120:	4618      	mov	r0, r3
 8001122:	f004 fb1f 	bl	8005764 <Receive_Error_Status>
 8001126:	4603      	mov	r3, r0
 8001128:	b29a      	uxth	r2, r3
 800112a:	4bad      	ldr	r3, [pc, #692]	; (80013e0 <Process_Modbus+0x2f4>)
 800112c:	801a      	strh	r2, [r3, #0]
		if (Error_Stat == Have_Errors)
 800112e:	4bac      	ldr	r3, [pc, #688]	; (80013e0 <Process_Modbus+0x2f4>)
 8001130:	881b      	ldrh	r3, [r3, #0]
 8001132:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001136:	d108      	bne.n	800114a <Process_Modbus+0x5e>
		{
			osDelay(100);
 8001138:	2064      	movs	r0, #100	; 0x64
 800113a:	f004 fded 	bl	8005d18 <osDelay>
			Send_Error_Code();
 800113e:	f004 fb23 	bl	8005788 <Send_Error_Code>
			i = 1;
 8001142:	4ba5      	ldr	r3, [pc, #660]	; (80013d8 <Process_Modbus+0x2ec>)
 8001144:	2201      	movs	r2, #1
 8001146:	601a      	str	r2, [r3, #0]
			osDelay(100);
			memset(rx_data, 0, sizeof(rx_data));
			Read_Temp();
			i = 2;
		}
		break;
 8001148:	e1df      	b.n	800150a <Process_Modbus+0x41e>
			osDelay(100);
 800114a:	2064      	movs	r0, #100	; 0x64
 800114c:	f004 fde4 	bl	8005d18 <osDelay>
			memset(rx_data, 0, sizeof(rx_data));
 8001150:	2220      	movs	r2, #32
 8001152:	2100      	movs	r1, #0
 8001154:	48a3      	ldr	r0, [pc, #652]	; (80013e4 <Process_Modbus+0x2f8>)
 8001156:	f007 ffd2 	bl	80090fe <memset>
			Read_Temp();
 800115a:	f004 fc75 	bl	8005a48 <Read_Temp>
			i = 2;
 800115e:	4b9e      	ldr	r3, [pc, #632]	; (80013d8 <Process_Modbus+0x2ec>)
 8001160:	2202      	movs	r2, #2
 8001162:	601a      	str	r2, [r3, #0]
		break;
 8001164:	e1d1      	b.n	800150a <Process_Modbus+0x41e>

	// Check Error code
	case 1:
		Error_Cod = Receive_Error_Code(Data_16[0]);
 8001166:	4b9d      	ldr	r3, [pc, #628]	; (80013dc <Process_Modbus+0x2f0>)
 8001168:	881b      	ldrh	r3, [r3, #0]
 800116a:	4618      	mov	r0, r3
 800116c:	f004 fb38 	bl	80057e0 <Receive_Error_Code>
 8001170:	4603      	mov	r3, r0
 8001172:	b29a      	uxth	r2, r3
 8001174:	4b9c      	ldr	r3, [pc, #624]	; (80013e8 <Process_Modbus+0x2fc>)
 8001176:	801a      	strh	r2, [r3, #0]
		// Display error
		if (Error_Cod == Temp_Measur_Err)
 8001178:	4b9b      	ldr	r3, [pc, #620]	; (80013e8 <Process_Modbus+0x2fc>)
 800117a:	881b      	ldrh	r3, [r3, #0]
 800117c:	f640 32b9 	movw	r2, #3001	; 0xbb9
 8001180:	4293      	cmp	r3, r2
 8001182:	d12c      	bne.n	80011de <Process_Modbus+0xf2>
		{
			CLCD_SetCursor(&LCD1, 0, 0);
 8001184:	2200      	movs	r2, #0
 8001186:	2100      	movs	r1, #0
 8001188:	4898      	ldr	r0, [pc, #608]	; (80013ec <Process_Modbus+0x300>)
 800118a:	f003 fdfb 	bl	8004d84 <CLCD_SetCursor>
			CLCD_WriteString(&LCD1,"Temp Measure Err");
 800118e:	4998      	ldr	r1, [pc, #608]	; (80013f0 <Process_Modbus+0x304>)
 8001190:	4896      	ldr	r0, [pc, #600]	; (80013ec <Process_Modbus+0x300>)
 8001192:	f003 fe5e 	bl	8004e52 <CLCD_WriteString>
			osDelay(2000);
 8001196:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800119a:	f004 fdbd 	bl	8005d18 <osDelay>
			LoRa_TxBuffer[0] = 0x01;
 800119e:	4b95      	ldr	r3, [pc, #596]	; (80013f4 <Process_Modbus+0x308>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	701a      	strb	r2, [r3, #0]
			LoRa_TxBuffer[1] = 0x01; // Error
 80011a4:	4b93      	ldr	r3, [pc, #588]	; (80013f4 <Process_Modbus+0x308>)
 80011a6:	2201      	movs	r2, #1
 80011a8:	705a      	strb	r2, [r3, #1]
			LoRa_TxBuffer[2] = 0x01; // Temp Measure Err
 80011aa:	4b92      	ldr	r3, [pc, #584]	; (80013f4 <Process_Modbus+0x308>)
 80011ac:	2201      	movs	r2, #1
 80011ae:	709a      	strb	r2, [r3, #2]
			LoRa_transmit(&myLoRa, LoRa_TxBuffer, 3, 1000);
 80011b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011b4:	2203      	movs	r2, #3
 80011b6:	498f      	ldr	r1, [pc, #572]	; (80013f4 <Process_Modbus+0x308>)
 80011b8:	488f      	ldr	r0, [pc, #572]	; (80013f8 <Process_Modbus+0x30c>)
 80011ba:	f004 f892 	bl	80052e2 <LoRa_transmit>
			memset(LoRa_TxBuffer, 0, sizeof(LoRa_TxBuffer));
 80011be:	220a      	movs	r2, #10
 80011c0:	2100      	movs	r1, #0
 80011c2:	488c      	ldr	r0, [pc, #560]	; (80013f4 <Process_Modbus+0x308>)
 80011c4:	f007 ff9b 	bl	80090fe <memset>
			memset(rx_data, 0, sizeof(rx_data));
 80011c8:	2220      	movs	r2, #32
 80011ca:	2100      	movs	r1, #0
 80011cc:	4885      	ldr	r0, [pc, #532]	; (80013e4 <Process_Modbus+0x2f8>)
 80011ce:	f007 ff96 	bl	80090fe <memset>
			Send_Error_Temp();
 80011d2:	f004 fb35 	bl	8005840 <Send_Error_Temp>
			i = 3;
 80011d6:	4b80      	ldr	r3, [pc, #512]	; (80013d8 <Process_Modbus+0x2ec>)
 80011d8:	2203      	movs	r2, #3
 80011da:	601a      	str	r2, [r3, #0]
			memset(LoRa_TxBuffer, 0, sizeof(LoRa_TxBuffer));
			memset(rx_data, 0, sizeof(rx_data));
			Send_Error_Device();
			i = 5;
		}
		break;
 80011dc:	e194      	b.n	8001508 <Process_Modbus+0x41c>
		else if (Error_Cod == Hum_Measur_Err)
 80011de:	4b82      	ldr	r3, [pc, #520]	; (80013e8 <Process_Modbus+0x2fc>)
 80011e0:	881b      	ldrh	r3, [r3, #0]
 80011e2:	f640 32ba 	movw	r2, #3002	; 0xbba
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d12c      	bne.n	8001244 <Process_Modbus+0x158>
			CLCD_SetCursor(&LCD1, 0, 0);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2100      	movs	r1, #0
 80011ee:	487f      	ldr	r0, [pc, #508]	; (80013ec <Process_Modbus+0x300>)
 80011f0:	f003 fdc8 	bl	8004d84 <CLCD_SetCursor>
			CLCD_WriteString(&LCD1,"Humi Measure Err");
 80011f4:	4981      	ldr	r1, [pc, #516]	; (80013fc <Process_Modbus+0x310>)
 80011f6:	487d      	ldr	r0, [pc, #500]	; (80013ec <Process_Modbus+0x300>)
 80011f8:	f003 fe2b 	bl	8004e52 <CLCD_WriteString>
			osDelay(2000);
 80011fc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001200:	f004 fd8a 	bl	8005d18 <osDelay>
			LoRa_TxBuffer[0] = 0x01;
 8001204:	4b7b      	ldr	r3, [pc, #492]	; (80013f4 <Process_Modbus+0x308>)
 8001206:	2201      	movs	r2, #1
 8001208:	701a      	strb	r2, [r3, #0]
			LoRa_TxBuffer[1] = 0x01; // Error
 800120a:	4b7a      	ldr	r3, [pc, #488]	; (80013f4 <Process_Modbus+0x308>)
 800120c:	2201      	movs	r2, #1
 800120e:	705a      	strb	r2, [r3, #1]
			LoRa_TxBuffer[2] = 0x02; // Humi Measure Err
 8001210:	4b78      	ldr	r3, [pc, #480]	; (80013f4 <Process_Modbus+0x308>)
 8001212:	2202      	movs	r2, #2
 8001214:	709a      	strb	r2, [r3, #2]
			LoRa_transmit(&myLoRa, LoRa_TxBuffer, 3, 1000);
 8001216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800121a:	2203      	movs	r2, #3
 800121c:	4975      	ldr	r1, [pc, #468]	; (80013f4 <Process_Modbus+0x308>)
 800121e:	4876      	ldr	r0, [pc, #472]	; (80013f8 <Process_Modbus+0x30c>)
 8001220:	f004 f85f 	bl	80052e2 <LoRa_transmit>
			memset(LoRa_TxBuffer, 0, sizeof(LoRa_TxBuffer));
 8001224:	220a      	movs	r2, #10
 8001226:	2100      	movs	r1, #0
 8001228:	4872      	ldr	r0, [pc, #456]	; (80013f4 <Process_Modbus+0x308>)
 800122a:	f007 ff68 	bl	80090fe <memset>
			memset(rx_data, 0, sizeof(rx_data));
 800122e:	2220      	movs	r2, #32
 8001230:	2100      	movs	r1, #0
 8001232:	486c      	ldr	r0, [pc, #432]	; (80013e4 <Process_Modbus+0x2f8>)
 8001234:	f007 ff63 	bl	80090fe <memset>
			Send_Error_RH();
 8001238:	f004 fb5c 	bl	80058f4 <Send_Error_RH>
			i = 4;
 800123c:	4b66      	ldr	r3, [pc, #408]	; (80013d8 <Process_Modbus+0x2ec>)
 800123e:	2204      	movs	r2, #4
 8001240:	601a      	str	r2, [r3, #0]
		break;
 8001242:	e161      	b.n	8001508 <Process_Modbus+0x41c>
		else if (Error_Cod == Humi_Sen_Fail)
 8001244:	4b68      	ldr	r3, [pc, #416]	; (80013e8 <Process_Modbus+0x2fc>)
 8001246:	881b      	ldrh	r3, [r3, #0]
 8001248:	f640 32bb 	movw	r2, #3003	; 0xbbb
 800124c:	4293      	cmp	r3, r2
 800124e:	f040 815b 	bne.w	8001508 <Process_Modbus+0x41c>
			CLCD_SetCursor(&LCD1, 0, 0);
 8001252:	2200      	movs	r2, #0
 8001254:	2100      	movs	r1, #0
 8001256:	4865      	ldr	r0, [pc, #404]	; (80013ec <Process_Modbus+0x300>)
 8001258:	f003 fd94 	bl	8004d84 <CLCD_SetCursor>
			CLCD_WriteString(&LCD1,"Humi Sensor Fail ");
 800125c:	4968      	ldr	r1, [pc, #416]	; (8001400 <Process_Modbus+0x314>)
 800125e:	4863      	ldr	r0, [pc, #396]	; (80013ec <Process_Modbus+0x300>)
 8001260:	f003 fdf7 	bl	8004e52 <CLCD_WriteString>
			osDelay(2000);
 8001264:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001268:	f004 fd56 	bl	8005d18 <osDelay>
			LoRa_TxBuffer[0] = 0x01;
 800126c:	4b61      	ldr	r3, [pc, #388]	; (80013f4 <Process_Modbus+0x308>)
 800126e:	2201      	movs	r2, #1
 8001270:	701a      	strb	r2, [r3, #0]
			LoRa_TxBuffer[1] = 0x01; // Error
 8001272:	4b60      	ldr	r3, [pc, #384]	; (80013f4 <Process_Modbus+0x308>)
 8001274:	2201      	movs	r2, #1
 8001276:	705a      	strb	r2, [r3, #1]
			LoRa_TxBuffer[2] = 0x03; // Humi Sensor Fail
 8001278:	4b5e      	ldr	r3, [pc, #376]	; (80013f4 <Process_Modbus+0x308>)
 800127a:	2203      	movs	r2, #3
 800127c:	709a      	strb	r2, [r3, #2]
			LoRa_transmit(&myLoRa, LoRa_TxBuffer, 3, 1000);
 800127e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001282:	2203      	movs	r2, #3
 8001284:	495b      	ldr	r1, [pc, #364]	; (80013f4 <Process_Modbus+0x308>)
 8001286:	485c      	ldr	r0, [pc, #368]	; (80013f8 <Process_Modbus+0x30c>)
 8001288:	f004 f82b 	bl	80052e2 <LoRa_transmit>
			memset(LoRa_TxBuffer, 0, sizeof(LoRa_TxBuffer));
 800128c:	220a      	movs	r2, #10
 800128e:	2100      	movs	r1, #0
 8001290:	4858      	ldr	r0, [pc, #352]	; (80013f4 <Process_Modbus+0x308>)
 8001292:	f007 ff34 	bl	80090fe <memset>
			memset(rx_data, 0, sizeof(rx_data));
 8001296:	2220      	movs	r2, #32
 8001298:	2100      	movs	r1, #0
 800129a:	4852      	ldr	r0, [pc, #328]	; (80013e4 <Process_Modbus+0x2f8>)
 800129c:	f007 ff2f 	bl	80090fe <memset>
			Send_Error_Device();
 80012a0:	f004 fb82 	bl	80059a8 <Send_Error_Device>
			i = 5;
 80012a4:	4b4c      	ldr	r3, [pc, #304]	; (80013d8 <Process_Modbus+0x2ec>)
 80012a6:	2205      	movs	r2, #5
 80012a8:	601a      	str	r2, [r3, #0]
		break;
 80012aa:	e12d      	b.n	8001508 <Process_Modbus+0x41c>

	// Read Temp
	case 2:
		LoRa_TxBuffer[0] = 0x01;
 80012ac:	4b51      	ldr	r3, [pc, #324]	; (80013f4 <Process_Modbus+0x308>)
 80012ae:	2201      	movs	r2, #1
 80012b0:	701a      	strb	r2, [r3, #0]
		LoRa_TxBuffer[1] = 0x02; // Temp
 80012b2:	4b50      	ldr	r3, [pc, #320]	; (80013f4 <Process_Modbus+0x308>)
 80012b4:	2202      	movs	r2, #2
 80012b6:	705a      	strb	r2, [r3, #1]
		LoRa_TxBuffer[2] = rx_data[3];
 80012b8:	4b4a      	ldr	r3, [pc, #296]	; (80013e4 <Process_Modbus+0x2f8>)
 80012ba:	78da      	ldrb	r2, [r3, #3]
 80012bc:	4b4d      	ldr	r3, [pc, #308]	; (80013f4 <Process_Modbus+0x308>)
 80012be:	709a      	strb	r2, [r3, #2]
		LoRa_TxBuffer[3] = rx_data[4];
 80012c0:	4b48      	ldr	r3, [pc, #288]	; (80013e4 <Process_Modbus+0x2f8>)
 80012c2:	791a      	ldrb	r2, [r3, #4]
 80012c4:	4b4b      	ldr	r3, [pc, #300]	; (80013f4 <Process_Modbus+0x308>)
 80012c6:	70da      	strb	r2, [r3, #3]
		LoRa_TxBuffer[4] = rx_data[5];
 80012c8:	4b46      	ldr	r3, [pc, #280]	; (80013e4 <Process_Modbus+0x2f8>)
 80012ca:	795a      	ldrb	r2, [r3, #5]
 80012cc:	4b49      	ldr	r3, [pc, #292]	; (80013f4 <Process_Modbus+0x308>)
 80012ce:	711a      	strb	r2, [r3, #4]
		LoRa_TxBuffer[5] = rx_data[6];
 80012d0:	4b44      	ldr	r3, [pc, #272]	; (80013e4 <Process_Modbus+0x2f8>)
 80012d2:	799a      	ldrb	r2, [r3, #6]
 80012d4:	4b47      	ldr	r3, [pc, #284]	; (80013f4 <Process_Modbus+0x308>)
 80012d6:	715a      	strb	r2, [r3, #5]
//		LoRa_transmit(&myLoRa, LoRa_TxBuffer, 6, 1000);
//		memset(LoRa_TxBuffer, 0, sizeof(LoRa_TxBuffer));
		Temp = unpack754_32(Data_32);
 80012d8:	4b4a      	ldr	r3, [pc, #296]	; (8001404 <Process_Modbus+0x318>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4618      	mov	r0, r3
 80012de:	f004 f9bd 	bl	800565c <unpack754_32>
 80012e2:	4603      	mov	r3, r0
 80012e4:	4a48      	ldr	r2, [pc, #288]	; (8001408 <Process_Modbus+0x31c>)
 80012e6:	6013      	str	r3, [r2, #0]
		sprintf(LCD_Send,"Temp: %.2f oC",Temp );
 80012e8:	4b47      	ldr	r3, [pc, #284]	; (8001408 <Process_Modbus+0x31c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff f89b 	bl	8000428 <__aeabi_f2d>
 80012f2:	4602      	mov	r2, r0
 80012f4:	460b      	mov	r3, r1
 80012f6:	4945      	ldr	r1, [pc, #276]	; (800140c <Process_Modbus+0x320>)
 80012f8:	4845      	ldr	r0, [pc, #276]	; (8001410 <Process_Modbus+0x324>)
 80012fa:	f008 fe89 	bl	800a010 <siprintf>
		CLCD_SetCursor(&LCD1, 0, 0);
 80012fe:	2200      	movs	r2, #0
 8001300:	2100      	movs	r1, #0
 8001302:	483a      	ldr	r0, [pc, #232]	; (80013ec <Process_Modbus+0x300>)
 8001304:	f003 fd3e 	bl	8004d84 <CLCD_SetCursor>
		CLCD_WriteString(&LCD1, LCD_Send);
 8001308:	4941      	ldr	r1, [pc, #260]	; (8001410 <Process_Modbus+0x324>)
 800130a:	4838      	ldr	r0, [pc, #224]	; (80013ec <Process_Modbus+0x300>)
 800130c:	f003 fda1 	bl	8004e52 <CLCD_WriteString>
		osDelay(1000);
 8001310:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001314:	f004 fd00 	bl	8005d18 <osDelay>
		memset(rx_data, 0, sizeof(rx_data));
 8001318:	2220      	movs	r2, #32
 800131a:	2100      	movs	r1, #0
 800131c:	4831      	ldr	r0, [pc, #196]	; (80013e4 <Process_Modbus+0x2f8>)
 800131e:	f007 feee 	bl	80090fe <memset>
		Temp = 0;
 8001322:	4b39      	ldr	r3, [pc, #228]	; (8001408 <Process_Modbus+0x31c>)
 8001324:	f04f 0200 	mov.w	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
		Read_Water();
 800132a:	f004 fbb9 	bl	8005aa0 <Read_Water>
		i = 6;
 800132e:	4b2a      	ldr	r3, [pc, #168]	; (80013d8 <Process_Modbus+0x2ec>)
 8001330:	2206      	movs	r2, #6
 8001332:	601a      	str	r2, [r3, #0]
		break;
 8001334:	e0e9      	b.n	800150a <Process_Modbus+0x41e>

	// Read Error Temperature measurement
	case 3:
		Error_T = Receive_Error_Temp(Data_16[0]);
 8001336:	4b29      	ldr	r3, [pc, #164]	; (80013dc <Process_Modbus+0x2f0>)
 8001338:	881b      	ldrh	r3, [r3, #0]
 800133a:	4618      	mov	r0, r3
 800133c:	f004 faac 	bl	8005898 <Receive_Error_Temp>
 8001340:	4603      	mov	r3, r0
 8001342:	461a      	mov	r2, r3
 8001344:	4b33      	ldr	r3, [pc, #204]	; (8001414 <Process_Modbus+0x328>)
 8001346:	701a      	strb	r2, [r3, #0]
		// Display error
		LoRa_TxBuffer[0] = 0x01;
 8001348:	4b2a      	ldr	r3, [pc, #168]	; (80013f4 <Process_Modbus+0x308>)
 800134a:	2201      	movs	r2, #1
 800134c:	701a      	strb	r2, [r3, #0]
		LoRa_TxBuffer[1] = 0x01; // Error
 800134e:	4b29      	ldr	r3, [pc, #164]	; (80013f4 <Process_Modbus+0x308>)
 8001350:	2201      	movs	r2, #1
 8001352:	705a      	strb	r2, [r3, #1]
		LoRa_TxBuffer[2] = 0x01; // Temp Measure Err
 8001354:	4b27      	ldr	r3, [pc, #156]	; (80013f4 <Process_Modbus+0x308>)
 8001356:	2201      	movs	r2, #1
 8001358:	709a      	strb	r2, [r3, #2]
		LoRa_TxBuffer[3] = Error_T;
 800135a:	4b2e      	ldr	r3, [pc, #184]	; (8001414 <Process_Modbus+0x328>)
 800135c:	781a      	ldrb	r2, [r3, #0]
 800135e:	4b25      	ldr	r3, [pc, #148]	; (80013f4 <Process_Modbus+0x308>)
 8001360:	70da      	strb	r2, [r3, #3]
		LoRa_transmit(&myLoRa, LoRa_TxBuffer, 4, 1000);
 8001362:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001366:	2204      	movs	r2, #4
 8001368:	4922      	ldr	r1, [pc, #136]	; (80013f4 <Process_Modbus+0x308>)
 800136a:	4823      	ldr	r0, [pc, #140]	; (80013f8 <Process_Modbus+0x30c>)
 800136c:	f003 ffb9 	bl	80052e2 <LoRa_transmit>
		memset(LoRa_TxBuffer, 0, sizeof(LoRa_TxBuffer));
 8001370:	220a      	movs	r2, #10
 8001372:	2100      	movs	r1, #0
 8001374:	481f      	ldr	r0, [pc, #124]	; (80013f4 <Process_Modbus+0x308>)
 8001376:	f007 fec2 	bl	80090fe <memset>
		memset(rx_data, 0, sizeof(rx_data));
 800137a:	2220      	movs	r2, #32
 800137c:	2100      	movs	r1, #0
 800137e:	4819      	ldr	r0, [pc, #100]	; (80013e4 <Process_Modbus+0x2f8>)
 8001380:	f007 febd 	bl	80090fe <memset>
		break;
 8001384:	e0c1      	b.n	800150a <Process_Modbus+0x41e>

	// Read Error RH measurement
	case 4:
		Error_H = Receive_Error_RH(Data_16[0]);
 8001386:	4b15      	ldr	r3, [pc, #84]	; (80013dc <Process_Modbus+0x2f0>)
 8001388:	881b      	ldrh	r3, [r3, #0]
 800138a:	4618      	mov	r0, r3
 800138c:	f004 fade 	bl	800594c <Receive_Error_RH>
 8001390:	4603      	mov	r3, r0
 8001392:	461a      	mov	r2, r3
 8001394:	4b20      	ldr	r3, [pc, #128]	; (8001418 <Process_Modbus+0x32c>)
 8001396:	701a      	strb	r2, [r3, #0]
		// Display error
		LoRa_TxBuffer[0] = 0x01;
 8001398:	4b16      	ldr	r3, [pc, #88]	; (80013f4 <Process_Modbus+0x308>)
 800139a:	2201      	movs	r2, #1
 800139c:	701a      	strb	r2, [r3, #0]
		LoRa_TxBuffer[1] = 0x01; // Error
 800139e:	4b15      	ldr	r3, [pc, #84]	; (80013f4 <Process_Modbus+0x308>)
 80013a0:	2201      	movs	r2, #1
 80013a2:	705a      	strb	r2, [r3, #1]
		LoRa_TxBuffer[2] = 0x02; // RH Measure Err
 80013a4:	4b13      	ldr	r3, [pc, #76]	; (80013f4 <Process_Modbus+0x308>)
 80013a6:	2202      	movs	r2, #2
 80013a8:	709a      	strb	r2, [r3, #2]
		LoRa_TxBuffer[3] = Error_H;
 80013aa:	4b1b      	ldr	r3, [pc, #108]	; (8001418 <Process_Modbus+0x32c>)
 80013ac:	781a      	ldrb	r2, [r3, #0]
 80013ae:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <Process_Modbus+0x308>)
 80013b0:	70da      	strb	r2, [r3, #3]
		LoRa_transmit(&myLoRa, LoRa_TxBuffer, 4, 1000);
 80013b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013b6:	2204      	movs	r2, #4
 80013b8:	490e      	ldr	r1, [pc, #56]	; (80013f4 <Process_Modbus+0x308>)
 80013ba:	480f      	ldr	r0, [pc, #60]	; (80013f8 <Process_Modbus+0x30c>)
 80013bc:	f003 ff91 	bl	80052e2 <LoRa_transmit>
		memset(LoRa_TxBuffer, 0, sizeof(LoRa_TxBuffer));
 80013c0:	220a      	movs	r2, #10
 80013c2:	2100      	movs	r1, #0
 80013c4:	480b      	ldr	r0, [pc, #44]	; (80013f4 <Process_Modbus+0x308>)
 80013c6:	f007 fe9a 	bl	80090fe <memset>
		memset(rx_data, 0, sizeof(rx_data));
 80013ca:	2220      	movs	r2, #32
 80013cc:	2100      	movs	r1, #0
 80013ce:	4805      	ldr	r0, [pc, #20]	; (80013e4 <Process_Modbus+0x2f8>)
 80013d0:	f007 fe95 	bl	80090fe <memset>
		break;
 80013d4:	e099      	b.n	800150a <Process_Modbus+0x41e>
 80013d6:	bf00      	nop
 80013d8:	20000340 	.word	0x20000340
 80013dc:	200002f4 	.word	0x200002f4
 80013e0:	20000332 	.word	0x20000332
 80013e4:	2000030c 	.word	0x2000030c
 80013e8:	20000334 	.word	0x20000334
 80013ec:	20000368 	.word	0x20000368
 80013f0:	0800d880 	.word	0x0800d880
 80013f4:	200003f8 	.word	0x200003f8
 80013f8:	200003c0 	.word	0x200003c0
 80013fc:	0800d894 	.word	0x0800d894
 8001400:	0800d8a8 	.word	0x0800d8a8
 8001404:	200002f8 	.word	0x200002f8
 8001408:	20000338 	.word	0x20000338
 800140c:	0800d8bc 	.word	0x0800d8bc
 8001410:	20000348 	.word	0x20000348
 8001414:	20000306 	.word	0x20000306
 8001418:	20000307 	.word	0x20000307

	// Read error device
	case 5:
		Error_Device = Receive_Error_Device(Data_16[0]);
 800141c:	4b3c      	ldr	r3, [pc, #240]	; (8001510 <Process_Modbus+0x424>)
 800141e:	881b      	ldrh	r3, [r3, #0]
 8001420:	4618      	mov	r0, r3
 8001422:	f004 faed 	bl	8005a00 <Receive_Error_Device>
 8001426:	4603      	mov	r3, r0
 8001428:	461a      	mov	r2, r3
 800142a:	4b3a      	ldr	r3, [pc, #232]	; (8001514 <Process_Modbus+0x428>)
 800142c:	701a      	strb	r2, [r3, #0]
		// Display error
		LoRa_TxBuffer[0] = 0x01;
 800142e:	4b3a      	ldr	r3, [pc, #232]	; (8001518 <Process_Modbus+0x42c>)
 8001430:	2201      	movs	r2, #1
 8001432:	701a      	strb	r2, [r3, #0]
		LoRa_TxBuffer[1] = 0x01; // Error
 8001434:	4b38      	ldr	r3, [pc, #224]	; (8001518 <Process_Modbus+0x42c>)
 8001436:	2201      	movs	r2, #1
 8001438:	705a      	strb	r2, [r3, #1]
		LoRa_TxBuffer[2] = 0x02; // RH Measure Err
 800143a:	4b37      	ldr	r3, [pc, #220]	; (8001518 <Process_Modbus+0x42c>)
 800143c:	2202      	movs	r2, #2
 800143e:	709a      	strb	r2, [r3, #2]
		LoRa_TxBuffer[3] = Error_Device;
 8001440:	4b34      	ldr	r3, [pc, #208]	; (8001514 <Process_Modbus+0x428>)
 8001442:	781a      	ldrb	r2, [r3, #0]
 8001444:	4b34      	ldr	r3, [pc, #208]	; (8001518 <Process_Modbus+0x42c>)
 8001446:	70da      	strb	r2, [r3, #3]
		LoRa_transmit(&myLoRa, LoRa_TxBuffer, 4, 1000);
 8001448:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800144c:	2204      	movs	r2, #4
 800144e:	4932      	ldr	r1, [pc, #200]	; (8001518 <Process_Modbus+0x42c>)
 8001450:	4832      	ldr	r0, [pc, #200]	; (800151c <Process_Modbus+0x430>)
 8001452:	f003 ff46 	bl	80052e2 <LoRa_transmit>
		memset(LoRa_TxBuffer, 0, sizeof(LoRa_TxBuffer));
 8001456:	220a      	movs	r2, #10
 8001458:	2100      	movs	r1, #0
 800145a:	482f      	ldr	r0, [pc, #188]	; (8001518 <Process_Modbus+0x42c>)
 800145c:	f007 fe4f 	bl	80090fe <memset>
		memset(rx_data, 0, sizeof(rx_data));
 8001460:	2220      	movs	r2, #32
 8001462:	2100      	movs	r1, #0
 8001464:	482e      	ldr	r0, [pc, #184]	; (8001520 <Process_Modbus+0x434>)
 8001466:	f007 fe4a 	bl	80090fe <memset>
		break;
 800146a:	e04e      	b.n	800150a <Process_Modbus+0x41e>

	// Read RH
	case 6:
//		LoRa_TxBuffer[0] = 0x02;
//		LoRa_TxBuffer[1] = 0x03; // Water
		LoRa_TxBuffer[6] = rx_data[3];
 800146c:	4b2c      	ldr	r3, [pc, #176]	; (8001520 <Process_Modbus+0x434>)
 800146e:	78da      	ldrb	r2, [r3, #3]
 8001470:	4b29      	ldr	r3, [pc, #164]	; (8001518 <Process_Modbus+0x42c>)
 8001472:	719a      	strb	r2, [r3, #6]
		LoRa_TxBuffer[7] = rx_data[4];
 8001474:	4b2a      	ldr	r3, [pc, #168]	; (8001520 <Process_Modbus+0x434>)
 8001476:	791a      	ldrb	r2, [r3, #4]
 8001478:	4b27      	ldr	r3, [pc, #156]	; (8001518 <Process_Modbus+0x42c>)
 800147a:	71da      	strb	r2, [r3, #7]
		LoRa_TxBuffer[8] = rx_data[5];
 800147c:	4b28      	ldr	r3, [pc, #160]	; (8001520 <Process_Modbus+0x434>)
 800147e:	795a      	ldrb	r2, [r3, #5]
 8001480:	4b25      	ldr	r3, [pc, #148]	; (8001518 <Process_Modbus+0x42c>)
 8001482:	721a      	strb	r2, [r3, #8]
		LoRa_TxBuffer[9] = rx_data[6];
 8001484:	4b26      	ldr	r3, [pc, #152]	; (8001520 <Process_Modbus+0x434>)
 8001486:	799a      	ldrb	r2, [r3, #6]
 8001488:	4b23      	ldr	r3, [pc, #140]	; (8001518 <Process_Modbus+0x42c>)
 800148a:	725a      	strb	r2, [r3, #9]
		LoRa_transmit(&myLoRa, LoRa_TxBuffer, 10, 1000);
 800148c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001490:	220a      	movs	r2, #10
 8001492:	4921      	ldr	r1, [pc, #132]	; (8001518 <Process_Modbus+0x42c>)
 8001494:	4821      	ldr	r0, [pc, #132]	; (800151c <Process_Modbus+0x430>)
 8001496:	f003 ff24 	bl	80052e2 <LoRa_transmit>
		memset(LoRa_TxBuffer, 0, sizeof(LoRa_TxBuffer));
 800149a:	220a      	movs	r2, #10
 800149c:	2100      	movs	r1, #0
 800149e:	481e      	ldr	r0, [pc, #120]	; (8001518 <Process_Modbus+0x42c>)
 80014a0:	f007 fe2d 	bl	80090fe <memset>
		RH =  unpack754_32(Data_32);
 80014a4:	4b1f      	ldr	r3, [pc, #124]	; (8001524 <Process_Modbus+0x438>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f004 f8d7 	bl	800565c <unpack754_32>
 80014ae:	4603      	mov	r3, r0
 80014b0:	4a1d      	ldr	r2, [pc, #116]	; (8001528 <Process_Modbus+0x43c>)
 80014b2:	6013      	str	r3, [r2, #0]
		sprintf(LCD_Send,"Water: %.2f ppm",RH );
 80014b4:	4b1c      	ldr	r3, [pc, #112]	; (8001528 <Process_Modbus+0x43c>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7fe ffb5 	bl	8000428 <__aeabi_f2d>
 80014be:	4602      	mov	r2, r0
 80014c0:	460b      	mov	r3, r1
 80014c2:	491a      	ldr	r1, [pc, #104]	; (800152c <Process_Modbus+0x440>)
 80014c4:	481a      	ldr	r0, [pc, #104]	; (8001530 <Process_Modbus+0x444>)
 80014c6:	f008 fda3 	bl	800a010 <siprintf>
		CLCD_SetCursor(&LCD1, 0, 1);
 80014ca:	2201      	movs	r2, #1
 80014cc:	2100      	movs	r1, #0
 80014ce:	4819      	ldr	r0, [pc, #100]	; (8001534 <Process_Modbus+0x448>)
 80014d0:	f003 fc58 	bl	8004d84 <CLCD_SetCursor>
		CLCD_WriteString(&LCD1, LCD_Send);
 80014d4:	4916      	ldr	r1, [pc, #88]	; (8001530 <Process_Modbus+0x444>)
 80014d6:	4817      	ldr	r0, [pc, #92]	; (8001534 <Process_Modbus+0x448>)
 80014d8:	f003 fcbb 	bl	8004e52 <CLCD_WriteString>
		HAL_Delay(5000);
 80014dc:	f241 3088 	movw	r0, #5000	; 0x1388
 80014e0:	f000 fbd6 	bl	8001c90 <HAL_Delay>
//		CLCD_Clear(&LCD1);
		HAL_GPIO_WritePin(GPIOB, Led_Water_Pin|Led_Temp_Pin, GPIO_PIN_RESET);
 80014e4:	2200      	movs	r2, #0
 80014e6:	2160      	movs	r1, #96	; 0x60
 80014e8:	4813      	ldr	r0, [pc, #76]	; (8001538 <Process_Modbus+0x44c>)
 80014ea:	f000 ff09 	bl	8002300 <HAL_GPIO_WritePin>
		RH = 0;
 80014ee:	4b0e      	ldr	r3, [pc, #56]	; (8001528 <Process_Modbus+0x43c>)
 80014f0:	f04f 0200 	mov.w	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
		memset(rx_data, 0, sizeof(rx_data));
 80014f6:	2220      	movs	r2, #32
 80014f8:	2100      	movs	r1, #0
 80014fa:	4809      	ldr	r0, [pc, #36]	; (8001520 <Process_Modbus+0x434>)
 80014fc:	f007 fdff 	bl	80090fe <memset>
		i = 0;
 8001500:	4b0e      	ldr	r3, [pc, #56]	; (800153c <Process_Modbus+0x450>)
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
	}
}
 8001506:	e000      	b.n	800150a <Process_Modbus+0x41e>
		break;
 8001508:	bf00      	nop
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	200002f4 	.word	0x200002f4
 8001514:	20000308 	.word	0x20000308
 8001518:	200003f8 	.word	0x200003f8
 800151c:	200003c0 	.word	0x200003c0
 8001520:	2000030c 	.word	0x2000030c
 8001524:	200002f8 	.word	0x200002f8
 8001528:	2000033c 	.word	0x2000033c
 800152c:	0800d8cc 	.word	0x0800d8cc
 8001530:	20000348 	.word	0x20000348
 8001534:	20000368 	.word	0x20000368
 8001538:	40010c00 	.word	0x40010c00
 800153c:	20000340 	.word	0x20000340

08001540 <LoRa_Setup>:

void LoRa_Setup(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
	  myLoRa.CS_port         = NSS_GPIO_Port;
 8001544:	4b1a      	ldr	r3, [pc, #104]	; (80015b0 <LoRa_Setup+0x70>)
 8001546:	4a1b      	ldr	r2, [pc, #108]	; (80015b4 <LoRa_Setup+0x74>)
 8001548:	601a      	str	r2, [r3, #0]
	  myLoRa.CS_pin          = NSS_Pin;
 800154a:	4b19      	ldr	r3, [pc, #100]	; (80015b0 <LoRa_Setup+0x70>)
 800154c:	2201      	movs	r2, #1
 800154e:	809a      	strh	r2, [r3, #4]
	  myLoRa.reset_port      = RST_GPIO_Port;
 8001550:	4b17      	ldr	r3, [pc, #92]	; (80015b0 <LoRa_Setup+0x70>)
 8001552:	4a18      	ldr	r2, [pc, #96]	; (80015b4 <LoRa_Setup+0x74>)
 8001554:	609a      	str	r2, [r3, #8]
	  myLoRa.reset_pin       = RST_Pin;
 8001556:	4b16      	ldr	r3, [pc, #88]	; (80015b0 <LoRa_Setup+0x70>)
 8001558:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800155c:	819a      	strh	r2, [r3, #12]
	  myLoRa.DIO0_port       = DIO0_GPIO_Port;
 800155e:	4b14      	ldr	r3, [pc, #80]	; (80015b0 <LoRa_Setup+0x70>)
 8001560:	4a14      	ldr	r2, [pc, #80]	; (80015b4 <LoRa_Setup+0x74>)
 8001562:	611a      	str	r2, [r3, #16]
	  myLoRa.DIO0_pin        = DIO0_Pin;
 8001564:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <LoRa_Setup+0x70>)
 8001566:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800156a:	829a      	strh	r2, [r3, #20]
	  myLoRa.hSPIx           = &hspi1;
 800156c:	4b10      	ldr	r3, [pc, #64]	; (80015b0 <LoRa_Setup+0x70>)
 800156e:	4a12      	ldr	r2, [pc, #72]	; (80015b8 <LoRa_Setup+0x78>)
 8001570:	619a      	str	r2, [r3, #24]
	  myLoRa.frequency             = 433       ;
 8001572:	4b0f      	ldr	r3, [pc, #60]	; (80015b0 <LoRa_Setup+0x70>)
 8001574:	f240 12b1 	movw	r2, #433	; 0x1b1
 8001578:	621a      	str	r2, [r3, #32]
	  myLoRa.spredingFactor        = SF_7      ;
 800157a:	4b0d      	ldr	r3, [pc, #52]	; (80015b0 <LoRa_Setup+0x70>)
 800157c:	2207      	movs	r2, #7
 800157e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  myLoRa.bandWidth			   = BW_125KHz ;
 8001582:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <LoRa_Setup+0x70>)
 8001584:	2207      	movs	r2, #7
 8001586:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	  myLoRa.crcRate               = CR_4_5    ;
 800158a:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <LoRa_Setup+0x70>)
 800158c:	2201      	movs	r2, #1
 800158e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	  myLoRa.power				   = POWER_20db;
 8001592:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <LoRa_Setup+0x70>)
 8001594:	22ff      	movs	r2, #255	; 0xff
 8001596:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	  myLoRa.overCurrentProtection = 100       ;
 800159a:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <LoRa_Setup+0x70>)
 800159c:	2264      	movs	r2, #100	; 0x64
 800159e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	  myLoRa.preamble			   = 8         ;
 80015a2:	4b03      	ldr	r3, [pc, #12]	; (80015b0 <LoRa_Setup+0x70>)
 80015a4:	2208      	movs	r2, #8
 80015a6:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr
 80015b0:	200003c0 	.word	0x200003c0
 80015b4:	40010c00 	.word	0x40010c00
 80015b8:	20000200 	.word	0x20000200

080015bc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	while(xSemaphoreTake(myCountingSem01Handle,portMAX_DELAY))
 80015c4:	e050      	b.n	8001668 <StartDefaultTask+0xac>
		{
			if (xQueueReceive(myQueueDataHandle, &rxData, portMAX_DELAY))
 80015c6:	4b30      	ldr	r3, [pc, #192]	; (8001688 <StartDefaultTask+0xcc>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f04f 32ff 	mov.w	r2, #4294967295
 80015ce:	492f      	ldr	r1, [pc, #188]	; (800168c <StartDefaultTask+0xd0>)
 80015d0:	4618      	mov	r0, r3
 80015d2:	f005 f9a1 	bl	8006918 <xQueueReceive>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d045      	beq.n	8001668 <StartDefaultTask+0xac>
			{
				rx_data[rx_index++] = rxData;
 80015dc:	4b2c      	ldr	r3, [pc, #176]	; (8001690 <StartDefaultTask+0xd4>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	1c5a      	adds	r2, r3, #1
 80015e2:	492b      	ldr	r1, [pc, #172]	; (8001690 <StartDefaultTask+0xd4>)
 80015e4:	600a      	str	r2, [r1, #0]
 80015e6:	4a29      	ldr	r2, [pc, #164]	; (800168c <StartDefaultTask+0xd0>)
 80015e8:	7811      	ldrb	r1, [r2, #0]
 80015ea:	4a2a      	ldr	r2, [pc, #168]	; (8001694 <StartDefaultTask+0xd8>)
 80015ec:	54d1      	strb	r1, [r2, r3]
				rx_length++;
 80015ee:	4b2a      	ldr	r3, [pc, #168]	; (8001698 <StartDefaultTask+0xdc>)
 80015f0:	881b      	ldrh	r3, [r3, #0]
 80015f2:	3301      	adds	r3, #1
 80015f4:	b29a      	uxth	r2, r3
 80015f6:	4b28      	ldr	r3, [pc, #160]	; (8001698 <StartDefaultTask+0xdc>)
 80015f8:	801a      	strh	r2, [r3, #0]
				if (rx_length >= 7 && checkcrc16(rx_data, rx_index) == 1)
 80015fa:	4b27      	ldr	r3, [pc, #156]	; (8001698 <StartDefaultTask+0xdc>)
 80015fc:	881b      	ldrh	r3, [r3, #0]
 80015fe:	2b06      	cmp	r3, #6
 8001600:	d932      	bls.n	8001668 <StartDefaultTask+0xac>
 8001602:	4b23      	ldr	r3, [pc, #140]	; (8001690 <StartDefaultTask+0xd4>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	b2db      	uxtb	r3, r3
 8001608:	4619      	mov	r1, r3
 800160a:	4822      	ldr	r0, [pc, #136]	; (8001694 <StartDefaultTask+0xd8>)
 800160c:	f003 ffa8 	bl	8005560 <checkcrc16>
 8001610:	4603      	mov	r3, r0
 8001612:	2b01      	cmp	r3, #1
 8001614:	d128      	bne.n	8001668 <StartDefaultTask+0xac>
				{
					Data_16[0] = rx_data[3]<<8 | rx_data[4];
 8001616:	4b1f      	ldr	r3, [pc, #124]	; (8001694 <StartDefaultTask+0xd8>)
 8001618:	78db      	ldrb	r3, [r3, #3]
 800161a:	021b      	lsls	r3, r3, #8
 800161c:	b21a      	sxth	r2, r3
 800161e:	4b1d      	ldr	r3, [pc, #116]	; (8001694 <StartDefaultTask+0xd8>)
 8001620:	791b      	ldrb	r3, [r3, #4]
 8001622:	b21b      	sxth	r3, r3
 8001624:	4313      	orrs	r3, r2
 8001626:	b21b      	sxth	r3, r3
 8001628:	b29a      	uxth	r2, r3
 800162a:	4b1c      	ldr	r3, [pc, #112]	; (800169c <StartDefaultTask+0xe0>)
 800162c:	801a      	strh	r2, [r3, #0]
					Data_16[1] = rx_data[5]<<8 | rx_data[6];
 800162e:	4b19      	ldr	r3, [pc, #100]	; (8001694 <StartDefaultTask+0xd8>)
 8001630:	795b      	ldrb	r3, [r3, #5]
 8001632:	021b      	lsls	r3, r3, #8
 8001634:	b21a      	sxth	r2, r3
 8001636:	4b17      	ldr	r3, [pc, #92]	; (8001694 <StartDefaultTask+0xd8>)
 8001638:	799b      	ldrb	r3, [r3, #6]
 800163a:	b21b      	sxth	r3, r3
 800163c:	4313      	orrs	r3, r2
 800163e:	b21b      	sxth	r3, r3
 8001640:	b29a      	uxth	r2, r3
 8001642:	4b16      	ldr	r3, [pc, #88]	; (800169c <StartDefaultTask+0xe0>)
 8001644:	805a      	strh	r2, [r3, #2]
					Data_32 = Data_16[1]<<16 | Data_16[0];
 8001646:	4b15      	ldr	r3, [pc, #84]	; (800169c <StartDefaultTask+0xe0>)
 8001648:	885b      	ldrh	r3, [r3, #2]
 800164a:	041b      	lsls	r3, r3, #16
 800164c:	4a13      	ldr	r2, [pc, #76]	; (800169c <StartDefaultTask+0xe0>)
 800164e:	8812      	ldrh	r2, [r2, #0]
 8001650:	4313      	orrs	r3, r2
 8001652:	461a      	mov	r2, r3
 8001654:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <StartDefaultTask+0xe4>)
 8001656:	601a      	str	r2, [r3, #0]
					Process_Modbus();
 8001658:	f7ff fd48 	bl	80010ec <Process_Modbus>
					rx_index = 0;
 800165c:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <StartDefaultTask+0xd4>)
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
					rx_length = 0;
 8001662:	4b0d      	ldr	r3, [pc, #52]	; (8001698 <StartDefaultTask+0xdc>)
 8001664:	2200      	movs	r2, #0
 8001666:	801a      	strh	r2, [r3, #0]
	while(xSemaphoreTake(myCountingSem01Handle,portMAX_DELAY))
 8001668:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <StartDefaultTask+0xe8>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f04f 31ff 	mov.w	r1, #4294967295
 8001670:	4618      	mov	r0, r3
 8001672:	f005 fa31 	bl	8006ad8 <xQueueSemaphoreTake>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d1a4      	bne.n	80015c6 <StartDefaultTask+0xa>
				}
			}
		}
  /* USER CODE END 5 */
}
 800167c:	bf00      	nop
 800167e:	bf00      	nop
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	200002e8 	.word	0x200002e8
 800168c:	20000305 	.word	0x20000305
 8001690:	2000032c 	.word	0x2000032c
 8001694:	2000030c 	.word	0x2000030c
 8001698:	20000330 	.word	0x20000330
 800169c:	200002f4 	.word	0x200002f4
 80016a0:	200002f8 	.word	0x200002f8
 80016a4:	200002f0 	.word	0x200002f0

080016a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a07      	ldr	r2, [pc, #28]	; (80016d4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d101      	bne.n	80016be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80016ba:	f000 facd 	bl	8001c58 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM2) {
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016c6:	d101      	bne.n	80016cc <HAL_TIM_PeriodElapsedCallback+0x24>
    Send_Error_Status();
 80016c8:	f004 f820 	bl	800570c <Send_Error_Status>
  }

  /* USER CODE END Callback 1 */
}
 80016cc:	bf00      	nop
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40000800 	.word	0x40000800

080016d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016dc:	b672      	cpsid	i
}
 80016de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016e0:	e7fe      	b.n	80016e0 <Error_Handler+0x8>
	...

080016e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016ea:	4b18      	ldr	r3, [pc, #96]	; (800174c <HAL_MspInit+0x68>)
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	4a17      	ldr	r2, [pc, #92]	; (800174c <HAL_MspInit+0x68>)
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	6193      	str	r3, [r2, #24]
 80016f6:	4b15      	ldr	r3, [pc, #84]	; (800174c <HAL_MspInit+0x68>)
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	60bb      	str	r3, [r7, #8]
 8001700:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001702:	4b12      	ldr	r3, [pc, #72]	; (800174c <HAL_MspInit+0x68>)
 8001704:	69db      	ldr	r3, [r3, #28]
 8001706:	4a11      	ldr	r2, [pc, #68]	; (800174c <HAL_MspInit+0x68>)
 8001708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800170c:	61d3      	str	r3, [r2, #28]
 800170e:	4b0f      	ldr	r3, [pc, #60]	; (800174c <HAL_MspInit+0x68>)
 8001710:	69db      	ldr	r3, [r3, #28]
 8001712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001716:	607b      	str	r3, [r7, #4]
 8001718:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800171a:	2200      	movs	r2, #0
 800171c:	210f      	movs	r1, #15
 800171e:	f06f 0001 	mvn.w	r0, #1
 8001722:	f000 fb8e 	bl	8001e42 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001726:	4b0a      	ldr	r3, [pc, #40]	; (8001750 <HAL_MspInit+0x6c>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	4a04      	ldr	r2, [pc, #16]	; (8001750 <HAL_MspInit+0x6c>)
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001742:	bf00      	nop
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40021000 	.word	0x40021000
 8001750:	40010000 	.word	0x40010000

08001754 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b088      	sub	sp, #32
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175c:	f107 0310 	add.w	r3, r7, #16
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a1b      	ldr	r2, [pc, #108]	; (80017dc <HAL_SPI_MspInit+0x88>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d12f      	bne.n	80017d4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001774:	4b1a      	ldr	r3, [pc, #104]	; (80017e0 <HAL_SPI_MspInit+0x8c>)
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	4a19      	ldr	r2, [pc, #100]	; (80017e0 <HAL_SPI_MspInit+0x8c>)
 800177a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800177e:	6193      	str	r3, [r2, #24]
 8001780:	4b17      	ldr	r3, [pc, #92]	; (80017e0 <HAL_SPI_MspInit+0x8c>)
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800178c:	4b14      	ldr	r3, [pc, #80]	; (80017e0 <HAL_SPI_MspInit+0x8c>)
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	4a13      	ldr	r2, [pc, #76]	; (80017e0 <HAL_SPI_MspInit+0x8c>)
 8001792:	f043 0304 	orr.w	r3, r3, #4
 8001796:	6193      	str	r3, [r2, #24]
 8001798:	4b11      	ldr	r3, [pc, #68]	; (80017e0 <HAL_SPI_MspInit+0x8c>)
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	f003 0304 	and.w	r3, r3, #4
 80017a0:	60bb      	str	r3, [r7, #8]
 80017a2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80017a4:	23a0      	movs	r3, #160	; 0xa0
 80017a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a8:	2302      	movs	r3, #2
 80017aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017ac:	2303      	movs	r3, #3
 80017ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b0:	f107 0310 	add.w	r3, r7, #16
 80017b4:	4619      	mov	r1, r3
 80017b6:	480b      	ldr	r0, [pc, #44]	; (80017e4 <HAL_SPI_MspInit+0x90>)
 80017b8:	f000 fc1e 	bl	8001ff8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017bc:	2340      	movs	r3, #64	; 0x40
 80017be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017c0:	2300      	movs	r3, #0
 80017c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c4:	2300      	movs	r3, #0
 80017c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c8:	f107 0310 	add.w	r3, r7, #16
 80017cc:	4619      	mov	r1, r3
 80017ce:	4805      	ldr	r0, [pc, #20]	; (80017e4 <HAL_SPI_MspInit+0x90>)
 80017d0:	f000 fc12 	bl	8001ff8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80017d4:	bf00      	nop
 80017d6:	3720      	adds	r7, #32
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40013000 	.word	0x40013000
 80017e0:	40021000 	.word	0x40021000
 80017e4:	40010800 	.word	0x40010800

080017e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017f8:	d113      	bne.n	8001822 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017fa:	4b0c      	ldr	r3, [pc, #48]	; (800182c <HAL_TIM_Base_MspInit+0x44>)
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	4a0b      	ldr	r2, [pc, #44]	; (800182c <HAL_TIM_Base_MspInit+0x44>)
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	61d3      	str	r3, [r2, #28]
 8001806:	4b09      	ldr	r3, [pc, #36]	; (800182c <HAL_TIM_Base_MspInit+0x44>)
 8001808:	69db      	ldr	r3, [r3, #28]
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001812:	2200      	movs	r2, #0
 8001814:	2105      	movs	r1, #5
 8001816:	201c      	movs	r0, #28
 8001818:	f000 fb13 	bl	8001e42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800181c:	201c      	movs	r0, #28
 800181e:	f000 fb2c 	bl	8001e7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001822:	bf00      	nop
 8001824:	3710      	adds	r7, #16
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40021000 	.word	0x40021000

08001830 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b088      	sub	sp, #32
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001838:	f107 0310 	add.w	r3, r7, #16
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a1f      	ldr	r2, [pc, #124]	; (80018c8 <HAL_UART_MspInit+0x98>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d137      	bne.n	80018c0 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001850:	4b1e      	ldr	r3, [pc, #120]	; (80018cc <HAL_UART_MspInit+0x9c>)
 8001852:	69db      	ldr	r3, [r3, #28]
 8001854:	4a1d      	ldr	r2, [pc, #116]	; (80018cc <HAL_UART_MspInit+0x9c>)
 8001856:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800185a:	61d3      	str	r3, [r2, #28]
 800185c:	4b1b      	ldr	r3, [pc, #108]	; (80018cc <HAL_UART_MspInit+0x9c>)
 800185e:	69db      	ldr	r3, [r3, #28]
 8001860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001864:	60fb      	str	r3, [r7, #12]
 8001866:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001868:	4b18      	ldr	r3, [pc, #96]	; (80018cc <HAL_UART_MspInit+0x9c>)
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	4a17      	ldr	r2, [pc, #92]	; (80018cc <HAL_UART_MspInit+0x9c>)
 800186e:	f043 0304 	orr.w	r3, r3, #4
 8001872:	6193      	str	r3, [r2, #24]
 8001874:	4b15      	ldr	r3, [pc, #84]	; (80018cc <HAL_UART_MspInit+0x9c>)
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	f003 0304 	and.w	r3, r3, #4
 800187c:	60bb      	str	r3, [r7, #8]
 800187e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001880:	2304      	movs	r3, #4
 8001882:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001884:	2302      	movs	r3, #2
 8001886:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001888:	2303      	movs	r3, #3
 800188a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188c:	f107 0310 	add.w	r3, r7, #16
 8001890:	4619      	mov	r1, r3
 8001892:	480f      	ldr	r0, [pc, #60]	; (80018d0 <HAL_UART_MspInit+0xa0>)
 8001894:	f000 fbb0 	bl	8001ff8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001898:	2308      	movs	r3, #8
 800189a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a4:	f107 0310 	add.w	r3, r7, #16
 80018a8:	4619      	mov	r1, r3
 80018aa:	4809      	ldr	r0, [pc, #36]	; (80018d0 <HAL_UART_MspInit+0xa0>)
 80018ac:	f000 fba4 	bl	8001ff8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80018b0:	2200      	movs	r2, #0
 80018b2:	2105      	movs	r1, #5
 80018b4:	2026      	movs	r0, #38	; 0x26
 80018b6:	f000 fac4 	bl	8001e42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80018ba:	2026      	movs	r0, #38	; 0x26
 80018bc:	f000 fadd 	bl	8001e7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018c0:	bf00      	nop
 80018c2:	3720      	adds	r7, #32
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40004400 	.word	0x40004400
 80018cc:	40021000 	.word	0x40021000
 80018d0:	40010800 	.word	0x40010800

080018d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b08e      	sub	sp, #56	; 0x38
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80018dc:	2300      	movs	r3, #0
 80018de:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80018e0:	2300      	movs	r3, #0
 80018e2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80018e4:	2300      	movs	r3, #0
 80018e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80018ea:	4b34      	ldr	r3, [pc, #208]	; (80019bc <HAL_InitTick+0xe8>)
 80018ec:	69db      	ldr	r3, [r3, #28]
 80018ee:	4a33      	ldr	r2, [pc, #204]	; (80019bc <HAL_InitTick+0xe8>)
 80018f0:	f043 0304 	orr.w	r3, r3, #4
 80018f4:	61d3      	str	r3, [r2, #28]
 80018f6:	4b31      	ldr	r3, [pc, #196]	; (80019bc <HAL_InitTick+0xe8>)
 80018f8:	69db      	ldr	r3, [r3, #28]
 80018fa:	f003 0304 	and.w	r3, r3, #4
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001902:	f107 0210 	add.w	r2, r7, #16
 8001906:	f107 0314 	add.w	r3, r7, #20
 800190a:	4611      	mov	r1, r2
 800190c:	4618      	mov	r0, r3
 800190e:	f001 f923 	bl	8002b58 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001912:	6a3b      	ldr	r3, [r7, #32]
 8001914:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001918:	2b00      	cmp	r3, #0
 800191a:	d103      	bne.n	8001924 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800191c:	f001 f8f4 	bl	8002b08 <HAL_RCC_GetPCLK1Freq>
 8001920:	6378      	str	r0, [r7, #52]	; 0x34
 8001922:	e004      	b.n	800192e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001924:	f001 f8f0 	bl	8002b08 <HAL_RCC_GetPCLK1Freq>
 8001928:	4603      	mov	r3, r0
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800192e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001930:	4a23      	ldr	r2, [pc, #140]	; (80019c0 <HAL_InitTick+0xec>)
 8001932:	fba2 2303 	umull	r2, r3, r2, r3
 8001936:	0c9b      	lsrs	r3, r3, #18
 8001938:	3b01      	subs	r3, #1
 800193a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800193c:	4b21      	ldr	r3, [pc, #132]	; (80019c4 <HAL_InitTick+0xf0>)
 800193e:	4a22      	ldr	r2, [pc, #136]	; (80019c8 <HAL_InitTick+0xf4>)
 8001940:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001942:	4b20      	ldr	r3, [pc, #128]	; (80019c4 <HAL_InitTick+0xf0>)
 8001944:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001948:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800194a:	4a1e      	ldr	r2, [pc, #120]	; (80019c4 <HAL_InitTick+0xf0>)
 800194c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800194e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001950:	4b1c      	ldr	r3, [pc, #112]	; (80019c4 <HAL_InitTick+0xf0>)
 8001952:	2200      	movs	r2, #0
 8001954:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001956:	4b1b      	ldr	r3, [pc, #108]	; (80019c4 <HAL_InitTick+0xf0>)
 8001958:	2200      	movs	r2, #0
 800195a:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800195c:	4b19      	ldr	r3, [pc, #100]	; (80019c4 <HAL_InitTick+0xf0>)
 800195e:	2200      	movs	r2, #0
 8001960:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8001962:	4818      	ldr	r0, [pc, #96]	; (80019c4 <HAL_InitTick+0xf0>)
 8001964:	f001 febe 	bl	80036e4 <HAL_TIM_Base_Init>
 8001968:	4603      	mov	r3, r0
 800196a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800196e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001972:	2b00      	cmp	r3, #0
 8001974:	d11b      	bne.n	80019ae <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8001976:	4813      	ldr	r0, [pc, #76]	; (80019c4 <HAL_InitTick+0xf0>)
 8001978:	f001 ff04 	bl	8003784 <HAL_TIM_Base_Start_IT>
 800197c:	4603      	mov	r3, r0
 800197e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001982:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001986:	2b00      	cmp	r3, #0
 8001988:	d111      	bne.n	80019ae <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800198a:	201e      	movs	r0, #30
 800198c:	f000 fa75 	bl	8001e7a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2b0f      	cmp	r3, #15
 8001994:	d808      	bhi.n	80019a8 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001996:	2200      	movs	r2, #0
 8001998:	6879      	ldr	r1, [r7, #4]
 800199a:	201e      	movs	r0, #30
 800199c:	f000 fa51 	bl	8001e42 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019a0:	4a0a      	ldr	r2, [pc, #40]	; (80019cc <HAL_InitTick+0xf8>)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6013      	str	r3, [r2, #0]
 80019a6:	e002      	b.n	80019ae <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80019ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3738      	adds	r7, #56	; 0x38
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40021000 	.word	0x40021000
 80019c0:	431bde83 	.word	0x431bde83
 80019c4:	20000404 	.word	0x20000404
 80019c8:	40000800 	.word	0x40000800
 80019cc:	20000004 	.word	0x20000004

080019d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019d4:	e7fe      	b.n	80019d4 <NMI_Handler+0x4>

080019d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019d6:	b480      	push	{r7}
 80019d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019da:	e7fe      	b.n	80019da <HardFault_Handler+0x4>

080019dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019e0:	e7fe      	b.n	80019e0 <MemManage_Handler+0x4>

080019e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019e2:	b480      	push	{r7}
 80019e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019e6:	e7fe      	b.n	80019e6 <BusFault_Handler+0x4>

080019e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019ec:	e7fe      	b.n	80019ec <UsageFault_Handler+0x4>

080019ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019ee:	b480      	push	{r7}
 80019f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bc80      	pop	{r7}
 80019f8:	4770      	bx	lr

080019fa <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B_Temp_Pin);
 80019fe:	2001      	movs	r0, #1
 8001a00:	f000 fc96 	bl	8002330 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001a04:	bf00      	nop
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B_Water_Pin);
 8001a0c:	2002      	movs	r0, #2
 8001a0e:	f000 fc8f 	bl	8002330 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
	...

08001a18 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a1c:	4802      	ldr	r0, [pc, #8]	; (8001a28 <TIM2_IRQHandler+0x10>)
 8001a1e:	f001 ff03 	bl	8003828 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	20000258 	.word	0x20000258

08001a2c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001a30:	4802      	ldr	r0, [pc, #8]	; (8001a3c <TIM4_IRQHandler+0x10>)
 8001a32:	f001 fef9 	bl	8003828 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001a36:	bf00      	nop
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000404 	.word	0x20000404

08001a40 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a44:	4802      	ldr	r0, [pc, #8]	; (8001a50 <USART2_IRQHandler+0x10>)
 8001a46:	f002 fb57 	bl	80040f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	200002a0 	.word	0x200002a0

08001a54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  return 1;
 8001a58:	2301      	movs	r3, #1
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bc80      	pop	{r7}
 8001a60:	4770      	bx	lr

08001a62 <_kill>:

int _kill(int pid, int sig)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b082      	sub	sp, #8
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
 8001a6a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a6c:	f007 fa16 	bl	8008e9c <__errno>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2216      	movs	r2, #22
 8001a74:	601a      	str	r2, [r3, #0]
  return -1;
 8001a76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <_exit>:

void _exit (int status)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b082      	sub	sp, #8
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a8a:	f04f 31ff 	mov.w	r1, #4294967295
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f7ff ffe7 	bl	8001a62 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a94:	e7fe      	b.n	8001a94 <_exit+0x12>

08001a96 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b086      	sub	sp, #24
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	60f8      	str	r0, [r7, #12]
 8001a9e:	60b9      	str	r1, [r7, #8]
 8001aa0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	617b      	str	r3, [r7, #20]
 8001aa6:	e00a      	b.n	8001abe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001aa8:	f3af 8000 	nop.w
 8001aac:	4601      	mov	r1, r0
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	1c5a      	adds	r2, r3, #1
 8001ab2:	60ba      	str	r2, [r7, #8]
 8001ab4:	b2ca      	uxtb	r2, r1
 8001ab6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	3301      	adds	r3, #1
 8001abc:	617b      	str	r3, [r7, #20]
 8001abe:	697a      	ldr	r2, [r7, #20]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	dbf0      	blt.n	8001aa8 <_read+0x12>
  }

  return len;
 8001ac6:	687b      	ldr	r3, [r7, #4]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3718      	adds	r7, #24
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001adc:	2300      	movs	r3, #0
 8001ade:	617b      	str	r3, [r7, #20]
 8001ae0:	e009      	b.n	8001af6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	1c5a      	adds	r2, r3, #1
 8001ae6:	60ba      	str	r2, [r7, #8]
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	3301      	adds	r3, #1
 8001af4:	617b      	str	r3, [r7, #20]
 8001af6:	697a      	ldr	r2, [r7, #20]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	dbf1      	blt.n	8001ae2 <_write+0x12>
  }
  return len;
 8001afe:	687b      	ldr	r3, [r7, #4]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3718      	adds	r7, #24
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <_close>:

int _close(int file)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bc80      	pop	{r7}
 8001b1c:	4770      	bx	lr

08001b1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b083      	sub	sp, #12
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
 8001b26:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b2e:	605a      	str	r2, [r3, #4]
  return 0;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr

08001b3c <_isatty>:

int _isatty(int file)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b44:	2301      	movs	r3, #1
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bc80      	pop	{r7}
 8001b4e:	4770      	bx	lr

08001b50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3714      	adds	r7, #20
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr

08001b68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b70:	4a14      	ldr	r2, [pc, #80]	; (8001bc4 <_sbrk+0x5c>)
 8001b72:	4b15      	ldr	r3, [pc, #84]	; (8001bc8 <_sbrk+0x60>)
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b7c:	4b13      	ldr	r3, [pc, #76]	; (8001bcc <_sbrk+0x64>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d102      	bne.n	8001b8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b84:	4b11      	ldr	r3, [pc, #68]	; (8001bcc <_sbrk+0x64>)
 8001b86:	4a12      	ldr	r2, [pc, #72]	; (8001bd0 <_sbrk+0x68>)
 8001b88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b8a:	4b10      	ldr	r3, [pc, #64]	; (8001bcc <_sbrk+0x64>)
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4413      	add	r3, r2
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d207      	bcs.n	8001ba8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b98:	f007 f980 	bl	8008e9c <__errno>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	220c      	movs	r2, #12
 8001ba0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba6:	e009      	b.n	8001bbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ba8:	4b08      	ldr	r3, [pc, #32]	; (8001bcc <_sbrk+0x64>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bae:	4b07      	ldr	r3, [pc, #28]	; (8001bcc <_sbrk+0x64>)
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	4a05      	ldr	r2, [pc, #20]	; (8001bcc <_sbrk+0x64>)
 8001bb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bba:	68fb      	ldr	r3, [r7, #12]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3718      	adds	r7, #24
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	20005000 	.word	0x20005000
 8001bc8:	00000400 	.word	0x00000400
 8001bcc:	2000044c 	.word	0x2000044c
 8001bd0:	20003270 	.word	0x20003270

08001bd4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bd8:	bf00      	nop
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bc80      	pop	{r7}
 8001bde:	4770      	bx	lr

08001be0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001be0:	480c      	ldr	r0, [pc, #48]	; (8001c14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001be2:	490d      	ldr	r1, [pc, #52]	; (8001c18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001be4:	4a0d      	ldr	r2, [pc, #52]	; (8001c1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001be6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001be8:	e002      	b.n	8001bf0 <LoopCopyDataInit>

08001bea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bee:	3304      	adds	r3, #4

08001bf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bf4:	d3f9      	bcc.n	8001bea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bf6:	4a0a      	ldr	r2, [pc, #40]	; (8001c20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bf8:	4c0a      	ldr	r4, [pc, #40]	; (8001c24 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bfc:	e001      	b.n	8001c02 <LoopFillZerobss>

08001bfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c00:	3204      	adds	r2, #4

08001c02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c04:	d3fb      	bcc.n	8001bfe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c06:	f7ff ffe5 	bl	8001bd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c0a:	f007 fa43 	bl	8009094 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c0e:	f7ff f855 	bl	8000cbc <main>
  bx lr
 8001c12:	4770      	bx	lr
  ldr r0, =_sdata
 8001c14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c18:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001c1c:	0800e024 	.word	0x0800e024
  ldr r2, =_sbss
 8001c20:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001c24:	20003270 	.word	0x20003270

08001c28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c28:	e7fe      	b.n	8001c28 <ADC1_2_IRQHandler>
	...

08001c2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c30:	4b08      	ldr	r3, [pc, #32]	; (8001c54 <HAL_Init+0x28>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a07      	ldr	r2, [pc, #28]	; (8001c54 <HAL_Init+0x28>)
 8001c36:	f043 0310 	orr.w	r3, r3, #16
 8001c3a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c3c:	2003      	movs	r0, #3
 8001c3e:	f000 f8f5 	bl	8001e2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c42:	200f      	movs	r0, #15
 8001c44:	f7ff fe46 	bl	80018d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c48:	f7ff fd4c 	bl	80016e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40022000 	.word	0x40022000

08001c58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c5c:	4b05      	ldr	r3, [pc, #20]	; (8001c74 <HAL_IncTick+0x1c>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	461a      	mov	r2, r3
 8001c62:	4b05      	ldr	r3, [pc, #20]	; (8001c78 <HAL_IncTick+0x20>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4413      	add	r3, r2
 8001c68:	4a03      	ldr	r2, [pc, #12]	; (8001c78 <HAL_IncTick+0x20>)
 8001c6a:	6013      	str	r3, [r2, #0]
}
 8001c6c:	bf00      	nop
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr
 8001c74:	20000008 	.word	0x20000008
 8001c78:	20000450 	.word	0x20000450

08001c7c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c80:	4b02      	ldr	r3, [pc, #8]	; (8001c8c <HAL_GetTick+0x10>)
 8001c82:	681b      	ldr	r3, [r3, #0]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr
 8001c8c:	20000450 	.word	0x20000450

08001c90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c98:	f7ff fff0 	bl	8001c7c <HAL_GetTick>
 8001c9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca8:	d005      	beq.n	8001cb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001caa:	4b0a      	ldr	r3, [pc, #40]	; (8001cd4 <HAL_Delay+0x44>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	461a      	mov	r2, r3
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cb6:	bf00      	nop
 8001cb8:	f7ff ffe0 	bl	8001c7c <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	68fa      	ldr	r2, [r7, #12]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d8f7      	bhi.n	8001cb8 <HAL_Delay+0x28>
  {
  }
}
 8001cc8:	bf00      	nop
 8001cca:	bf00      	nop
 8001ccc:	3710      	adds	r7, #16
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	20000008 	.word	0x20000008

08001cd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f003 0307 	and.w	r3, r3, #7
 8001ce6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ce8:	4b0c      	ldr	r3, [pc, #48]	; (8001d1c <__NVIC_SetPriorityGrouping+0x44>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cee:	68ba      	ldr	r2, [r7, #8]
 8001cf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d0a:	4a04      	ldr	r2, [pc, #16]	; (8001d1c <__NVIC_SetPriorityGrouping+0x44>)
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	60d3      	str	r3, [r2, #12]
}
 8001d10:	bf00      	nop
 8001d12:	3714      	adds	r7, #20
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bc80      	pop	{r7}
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d24:	4b04      	ldr	r3, [pc, #16]	; (8001d38 <__NVIC_GetPriorityGrouping+0x18>)
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	0a1b      	lsrs	r3, r3, #8
 8001d2a:	f003 0307 	and.w	r3, r3, #7
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bc80      	pop	{r7}
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	e000ed00 	.word	0xe000ed00

08001d3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	4603      	mov	r3, r0
 8001d44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	db0b      	blt.n	8001d66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d4e:	79fb      	ldrb	r3, [r7, #7]
 8001d50:	f003 021f 	and.w	r2, r3, #31
 8001d54:	4906      	ldr	r1, [pc, #24]	; (8001d70 <__NVIC_EnableIRQ+0x34>)
 8001d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5a:	095b      	lsrs	r3, r3, #5
 8001d5c:	2001      	movs	r0, #1
 8001d5e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr
 8001d70:	e000e100 	.word	0xe000e100

08001d74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	6039      	str	r1, [r7, #0]
 8001d7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	db0a      	blt.n	8001d9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	b2da      	uxtb	r2, r3
 8001d8c:	490c      	ldr	r1, [pc, #48]	; (8001dc0 <__NVIC_SetPriority+0x4c>)
 8001d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d92:	0112      	lsls	r2, r2, #4
 8001d94:	b2d2      	uxtb	r2, r2
 8001d96:	440b      	add	r3, r1
 8001d98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d9c:	e00a      	b.n	8001db4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	b2da      	uxtb	r2, r3
 8001da2:	4908      	ldr	r1, [pc, #32]	; (8001dc4 <__NVIC_SetPriority+0x50>)
 8001da4:	79fb      	ldrb	r3, [r7, #7]
 8001da6:	f003 030f 	and.w	r3, r3, #15
 8001daa:	3b04      	subs	r3, #4
 8001dac:	0112      	lsls	r2, r2, #4
 8001dae:	b2d2      	uxtb	r2, r2
 8001db0:	440b      	add	r3, r1
 8001db2:	761a      	strb	r2, [r3, #24]
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bc80      	pop	{r7}
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	e000e100 	.word	0xe000e100
 8001dc4:	e000ed00 	.word	0xe000ed00

08001dc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b089      	sub	sp, #36	; 0x24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	f1c3 0307 	rsb	r3, r3, #7
 8001de2:	2b04      	cmp	r3, #4
 8001de4:	bf28      	it	cs
 8001de6:	2304      	movcs	r3, #4
 8001de8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	3304      	adds	r3, #4
 8001dee:	2b06      	cmp	r3, #6
 8001df0:	d902      	bls.n	8001df8 <NVIC_EncodePriority+0x30>
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	3b03      	subs	r3, #3
 8001df6:	e000      	b.n	8001dfa <NVIC_EncodePriority+0x32>
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	43da      	mvns	r2, r3
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	401a      	ands	r2, r3
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e10:	f04f 31ff 	mov.w	r1, #4294967295
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1a:	43d9      	mvns	r1, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e20:	4313      	orrs	r3, r2
         );
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3724      	adds	r7, #36	; 0x24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bc80      	pop	{r7}
 8001e2a:	4770      	bx	lr

08001e2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f7ff ff4f 	bl	8001cd8 <__NVIC_SetPriorityGrouping>
}
 8001e3a:	bf00      	nop
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b086      	sub	sp, #24
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	4603      	mov	r3, r0
 8001e4a:	60b9      	str	r1, [r7, #8]
 8001e4c:	607a      	str	r2, [r7, #4]
 8001e4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e50:	2300      	movs	r3, #0
 8001e52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e54:	f7ff ff64 	bl	8001d20 <__NVIC_GetPriorityGrouping>
 8001e58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	68b9      	ldr	r1, [r7, #8]
 8001e5e:	6978      	ldr	r0, [r7, #20]
 8001e60:	f7ff ffb2 	bl	8001dc8 <NVIC_EncodePriority>
 8001e64:	4602      	mov	r2, r0
 8001e66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e6a:	4611      	mov	r1, r2
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff ff81 	bl	8001d74 <__NVIC_SetPriority>
}
 8001e72:	bf00      	nop
 8001e74:	3718      	adds	r7, #24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b082      	sub	sp, #8
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	4603      	mov	r3, r0
 8001e82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff ff57 	bl	8001d3c <__NVIC_EnableIRQ>
}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e96:	b480      	push	{r7}
 8001e98:	b085      	sub	sp, #20
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d008      	beq.n	8001ebe <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2204      	movs	r2, #4
 8001eb0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e020      	b.n	8001f00 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f022 020e 	bic.w	r2, r2, #14
 8001ecc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f022 0201 	bic.w	r2, r2, #1
 8001edc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	fa01 f202 	lsl.w	r2, r1, r2
 8001eec:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3714      	adds	r7, #20
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bc80      	pop	{r7}
 8001f08:	4770      	bx	lr
	...

08001f0c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f14:	2300      	movs	r3, #0
 8001f16:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d005      	beq.n	8001f2e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2204      	movs	r2, #4
 8001f26:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	73fb      	strb	r3, [r7, #15]
 8001f2c:	e051      	b.n	8001fd2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f022 020e 	bic.w	r2, r2, #14
 8001f3c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f022 0201 	bic.w	r2, r2, #1
 8001f4c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a22      	ldr	r2, [pc, #136]	; (8001fdc <HAL_DMA_Abort_IT+0xd0>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d029      	beq.n	8001fac <HAL_DMA_Abort_IT+0xa0>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a20      	ldr	r2, [pc, #128]	; (8001fe0 <HAL_DMA_Abort_IT+0xd4>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d022      	beq.n	8001fa8 <HAL_DMA_Abort_IT+0x9c>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a1f      	ldr	r2, [pc, #124]	; (8001fe4 <HAL_DMA_Abort_IT+0xd8>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d01a      	beq.n	8001fa2 <HAL_DMA_Abort_IT+0x96>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a1d      	ldr	r2, [pc, #116]	; (8001fe8 <HAL_DMA_Abort_IT+0xdc>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d012      	beq.n	8001f9c <HAL_DMA_Abort_IT+0x90>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a1c      	ldr	r2, [pc, #112]	; (8001fec <HAL_DMA_Abort_IT+0xe0>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d00a      	beq.n	8001f96 <HAL_DMA_Abort_IT+0x8a>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a1a      	ldr	r2, [pc, #104]	; (8001ff0 <HAL_DMA_Abort_IT+0xe4>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d102      	bne.n	8001f90 <HAL_DMA_Abort_IT+0x84>
 8001f8a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001f8e:	e00e      	b.n	8001fae <HAL_DMA_Abort_IT+0xa2>
 8001f90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f94:	e00b      	b.n	8001fae <HAL_DMA_Abort_IT+0xa2>
 8001f96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f9a:	e008      	b.n	8001fae <HAL_DMA_Abort_IT+0xa2>
 8001f9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fa0:	e005      	b.n	8001fae <HAL_DMA_Abort_IT+0xa2>
 8001fa2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fa6:	e002      	b.n	8001fae <HAL_DMA_Abort_IT+0xa2>
 8001fa8:	2310      	movs	r3, #16
 8001faa:	e000      	b.n	8001fae <HAL_DMA_Abort_IT+0xa2>
 8001fac:	2301      	movs	r3, #1
 8001fae:	4a11      	ldr	r2, [pc, #68]	; (8001ff4 <HAL_DMA_Abort_IT+0xe8>)
 8001fb0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d003      	beq.n	8001fd2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	4798      	blx	r3
    } 
  }
  return status;
 8001fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3710      	adds	r7, #16
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40020008 	.word	0x40020008
 8001fe0:	4002001c 	.word	0x4002001c
 8001fe4:	40020030 	.word	0x40020030
 8001fe8:	40020044 	.word	0x40020044
 8001fec:	40020058 	.word	0x40020058
 8001ff0:	4002006c 	.word	0x4002006c
 8001ff4:	40020000 	.word	0x40020000

08001ff8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b08b      	sub	sp, #44	; 0x2c
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002002:	2300      	movs	r3, #0
 8002004:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002006:	2300      	movs	r3, #0
 8002008:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800200a:	e169      	b.n	80022e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800200c:	2201      	movs	r2, #1
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	69fa      	ldr	r2, [r7, #28]
 800201c:	4013      	ands	r3, r2
 800201e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	429a      	cmp	r2, r3
 8002026:	f040 8158 	bne.w	80022da <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	4a9a      	ldr	r2, [pc, #616]	; (8002298 <HAL_GPIO_Init+0x2a0>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d05e      	beq.n	80020f2 <HAL_GPIO_Init+0xfa>
 8002034:	4a98      	ldr	r2, [pc, #608]	; (8002298 <HAL_GPIO_Init+0x2a0>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d875      	bhi.n	8002126 <HAL_GPIO_Init+0x12e>
 800203a:	4a98      	ldr	r2, [pc, #608]	; (800229c <HAL_GPIO_Init+0x2a4>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d058      	beq.n	80020f2 <HAL_GPIO_Init+0xfa>
 8002040:	4a96      	ldr	r2, [pc, #600]	; (800229c <HAL_GPIO_Init+0x2a4>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d86f      	bhi.n	8002126 <HAL_GPIO_Init+0x12e>
 8002046:	4a96      	ldr	r2, [pc, #600]	; (80022a0 <HAL_GPIO_Init+0x2a8>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d052      	beq.n	80020f2 <HAL_GPIO_Init+0xfa>
 800204c:	4a94      	ldr	r2, [pc, #592]	; (80022a0 <HAL_GPIO_Init+0x2a8>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d869      	bhi.n	8002126 <HAL_GPIO_Init+0x12e>
 8002052:	4a94      	ldr	r2, [pc, #592]	; (80022a4 <HAL_GPIO_Init+0x2ac>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d04c      	beq.n	80020f2 <HAL_GPIO_Init+0xfa>
 8002058:	4a92      	ldr	r2, [pc, #584]	; (80022a4 <HAL_GPIO_Init+0x2ac>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d863      	bhi.n	8002126 <HAL_GPIO_Init+0x12e>
 800205e:	4a92      	ldr	r2, [pc, #584]	; (80022a8 <HAL_GPIO_Init+0x2b0>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d046      	beq.n	80020f2 <HAL_GPIO_Init+0xfa>
 8002064:	4a90      	ldr	r2, [pc, #576]	; (80022a8 <HAL_GPIO_Init+0x2b0>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d85d      	bhi.n	8002126 <HAL_GPIO_Init+0x12e>
 800206a:	2b12      	cmp	r3, #18
 800206c:	d82a      	bhi.n	80020c4 <HAL_GPIO_Init+0xcc>
 800206e:	2b12      	cmp	r3, #18
 8002070:	d859      	bhi.n	8002126 <HAL_GPIO_Init+0x12e>
 8002072:	a201      	add	r2, pc, #4	; (adr r2, 8002078 <HAL_GPIO_Init+0x80>)
 8002074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002078:	080020f3 	.word	0x080020f3
 800207c:	080020cd 	.word	0x080020cd
 8002080:	080020df 	.word	0x080020df
 8002084:	08002121 	.word	0x08002121
 8002088:	08002127 	.word	0x08002127
 800208c:	08002127 	.word	0x08002127
 8002090:	08002127 	.word	0x08002127
 8002094:	08002127 	.word	0x08002127
 8002098:	08002127 	.word	0x08002127
 800209c:	08002127 	.word	0x08002127
 80020a0:	08002127 	.word	0x08002127
 80020a4:	08002127 	.word	0x08002127
 80020a8:	08002127 	.word	0x08002127
 80020ac:	08002127 	.word	0x08002127
 80020b0:	08002127 	.word	0x08002127
 80020b4:	08002127 	.word	0x08002127
 80020b8:	08002127 	.word	0x08002127
 80020bc:	080020d5 	.word	0x080020d5
 80020c0:	080020e9 	.word	0x080020e9
 80020c4:	4a79      	ldr	r2, [pc, #484]	; (80022ac <HAL_GPIO_Init+0x2b4>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d013      	beq.n	80020f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80020ca:	e02c      	b.n	8002126 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	623b      	str	r3, [r7, #32]
          break;
 80020d2:	e029      	b.n	8002128 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	3304      	adds	r3, #4
 80020da:	623b      	str	r3, [r7, #32]
          break;
 80020dc:	e024      	b.n	8002128 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	3308      	adds	r3, #8
 80020e4:	623b      	str	r3, [r7, #32]
          break;
 80020e6:	e01f      	b.n	8002128 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	330c      	adds	r3, #12
 80020ee:	623b      	str	r3, [r7, #32]
          break;
 80020f0:	e01a      	b.n	8002128 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d102      	bne.n	8002100 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80020fa:	2304      	movs	r3, #4
 80020fc:	623b      	str	r3, [r7, #32]
          break;
 80020fe:	e013      	b.n	8002128 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d105      	bne.n	8002114 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002108:	2308      	movs	r3, #8
 800210a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	69fa      	ldr	r2, [r7, #28]
 8002110:	611a      	str	r2, [r3, #16]
          break;
 8002112:	e009      	b.n	8002128 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002114:	2308      	movs	r3, #8
 8002116:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	69fa      	ldr	r2, [r7, #28]
 800211c:	615a      	str	r2, [r3, #20]
          break;
 800211e:	e003      	b.n	8002128 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002120:	2300      	movs	r3, #0
 8002122:	623b      	str	r3, [r7, #32]
          break;
 8002124:	e000      	b.n	8002128 <HAL_GPIO_Init+0x130>
          break;
 8002126:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	2bff      	cmp	r3, #255	; 0xff
 800212c:	d801      	bhi.n	8002132 <HAL_GPIO_Init+0x13a>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	e001      	b.n	8002136 <HAL_GPIO_Init+0x13e>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	3304      	adds	r3, #4
 8002136:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	2bff      	cmp	r3, #255	; 0xff
 800213c:	d802      	bhi.n	8002144 <HAL_GPIO_Init+0x14c>
 800213e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	e002      	b.n	800214a <HAL_GPIO_Init+0x152>
 8002144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002146:	3b08      	subs	r3, #8
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	210f      	movs	r1, #15
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	fa01 f303 	lsl.w	r3, r1, r3
 8002158:	43db      	mvns	r3, r3
 800215a:	401a      	ands	r2, r3
 800215c:	6a39      	ldr	r1, [r7, #32]
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	fa01 f303 	lsl.w	r3, r1, r3
 8002164:	431a      	orrs	r2, r3
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	f000 80b1 	beq.w	80022da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002178:	4b4d      	ldr	r3, [pc, #308]	; (80022b0 <HAL_GPIO_Init+0x2b8>)
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	4a4c      	ldr	r2, [pc, #304]	; (80022b0 <HAL_GPIO_Init+0x2b8>)
 800217e:	f043 0301 	orr.w	r3, r3, #1
 8002182:	6193      	str	r3, [r2, #24]
 8002184:	4b4a      	ldr	r3, [pc, #296]	; (80022b0 <HAL_GPIO_Init+0x2b8>)
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	f003 0301 	and.w	r3, r3, #1
 800218c:	60bb      	str	r3, [r7, #8]
 800218e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002190:	4a48      	ldr	r2, [pc, #288]	; (80022b4 <HAL_GPIO_Init+0x2bc>)
 8002192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002194:	089b      	lsrs	r3, r3, #2
 8002196:	3302      	adds	r3, #2
 8002198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800219c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a0:	f003 0303 	and.w	r3, r3, #3
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	220f      	movs	r2, #15
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	43db      	mvns	r3, r3
 80021ae:	68fa      	ldr	r2, [r7, #12]
 80021b0:	4013      	ands	r3, r2
 80021b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4a40      	ldr	r2, [pc, #256]	; (80022b8 <HAL_GPIO_Init+0x2c0>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d013      	beq.n	80021e4 <HAL_GPIO_Init+0x1ec>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a3f      	ldr	r2, [pc, #252]	; (80022bc <HAL_GPIO_Init+0x2c4>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d00d      	beq.n	80021e0 <HAL_GPIO_Init+0x1e8>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a3e      	ldr	r2, [pc, #248]	; (80022c0 <HAL_GPIO_Init+0x2c8>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d007      	beq.n	80021dc <HAL_GPIO_Init+0x1e4>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a3d      	ldr	r2, [pc, #244]	; (80022c4 <HAL_GPIO_Init+0x2cc>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d101      	bne.n	80021d8 <HAL_GPIO_Init+0x1e0>
 80021d4:	2303      	movs	r3, #3
 80021d6:	e006      	b.n	80021e6 <HAL_GPIO_Init+0x1ee>
 80021d8:	2304      	movs	r3, #4
 80021da:	e004      	b.n	80021e6 <HAL_GPIO_Init+0x1ee>
 80021dc:	2302      	movs	r3, #2
 80021de:	e002      	b.n	80021e6 <HAL_GPIO_Init+0x1ee>
 80021e0:	2301      	movs	r3, #1
 80021e2:	e000      	b.n	80021e6 <HAL_GPIO_Init+0x1ee>
 80021e4:	2300      	movs	r3, #0
 80021e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021e8:	f002 0203 	and.w	r2, r2, #3
 80021ec:	0092      	lsls	r2, r2, #2
 80021ee:	4093      	lsls	r3, r2
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80021f6:	492f      	ldr	r1, [pc, #188]	; (80022b4 <HAL_GPIO_Init+0x2bc>)
 80021f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fa:	089b      	lsrs	r3, r3, #2
 80021fc:	3302      	adds	r3, #2
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d006      	beq.n	800221e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002210:	4b2d      	ldr	r3, [pc, #180]	; (80022c8 <HAL_GPIO_Init+0x2d0>)
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	492c      	ldr	r1, [pc, #176]	; (80022c8 <HAL_GPIO_Init+0x2d0>)
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	4313      	orrs	r3, r2
 800221a:	600b      	str	r3, [r1, #0]
 800221c:	e006      	b.n	800222c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800221e:	4b2a      	ldr	r3, [pc, #168]	; (80022c8 <HAL_GPIO_Init+0x2d0>)
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	43db      	mvns	r3, r3
 8002226:	4928      	ldr	r1, [pc, #160]	; (80022c8 <HAL_GPIO_Init+0x2d0>)
 8002228:	4013      	ands	r3, r2
 800222a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d006      	beq.n	8002246 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002238:	4b23      	ldr	r3, [pc, #140]	; (80022c8 <HAL_GPIO_Init+0x2d0>)
 800223a:	685a      	ldr	r2, [r3, #4]
 800223c:	4922      	ldr	r1, [pc, #136]	; (80022c8 <HAL_GPIO_Init+0x2d0>)
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	4313      	orrs	r3, r2
 8002242:	604b      	str	r3, [r1, #4]
 8002244:	e006      	b.n	8002254 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002246:	4b20      	ldr	r3, [pc, #128]	; (80022c8 <HAL_GPIO_Init+0x2d0>)
 8002248:	685a      	ldr	r2, [r3, #4]
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	43db      	mvns	r3, r3
 800224e:	491e      	ldr	r1, [pc, #120]	; (80022c8 <HAL_GPIO_Init+0x2d0>)
 8002250:	4013      	ands	r3, r2
 8002252:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d006      	beq.n	800226e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002260:	4b19      	ldr	r3, [pc, #100]	; (80022c8 <HAL_GPIO_Init+0x2d0>)
 8002262:	689a      	ldr	r2, [r3, #8]
 8002264:	4918      	ldr	r1, [pc, #96]	; (80022c8 <HAL_GPIO_Init+0x2d0>)
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	4313      	orrs	r3, r2
 800226a:	608b      	str	r3, [r1, #8]
 800226c:	e006      	b.n	800227c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800226e:	4b16      	ldr	r3, [pc, #88]	; (80022c8 <HAL_GPIO_Init+0x2d0>)
 8002270:	689a      	ldr	r2, [r3, #8]
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	43db      	mvns	r3, r3
 8002276:	4914      	ldr	r1, [pc, #80]	; (80022c8 <HAL_GPIO_Init+0x2d0>)
 8002278:	4013      	ands	r3, r2
 800227a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d021      	beq.n	80022cc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002288:	4b0f      	ldr	r3, [pc, #60]	; (80022c8 <HAL_GPIO_Init+0x2d0>)
 800228a:	68da      	ldr	r2, [r3, #12]
 800228c:	490e      	ldr	r1, [pc, #56]	; (80022c8 <HAL_GPIO_Init+0x2d0>)
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	4313      	orrs	r3, r2
 8002292:	60cb      	str	r3, [r1, #12]
 8002294:	e021      	b.n	80022da <HAL_GPIO_Init+0x2e2>
 8002296:	bf00      	nop
 8002298:	10320000 	.word	0x10320000
 800229c:	10310000 	.word	0x10310000
 80022a0:	10220000 	.word	0x10220000
 80022a4:	10210000 	.word	0x10210000
 80022a8:	10120000 	.word	0x10120000
 80022ac:	10110000 	.word	0x10110000
 80022b0:	40021000 	.word	0x40021000
 80022b4:	40010000 	.word	0x40010000
 80022b8:	40010800 	.word	0x40010800
 80022bc:	40010c00 	.word	0x40010c00
 80022c0:	40011000 	.word	0x40011000
 80022c4:	40011400 	.word	0x40011400
 80022c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80022cc:	4b0b      	ldr	r3, [pc, #44]	; (80022fc <HAL_GPIO_Init+0x304>)
 80022ce:	68da      	ldr	r2, [r3, #12]
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	43db      	mvns	r3, r3
 80022d4:	4909      	ldr	r1, [pc, #36]	; (80022fc <HAL_GPIO_Init+0x304>)
 80022d6:	4013      	ands	r3, r2
 80022d8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80022da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022dc:	3301      	adds	r3, #1
 80022de:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e6:	fa22 f303 	lsr.w	r3, r2, r3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f47f ae8e 	bne.w	800200c <HAL_GPIO_Init+0x14>
  }
}
 80022f0:	bf00      	nop
 80022f2:	bf00      	nop
 80022f4:	372c      	adds	r7, #44	; 0x2c
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bc80      	pop	{r7}
 80022fa:	4770      	bx	lr
 80022fc:	40010400 	.word	0x40010400

08002300 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	460b      	mov	r3, r1
 800230a:	807b      	strh	r3, [r7, #2]
 800230c:	4613      	mov	r3, r2
 800230e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002310:	787b      	ldrb	r3, [r7, #1]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d003      	beq.n	800231e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002316:	887a      	ldrh	r2, [r7, #2]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800231c:	e003      	b.n	8002326 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800231e:	887b      	ldrh	r3, [r7, #2]
 8002320:	041a      	lsls	r2, r3, #16
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	611a      	str	r2, [r3, #16]
}
 8002326:	bf00      	nop
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	bc80      	pop	{r7}
 800232e:	4770      	bx	lr

08002330 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	4603      	mov	r3, r0
 8002338:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800233a:	4b08      	ldr	r3, [pc, #32]	; (800235c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800233c:	695a      	ldr	r2, [r3, #20]
 800233e:	88fb      	ldrh	r3, [r7, #6]
 8002340:	4013      	ands	r3, r2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d006      	beq.n	8002354 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002346:	4a05      	ldr	r2, [pc, #20]	; (800235c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002348:	88fb      	ldrh	r3, [r7, #6]
 800234a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800234c:	88fb      	ldrh	r3, [r7, #6]
 800234e:	4618      	mov	r0, r3
 8002350:	f7fe fc70 	bl	8000c34 <HAL_GPIO_EXTI_Callback>
  }
}
 8002354:	bf00      	nop
 8002356:	3708      	adds	r7, #8
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40010400 	.word	0x40010400

08002360 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e272      	b.n	8002858 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b00      	cmp	r3, #0
 800237c:	f000 8087 	beq.w	800248e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002380:	4b92      	ldr	r3, [pc, #584]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f003 030c 	and.w	r3, r3, #12
 8002388:	2b04      	cmp	r3, #4
 800238a:	d00c      	beq.n	80023a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800238c:	4b8f      	ldr	r3, [pc, #572]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f003 030c 	and.w	r3, r3, #12
 8002394:	2b08      	cmp	r3, #8
 8002396:	d112      	bne.n	80023be <HAL_RCC_OscConfig+0x5e>
 8002398:	4b8c      	ldr	r3, [pc, #560]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023a4:	d10b      	bne.n	80023be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a6:	4b89      	ldr	r3, [pc, #548]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d06c      	beq.n	800248c <HAL_RCC_OscConfig+0x12c>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d168      	bne.n	800248c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e24c      	b.n	8002858 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023c6:	d106      	bne.n	80023d6 <HAL_RCC_OscConfig+0x76>
 80023c8:	4b80      	ldr	r3, [pc, #512]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a7f      	ldr	r2, [pc, #508]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 80023ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023d2:	6013      	str	r3, [r2, #0]
 80023d4:	e02e      	b.n	8002434 <HAL_RCC_OscConfig+0xd4>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d10c      	bne.n	80023f8 <HAL_RCC_OscConfig+0x98>
 80023de:	4b7b      	ldr	r3, [pc, #492]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a7a      	ldr	r2, [pc, #488]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 80023e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023e8:	6013      	str	r3, [r2, #0]
 80023ea:	4b78      	ldr	r3, [pc, #480]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a77      	ldr	r2, [pc, #476]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 80023f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023f4:	6013      	str	r3, [r2, #0]
 80023f6:	e01d      	b.n	8002434 <HAL_RCC_OscConfig+0xd4>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002400:	d10c      	bne.n	800241c <HAL_RCC_OscConfig+0xbc>
 8002402:	4b72      	ldr	r3, [pc, #456]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a71      	ldr	r2, [pc, #452]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 8002408:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800240c:	6013      	str	r3, [r2, #0]
 800240e:	4b6f      	ldr	r3, [pc, #444]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a6e      	ldr	r2, [pc, #440]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 8002414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002418:	6013      	str	r3, [r2, #0]
 800241a:	e00b      	b.n	8002434 <HAL_RCC_OscConfig+0xd4>
 800241c:	4b6b      	ldr	r3, [pc, #428]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a6a      	ldr	r2, [pc, #424]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 8002422:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002426:	6013      	str	r3, [r2, #0]
 8002428:	4b68      	ldr	r3, [pc, #416]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a67      	ldr	r2, [pc, #412]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 800242e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002432:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d013      	beq.n	8002464 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800243c:	f7ff fc1e 	bl	8001c7c <HAL_GetTick>
 8002440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002444:	f7ff fc1a 	bl	8001c7c <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b64      	cmp	r3, #100	; 0x64
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e200      	b.n	8002858 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002456:	4b5d      	ldr	r3, [pc, #372]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d0f0      	beq.n	8002444 <HAL_RCC_OscConfig+0xe4>
 8002462:	e014      	b.n	800248e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002464:	f7ff fc0a 	bl	8001c7c <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800246c:	f7ff fc06 	bl	8001c7c <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b64      	cmp	r3, #100	; 0x64
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e1ec      	b.n	8002858 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800247e:	4b53      	ldr	r3, [pc, #332]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1f0      	bne.n	800246c <HAL_RCC_OscConfig+0x10c>
 800248a:	e000      	b.n	800248e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800248c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d063      	beq.n	8002562 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800249a:	4b4c      	ldr	r3, [pc, #304]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f003 030c 	and.w	r3, r3, #12
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00b      	beq.n	80024be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80024a6:	4b49      	ldr	r3, [pc, #292]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f003 030c 	and.w	r3, r3, #12
 80024ae:	2b08      	cmp	r3, #8
 80024b0:	d11c      	bne.n	80024ec <HAL_RCC_OscConfig+0x18c>
 80024b2:	4b46      	ldr	r3, [pc, #280]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d116      	bne.n	80024ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024be:	4b43      	ldr	r3, [pc, #268]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d005      	beq.n	80024d6 <HAL_RCC_OscConfig+0x176>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d001      	beq.n	80024d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e1c0      	b.n	8002858 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d6:	4b3d      	ldr	r3, [pc, #244]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	4939      	ldr	r1, [pc, #228]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ea:	e03a      	b.n	8002562 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	691b      	ldr	r3, [r3, #16]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d020      	beq.n	8002536 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024f4:	4b36      	ldr	r3, [pc, #216]	; (80025d0 <HAL_RCC_OscConfig+0x270>)
 80024f6:	2201      	movs	r2, #1
 80024f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024fa:	f7ff fbbf 	bl	8001c7c <HAL_GetTick>
 80024fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002500:	e008      	b.n	8002514 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002502:	f7ff fbbb 	bl	8001c7c <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	2b02      	cmp	r3, #2
 800250e:	d901      	bls.n	8002514 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e1a1      	b.n	8002858 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002514:	4b2d      	ldr	r3, [pc, #180]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0302 	and.w	r3, r3, #2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d0f0      	beq.n	8002502 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002520:	4b2a      	ldr	r3, [pc, #168]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	695b      	ldr	r3, [r3, #20]
 800252c:	00db      	lsls	r3, r3, #3
 800252e:	4927      	ldr	r1, [pc, #156]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 8002530:	4313      	orrs	r3, r2
 8002532:	600b      	str	r3, [r1, #0]
 8002534:	e015      	b.n	8002562 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002536:	4b26      	ldr	r3, [pc, #152]	; (80025d0 <HAL_RCC_OscConfig+0x270>)
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800253c:	f7ff fb9e 	bl	8001c7c <HAL_GetTick>
 8002540:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002544:	f7ff fb9a 	bl	8001c7c <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b02      	cmp	r3, #2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e180      	b.n	8002858 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002556:	4b1d      	ldr	r3, [pc, #116]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1f0      	bne.n	8002544 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0308 	and.w	r3, r3, #8
 800256a:	2b00      	cmp	r3, #0
 800256c:	d03a      	beq.n	80025e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d019      	beq.n	80025aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002576:	4b17      	ldr	r3, [pc, #92]	; (80025d4 <HAL_RCC_OscConfig+0x274>)
 8002578:	2201      	movs	r2, #1
 800257a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800257c:	f7ff fb7e 	bl	8001c7c <HAL_GetTick>
 8002580:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002582:	e008      	b.n	8002596 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002584:	f7ff fb7a 	bl	8001c7c <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b02      	cmp	r3, #2
 8002590:	d901      	bls.n	8002596 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e160      	b.n	8002858 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002596:	4b0d      	ldr	r3, [pc, #52]	; (80025cc <HAL_RCC_OscConfig+0x26c>)
 8002598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d0f0      	beq.n	8002584 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80025a2:	2001      	movs	r0, #1
 80025a4:	f000 fb08 	bl	8002bb8 <RCC_Delay>
 80025a8:	e01c      	b.n	80025e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025aa:	4b0a      	ldr	r3, [pc, #40]	; (80025d4 <HAL_RCC_OscConfig+0x274>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025b0:	f7ff fb64 	bl	8001c7c <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025b6:	e00f      	b.n	80025d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025b8:	f7ff fb60 	bl	8001c7c <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d908      	bls.n	80025d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e146      	b.n	8002858 <HAL_RCC_OscConfig+0x4f8>
 80025ca:	bf00      	nop
 80025cc:	40021000 	.word	0x40021000
 80025d0:	42420000 	.word	0x42420000
 80025d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025d8:	4b92      	ldr	r3, [pc, #584]	; (8002824 <HAL_RCC_OscConfig+0x4c4>)
 80025da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1e9      	bne.n	80025b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0304 	and.w	r3, r3, #4
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f000 80a6 	beq.w	800273e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025f2:	2300      	movs	r3, #0
 80025f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025f6:	4b8b      	ldr	r3, [pc, #556]	; (8002824 <HAL_RCC_OscConfig+0x4c4>)
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d10d      	bne.n	800261e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002602:	4b88      	ldr	r3, [pc, #544]	; (8002824 <HAL_RCC_OscConfig+0x4c4>)
 8002604:	69db      	ldr	r3, [r3, #28]
 8002606:	4a87      	ldr	r2, [pc, #540]	; (8002824 <HAL_RCC_OscConfig+0x4c4>)
 8002608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800260c:	61d3      	str	r3, [r2, #28]
 800260e:	4b85      	ldr	r3, [pc, #532]	; (8002824 <HAL_RCC_OscConfig+0x4c4>)
 8002610:	69db      	ldr	r3, [r3, #28]
 8002612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002616:	60bb      	str	r3, [r7, #8]
 8002618:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800261a:	2301      	movs	r3, #1
 800261c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800261e:	4b82      	ldr	r3, [pc, #520]	; (8002828 <HAL_RCC_OscConfig+0x4c8>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002626:	2b00      	cmp	r3, #0
 8002628:	d118      	bne.n	800265c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800262a:	4b7f      	ldr	r3, [pc, #508]	; (8002828 <HAL_RCC_OscConfig+0x4c8>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a7e      	ldr	r2, [pc, #504]	; (8002828 <HAL_RCC_OscConfig+0x4c8>)
 8002630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002634:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002636:	f7ff fb21 	bl	8001c7c <HAL_GetTick>
 800263a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800263c:	e008      	b.n	8002650 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800263e:	f7ff fb1d 	bl	8001c7c <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b64      	cmp	r3, #100	; 0x64
 800264a:	d901      	bls.n	8002650 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e103      	b.n	8002858 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002650:	4b75      	ldr	r3, [pc, #468]	; (8002828 <HAL_RCC_OscConfig+0x4c8>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002658:	2b00      	cmp	r3, #0
 800265a:	d0f0      	beq.n	800263e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d106      	bne.n	8002672 <HAL_RCC_OscConfig+0x312>
 8002664:	4b6f      	ldr	r3, [pc, #444]	; (8002824 <HAL_RCC_OscConfig+0x4c4>)
 8002666:	6a1b      	ldr	r3, [r3, #32]
 8002668:	4a6e      	ldr	r2, [pc, #440]	; (8002824 <HAL_RCC_OscConfig+0x4c4>)
 800266a:	f043 0301 	orr.w	r3, r3, #1
 800266e:	6213      	str	r3, [r2, #32]
 8002670:	e02d      	b.n	80026ce <HAL_RCC_OscConfig+0x36e>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d10c      	bne.n	8002694 <HAL_RCC_OscConfig+0x334>
 800267a:	4b6a      	ldr	r3, [pc, #424]	; (8002824 <HAL_RCC_OscConfig+0x4c4>)
 800267c:	6a1b      	ldr	r3, [r3, #32]
 800267e:	4a69      	ldr	r2, [pc, #420]	; (8002824 <HAL_RCC_OscConfig+0x4c4>)
 8002680:	f023 0301 	bic.w	r3, r3, #1
 8002684:	6213      	str	r3, [r2, #32]
 8002686:	4b67      	ldr	r3, [pc, #412]	; (8002824 <HAL_RCC_OscConfig+0x4c4>)
 8002688:	6a1b      	ldr	r3, [r3, #32]
 800268a:	4a66      	ldr	r2, [pc, #408]	; (8002824 <HAL_RCC_OscConfig+0x4c4>)
 800268c:	f023 0304 	bic.w	r3, r3, #4
 8002690:	6213      	str	r3, [r2, #32]
 8002692:	e01c      	b.n	80026ce <HAL_RCC_OscConfig+0x36e>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	2b05      	cmp	r3, #5
 800269a:	d10c      	bne.n	80026b6 <HAL_RCC_OscConfig+0x356>
 800269c:	4b61      	ldr	r3, [pc, #388]	; (8002824 <HAL_RCC_OscConfig+0x4c4>)
 800269e:	6a1b      	ldr	r3, [r3, #32]
 80026a0:	4a60      	ldr	r2, [pc, #384]	; (8002824 <HAL_RCC_OscConfig+0x4c4>)
 80026a2:	f043 0304 	orr.w	r3, r3, #4
 80026a6:	6213      	str	r3, [r2, #32]
 80026a8:	4b5e      	ldr	r3, [pc, #376]	; (8002824 <HAL_RCC_OscConfig+0x4c4>)
 80026aa:	6a1b      	ldr	r3, [r3, #32]
 80026ac:	4a5d      	ldr	r2, [pc, #372]	; (8002824 <HAL_RCC_OscConfig+0x4c4>)
 80026ae:	f043 0301 	orr.w	r3, r3, #1
 80026b2:	6213      	str	r3, [r2, #32]
 80026b4:	e00b      	b.n	80026ce <HAL_RCC_OscConfig+0x36e>
 80026b6:	4b5b      	ldr	r3, [pc, #364]	; (8002824 <HAL_RCC_OscConfig+0x4c4>)
 80026b8:	6a1b      	ldr	r3, [r3, #32]
 80026ba:	4a5a      	ldr	r2, [pc, #360]	; (8002824 <HAL_RCC_OscConfig+0x4c4>)
 80026bc:	f023 0301 	bic.w	r3, r3, #1
 80026c0:	6213      	str	r3, [r2, #32]
 80026c2:	4b58      	ldr	r3, [pc, #352]	; (8002824 <HAL_RCC_OscConfig+0x4c4>)
 80026c4:	6a1b      	ldr	r3, [r3, #32]
 80026c6:	4a57      	ldr	r2, [pc, #348]	; (8002824 <HAL_RCC_OscConfig+0x4c4>)
 80026c8:	f023 0304 	bic.w	r3, r3, #4
 80026cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d015      	beq.n	8002702 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026d6:	f7ff fad1 	bl	8001c7c <HAL_GetTick>
 80026da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026dc:	e00a      	b.n	80026f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026de:	f7ff facd 	bl	8001c7c <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d901      	bls.n	80026f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e0b1      	b.n	8002858 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026f4:	4b4b      	ldr	r3, [pc, #300]	; (8002824 <HAL_RCC_OscConfig+0x4c4>)
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d0ee      	beq.n	80026de <HAL_RCC_OscConfig+0x37e>
 8002700:	e014      	b.n	800272c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002702:	f7ff fabb 	bl	8001c7c <HAL_GetTick>
 8002706:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002708:	e00a      	b.n	8002720 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800270a:	f7ff fab7 	bl	8001c7c <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	f241 3288 	movw	r2, #5000	; 0x1388
 8002718:	4293      	cmp	r3, r2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e09b      	b.n	8002858 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002720:	4b40      	ldr	r3, [pc, #256]	; (8002824 <HAL_RCC_OscConfig+0x4c4>)
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d1ee      	bne.n	800270a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800272c:	7dfb      	ldrb	r3, [r7, #23]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d105      	bne.n	800273e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002732:	4b3c      	ldr	r3, [pc, #240]	; (8002824 <HAL_RCC_OscConfig+0x4c4>)
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	4a3b      	ldr	r2, [pc, #236]	; (8002824 <HAL_RCC_OscConfig+0x4c4>)
 8002738:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800273c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	69db      	ldr	r3, [r3, #28]
 8002742:	2b00      	cmp	r3, #0
 8002744:	f000 8087 	beq.w	8002856 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002748:	4b36      	ldr	r3, [pc, #216]	; (8002824 <HAL_RCC_OscConfig+0x4c4>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f003 030c 	and.w	r3, r3, #12
 8002750:	2b08      	cmp	r3, #8
 8002752:	d061      	beq.n	8002818 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	69db      	ldr	r3, [r3, #28]
 8002758:	2b02      	cmp	r3, #2
 800275a:	d146      	bne.n	80027ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800275c:	4b33      	ldr	r3, [pc, #204]	; (800282c <HAL_RCC_OscConfig+0x4cc>)
 800275e:	2200      	movs	r2, #0
 8002760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002762:	f7ff fa8b 	bl	8001c7c <HAL_GetTick>
 8002766:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002768:	e008      	b.n	800277c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800276a:	f7ff fa87 	bl	8001c7c <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d901      	bls.n	800277c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e06d      	b.n	8002858 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800277c:	4b29      	ldr	r3, [pc, #164]	; (8002824 <HAL_RCC_OscConfig+0x4c4>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d1f0      	bne.n	800276a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a1b      	ldr	r3, [r3, #32]
 800278c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002790:	d108      	bne.n	80027a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002792:	4b24      	ldr	r3, [pc, #144]	; (8002824 <HAL_RCC_OscConfig+0x4c4>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	4921      	ldr	r1, [pc, #132]	; (8002824 <HAL_RCC_OscConfig+0x4c4>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027a4:	4b1f      	ldr	r3, [pc, #124]	; (8002824 <HAL_RCC_OscConfig+0x4c4>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a19      	ldr	r1, [r3, #32]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b4:	430b      	orrs	r3, r1
 80027b6:	491b      	ldr	r1, [pc, #108]	; (8002824 <HAL_RCC_OscConfig+0x4c4>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027bc:	4b1b      	ldr	r3, [pc, #108]	; (800282c <HAL_RCC_OscConfig+0x4cc>)
 80027be:	2201      	movs	r2, #1
 80027c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c2:	f7ff fa5b 	bl	8001c7c <HAL_GetTick>
 80027c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027c8:	e008      	b.n	80027dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ca:	f7ff fa57 	bl	8001c7c <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d901      	bls.n	80027dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e03d      	b.n	8002858 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027dc:	4b11      	ldr	r3, [pc, #68]	; (8002824 <HAL_RCC_OscConfig+0x4c4>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d0f0      	beq.n	80027ca <HAL_RCC_OscConfig+0x46a>
 80027e8:	e035      	b.n	8002856 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ea:	4b10      	ldr	r3, [pc, #64]	; (800282c <HAL_RCC_OscConfig+0x4cc>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f0:	f7ff fa44 	bl	8001c7c <HAL_GetTick>
 80027f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027f6:	e008      	b.n	800280a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027f8:	f7ff fa40 	bl	8001c7c <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b02      	cmp	r3, #2
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e026      	b.n	8002858 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800280a:	4b06      	ldr	r3, [pc, #24]	; (8002824 <HAL_RCC_OscConfig+0x4c4>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d1f0      	bne.n	80027f8 <HAL_RCC_OscConfig+0x498>
 8002816:	e01e      	b.n	8002856 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	69db      	ldr	r3, [r3, #28]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d107      	bne.n	8002830 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e019      	b.n	8002858 <HAL_RCC_OscConfig+0x4f8>
 8002824:	40021000 	.word	0x40021000
 8002828:	40007000 	.word	0x40007000
 800282c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002830:	4b0b      	ldr	r3, [pc, #44]	; (8002860 <HAL_RCC_OscConfig+0x500>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a1b      	ldr	r3, [r3, #32]
 8002840:	429a      	cmp	r2, r3
 8002842:	d106      	bne.n	8002852 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800284e:	429a      	cmp	r2, r3
 8002850:	d001      	beq.n	8002856 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e000      	b.n	8002858 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3718      	adds	r7, #24
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	40021000 	.word	0x40021000

08002864 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d101      	bne.n	8002878 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e0d0      	b.n	8002a1a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002878:	4b6a      	ldr	r3, [pc, #424]	; (8002a24 <HAL_RCC_ClockConfig+0x1c0>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0307 	and.w	r3, r3, #7
 8002880:	683a      	ldr	r2, [r7, #0]
 8002882:	429a      	cmp	r2, r3
 8002884:	d910      	bls.n	80028a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002886:	4b67      	ldr	r3, [pc, #412]	; (8002a24 <HAL_RCC_ClockConfig+0x1c0>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f023 0207 	bic.w	r2, r3, #7
 800288e:	4965      	ldr	r1, [pc, #404]	; (8002a24 <HAL_RCC_ClockConfig+0x1c0>)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	4313      	orrs	r3, r2
 8002894:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002896:	4b63      	ldr	r3, [pc, #396]	; (8002a24 <HAL_RCC_ClockConfig+0x1c0>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0307 	and.w	r3, r3, #7
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d001      	beq.n	80028a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e0b8      	b.n	8002a1a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0302 	and.w	r3, r3, #2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d020      	beq.n	80028f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0304 	and.w	r3, r3, #4
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d005      	beq.n	80028cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028c0:	4b59      	ldr	r3, [pc, #356]	; (8002a28 <HAL_RCC_ClockConfig+0x1c4>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	4a58      	ldr	r2, [pc, #352]	; (8002a28 <HAL_RCC_ClockConfig+0x1c4>)
 80028c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80028ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0308 	and.w	r3, r3, #8
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d005      	beq.n	80028e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028d8:	4b53      	ldr	r3, [pc, #332]	; (8002a28 <HAL_RCC_ClockConfig+0x1c4>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	4a52      	ldr	r2, [pc, #328]	; (8002a28 <HAL_RCC_ClockConfig+0x1c4>)
 80028de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80028e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028e4:	4b50      	ldr	r3, [pc, #320]	; (8002a28 <HAL_RCC_ClockConfig+0x1c4>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	494d      	ldr	r1, [pc, #308]	; (8002a28 <HAL_RCC_ClockConfig+0x1c4>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d040      	beq.n	8002984 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d107      	bne.n	800291a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800290a:	4b47      	ldr	r3, [pc, #284]	; (8002a28 <HAL_RCC_ClockConfig+0x1c4>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d115      	bne.n	8002942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e07f      	b.n	8002a1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	2b02      	cmp	r3, #2
 8002920:	d107      	bne.n	8002932 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002922:	4b41      	ldr	r3, [pc, #260]	; (8002a28 <HAL_RCC_ClockConfig+0x1c4>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d109      	bne.n	8002942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e073      	b.n	8002a1a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002932:	4b3d      	ldr	r3, [pc, #244]	; (8002a28 <HAL_RCC_ClockConfig+0x1c4>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e06b      	b.n	8002a1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002942:	4b39      	ldr	r3, [pc, #228]	; (8002a28 <HAL_RCC_ClockConfig+0x1c4>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f023 0203 	bic.w	r2, r3, #3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	4936      	ldr	r1, [pc, #216]	; (8002a28 <HAL_RCC_ClockConfig+0x1c4>)
 8002950:	4313      	orrs	r3, r2
 8002952:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002954:	f7ff f992 	bl	8001c7c <HAL_GetTick>
 8002958:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800295a:	e00a      	b.n	8002972 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800295c:	f7ff f98e 	bl	8001c7c <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	f241 3288 	movw	r2, #5000	; 0x1388
 800296a:	4293      	cmp	r3, r2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e053      	b.n	8002a1a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002972:	4b2d      	ldr	r3, [pc, #180]	; (8002a28 <HAL_RCC_ClockConfig+0x1c4>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f003 020c 	and.w	r2, r3, #12
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	429a      	cmp	r2, r3
 8002982:	d1eb      	bne.n	800295c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002984:	4b27      	ldr	r3, [pc, #156]	; (8002a24 <HAL_RCC_ClockConfig+0x1c0>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0307 	and.w	r3, r3, #7
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	429a      	cmp	r2, r3
 8002990:	d210      	bcs.n	80029b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002992:	4b24      	ldr	r3, [pc, #144]	; (8002a24 <HAL_RCC_ClockConfig+0x1c0>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f023 0207 	bic.w	r2, r3, #7
 800299a:	4922      	ldr	r1, [pc, #136]	; (8002a24 <HAL_RCC_ClockConfig+0x1c0>)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	4313      	orrs	r3, r2
 80029a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029a2:	4b20      	ldr	r3, [pc, #128]	; (8002a24 <HAL_RCC_ClockConfig+0x1c0>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0307 	and.w	r3, r3, #7
 80029aa:	683a      	ldr	r2, [r7, #0]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d001      	beq.n	80029b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e032      	b.n	8002a1a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0304 	and.w	r3, r3, #4
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d008      	beq.n	80029d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029c0:	4b19      	ldr	r3, [pc, #100]	; (8002a28 <HAL_RCC_ClockConfig+0x1c4>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	4916      	ldr	r1, [pc, #88]	; (8002a28 <HAL_RCC_ClockConfig+0x1c4>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0308 	and.w	r3, r3, #8
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d009      	beq.n	80029f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029de:	4b12      	ldr	r3, [pc, #72]	; (8002a28 <HAL_RCC_ClockConfig+0x1c4>)
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	490e      	ldr	r1, [pc, #56]	; (8002a28 <HAL_RCC_ClockConfig+0x1c4>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029f2:	f000 f821 	bl	8002a38 <HAL_RCC_GetSysClockFreq>
 80029f6:	4602      	mov	r2, r0
 80029f8:	4b0b      	ldr	r3, [pc, #44]	; (8002a28 <HAL_RCC_ClockConfig+0x1c4>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	091b      	lsrs	r3, r3, #4
 80029fe:	f003 030f 	and.w	r3, r3, #15
 8002a02:	490a      	ldr	r1, [pc, #40]	; (8002a2c <HAL_RCC_ClockConfig+0x1c8>)
 8002a04:	5ccb      	ldrb	r3, [r1, r3]
 8002a06:	fa22 f303 	lsr.w	r3, r2, r3
 8002a0a:	4a09      	ldr	r2, [pc, #36]	; (8002a30 <HAL_RCC_ClockConfig+0x1cc>)
 8002a0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a0e:	4b09      	ldr	r3, [pc, #36]	; (8002a34 <HAL_RCC_ClockConfig+0x1d0>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7fe ff5e 	bl	80018d4 <HAL_InitTick>

  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	40022000 	.word	0x40022000
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	0800d960 	.word	0x0800d960
 8002a30:	20000000 	.word	0x20000000
 8002a34:	20000004 	.word	0x20000004

08002a38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a38:	b490      	push	{r4, r7}
 8002a3a:	b08a      	sub	sp, #40	; 0x28
 8002a3c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002a3e:	4b29      	ldr	r3, [pc, #164]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0xac>)
 8002a40:	1d3c      	adds	r4, r7, #4
 8002a42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002a48:	f240 2301 	movw	r3, #513	; 0x201
 8002a4c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	61fb      	str	r3, [r7, #28]
 8002a52:	2300      	movs	r3, #0
 8002a54:	61bb      	str	r3, [r7, #24]
 8002a56:	2300      	movs	r3, #0
 8002a58:	627b      	str	r3, [r7, #36]	; 0x24
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a62:	4b21      	ldr	r3, [pc, #132]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	f003 030c 	and.w	r3, r3, #12
 8002a6e:	2b04      	cmp	r3, #4
 8002a70:	d002      	beq.n	8002a78 <HAL_RCC_GetSysClockFreq+0x40>
 8002a72:	2b08      	cmp	r3, #8
 8002a74:	d003      	beq.n	8002a7e <HAL_RCC_GetSysClockFreq+0x46>
 8002a76:	e02b      	b.n	8002ad0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a78:	4b1c      	ldr	r3, [pc, #112]	; (8002aec <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a7a:	623b      	str	r3, [r7, #32]
      break;
 8002a7c:	e02b      	b.n	8002ad6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	0c9b      	lsrs	r3, r3, #18
 8002a82:	f003 030f 	and.w	r3, r3, #15
 8002a86:	3328      	adds	r3, #40	; 0x28
 8002a88:	443b      	add	r3, r7
 8002a8a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002a8e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d012      	beq.n	8002ac0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a9a:	4b13      	ldr	r3, [pc, #76]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	0c5b      	lsrs	r3, r3, #17
 8002aa0:	f003 0301 	and.w	r3, r3, #1
 8002aa4:	3328      	adds	r3, #40	; 0x28
 8002aa6:	443b      	add	r3, r7
 8002aa8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002aac:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	4a0e      	ldr	r2, [pc, #56]	; (8002aec <HAL_RCC_GetSysClockFreq+0xb4>)
 8002ab2:	fb03 f202 	mul.w	r2, r3, r2
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002abc:	627b      	str	r3, [r7, #36]	; 0x24
 8002abe:	e004      	b.n	8002aca <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	4a0b      	ldr	r2, [pc, #44]	; (8002af0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ac4:	fb02 f303 	mul.w	r3, r2, r3
 8002ac8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002acc:	623b      	str	r3, [r7, #32]
      break;
 8002ace:	e002      	b.n	8002ad6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ad0:	4b06      	ldr	r3, [pc, #24]	; (8002aec <HAL_RCC_GetSysClockFreq+0xb4>)
 8002ad2:	623b      	str	r3, [r7, #32]
      break;
 8002ad4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ad6:	6a3b      	ldr	r3, [r7, #32]
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3728      	adds	r7, #40	; 0x28
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bc90      	pop	{r4, r7}
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	0800d8dc 	.word	0x0800d8dc
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	007a1200 	.word	0x007a1200
 8002af0:	003d0900 	.word	0x003d0900

08002af4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002af8:	4b02      	ldr	r3, [pc, #8]	; (8002b04 <HAL_RCC_GetHCLKFreq+0x10>)
 8002afa:	681b      	ldr	r3, [r3, #0]
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bc80      	pop	{r7}
 8002b02:	4770      	bx	lr
 8002b04:	20000000 	.word	0x20000000

08002b08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b0c:	f7ff fff2 	bl	8002af4 <HAL_RCC_GetHCLKFreq>
 8002b10:	4602      	mov	r2, r0
 8002b12:	4b05      	ldr	r3, [pc, #20]	; (8002b28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	0a1b      	lsrs	r3, r3, #8
 8002b18:	f003 0307 	and.w	r3, r3, #7
 8002b1c:	4903      	ldr	r1, [pc, #12]	; (8002b2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b1e:	5ccb      	ldrb	r3, [r1, r3]
 8002b20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	0800d970 	.word	0x0800d970

08002b30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b34:	f7ff ffde 	bl	8002af4 <HAL_RCC_GetHCLKFreq>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	4b05      	ldr	r3, [pc, #20]	; (8002b50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	0adb      	lsrs	r3, r3, #11
 8002b40:	f003 0307 	and.w	r3, r3, #7
 8002b44:	4903      	ldr	r1, [pc, #12]	; (8002b54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b46:	5ccb      	ldrb	r3, [r1, r3]
 8002b48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	40021000 	.word	0x40021000
 8002b54:	0800d970 	.word	0x0800d970

08002b58 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	220f      	movs	r2, #15
 8002b66:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002b68:	4b11      	ldr	r3, [pc, #68]	; (8002bb0 <HAL_RCC_GetClockConfig+0x58>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f003 0203 	and.w	r2, r3, #3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002b74:	4b0e      	ldr	r3, [pc, #56]	; (8002bb0 <HAL_RCC_GetClockConfig+0x58>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002b80:	4b0b      	ldr	r3, [pc, #44]	; (8002bb0 <HAL_RCC_GetClockConfig+0x58>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002b8c:	4b08      	ldr	r3, [pc, #32]	; (8002bb0 <HAL_RCC_GetClockConfig+0x58>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	08db      	lsrs	r3, r3, #3
 8002b92:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002b9a:	4b06      	ldr	r3, [pc, #24]	; (8002bb4 <HAL_RCC_GetClockConfig+0x5c>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0207 	and.w	r2, r3, #7
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002ba6:	bf00      	nop
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bc80      	pop	{r7}
 8002bae:	4770      	bx	lr
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	40022000 	.word	0x40022000

08002bb8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002bc0:	4b0a      	ldr	r3, [pc, #40]	; (8002bec <RCC_Delay+0x34>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a0a      	ldr	r2, [pc, #40]	; (8002bf0 <RCC_Delay+0x38>)
 8002bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bca:	0a5b      	lsrs	r3, r3, #9
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	fb02 f303 	mul.w	r3, r2, r3
 8002bd2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002bd4:	bf00      	nop
  }
  while (Delay --);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	1e5a      	subs	r2, r3, #1
 8002bda:	60fa      	str	r2, [r7, #12]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d1f9      	bne.n	8002bd4 <RCC_Delay+0x1c>
}
 8002be0:	bf00      	nop
 8002be2:	bf00      	nop
 8002be4:	3714      	adds	r7, #20
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bc80      	pop	{r7}
 8002bea:	4770      	bx	lr
 8002bec:	20000000 	.word	0x20000000
 8002bf0:	10624dd3 	.word	0x10624dd3

08002bf4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e076      	b.n	8002cf4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d108      	bne.n	8002c20 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c16:	d009      	beq.n	8002c2c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	61da      	str	r2, [r3, #28]
 8002c1e:	e005      	b.n	8002c2c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d106      	bne.n	8002c4c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f7fe fd84 	bl	8001754 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2202      	movs	r2, #2
 8002c50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c62:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002c74:	431a      	orrs	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	691b      	ldr	r3, [r3, #16]
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	431a      	orrs	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	695b      	ldr	r3, [r3, #20]
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	431a      	orrs	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c9c:	431a      	orrs	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	69db      	ldr	r3, [r3, #28]
 8002ca2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ca6:	431a      	orrs	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a1b      	ldr	r3, [r3, #32]
 8002cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cb0:	ea42 0103 	orr.w	r1, r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	0c1a      	lsrs	r2, r3, #16
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f002 0204 	and.w	r2, r2, #4
 8002cd2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	69da      	ldr	r2, [r3, #28]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ce2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2201      	movs	r2, #1
 8002cee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3708      	adds	r7, #8
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b088      	sub	sp, #32
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	603b      	str	r3, [r7, #0]
 8002d08:	4613      	mov	r3, r2
 8002d0a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d101      	bne.n	8002d1e <HAL_SPI_Transmit+0x22>
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	e126      	b.n	8002f6c <HAL_SPI_Transmit+0x270>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d26:	f7fe ffa9 	bl	8001c7c <HAL_GetTick>
 8002d2a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002d2c:	88fb      	ldrh	r3, [r7, #6]
 8002d2e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d002      	beq.n	8002d42 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d40:	e10b      	b.n	8002f5a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d002      	beq.n	8002d4e <HAL_SPI_Transmit+0x52>
 8002d48:	88fb      	ldrh	r3, [r7, #6]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d102      	bne.n	8002d54 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d52:	e102      	b.n	8002f5a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2203      	movs	r2, #3
 8002d58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	68ba      	ldr	r2, [r7, #8]
 8002d66:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	88fa      	ldrh	r2, [r7, #6]
 8002d6c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	88fa      	ldrh	r2, [r7, #6]
 8002d72:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2200      	movs	r2, #0
 8002d78:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d9a:	d10f      	bne.n	8002dbc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002daa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002dba:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc6:	2b40      	cmp	r3, #64	; 0x40
 8002dc8:	d007      	beq.n	8002dda <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dd8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002de2:	d14b      	bne.n	8002e7c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d002      	beq.n	8002df2 <HAL_SPI_Transmit+0xf6>
 8002dec:	8afb      	ldrh	r3, [r7, #22]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d13e      	bne.n	8002e70 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df6:	881a      	ldrh	r2, [r3, #0]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e02:	1c9a      	adds	r2, r3, #2
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002e16:	e02b      	b.n	8002e70 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d112      	bne.n	8002e4c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2a:	881a      	ldrh	r2, [r3, #0]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e36:	1c9a      	adds	r2, r3, #2
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	3b01      	subs	r3, #1
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	86da      	strh	r2, [r3, #54]	; 0x36
 8002e4a:	e011      	b.n	8002e70 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e4c:	f7fe ff16 	bl	8001c7c <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	683a      	ldr	r2, [r7, #0]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d803      	bhi.n	8002e64 <HAL_SPI_Transmit+0x168>
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e62:	d102      	bne.n	8002e6a <HAL_SPI_Transmit+0x16e>
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d102      	bne.n	8002e70 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002e6e:	e074      	b.n	8002f5a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1ce      	bne.n	8002e18 <HAL_SPI_Transmit+0x11c>
 8002e7a:	e04c      	b.n	8002f16 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d002      	beq.n	8002e8a <HAL_SPI_Transmit+0x18e>
 8002e84:	8afb      	ldrh	r3, [r7, #22]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d140      	bne.n	8002f0c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	330c      	adds	r3, #12
 8002e94:	7812      	ldrb	r2, [r2, #0]
 8002e96:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9c:	1c5a      	adds	r2, r3, #1
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002eb0:	e02c      	b.n	8002f0c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f003 0302 	and.w	r3, r3, #2
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d113      	bne.n	8002ee8 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	330c      	adds	r3, #12
 8002eca:	7812      	ldrb	r2, [r2, #0]
 8002ecc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed2:	1c5a      	adds	r2, r3, #1
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	b29a      	uxth	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	86da      	strh	r2, [r3, #54]	; 0x36
 8002ee6:	e011      	b.n	8002f0c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ee8:	f7fe fec8 	bl	8001c7c <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	683a      	ldr	r2, [r7, #0]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d803      	bhi.n	8002f00 <HAL_SPI_Transmit+0x204>
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002efe:	d102      	bne.n	8002f06 <HAL_SPI_Transmit+0x20a>
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d102      	bne.n	8002f0c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002f0a:	e026      	b.n	8002f5a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1cd      	bne.n	8002eb2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f16:	69ba      	ldr	r2, [r7, #24]
 8002f18:	6839      	ldr	r1, [r7, #0]
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f000 fbc4 	bl	80036a8 <SPI_EndRxTxTransaction>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d002      	beq.n	8002f2c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2220      	movs	r2, #32
 8002f2a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d10a      	bne.n	8002f4a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f34:	2300      	movs	r3, #0
 8002f36:	613b      	str	r3, [r7, #16]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	613b      	str	r3, [r7, #16]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	613b      	str	r3, [r7, #16]
 8002f48:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d002      	beq.n	8002f58 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	77fb      	strb	r3, [r7, #31]
 8002f56:	e000      	b.n	8002f5a <HAL_SPI_Transmit+0x25e>
  }

error:
 8002f58:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002f6a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3720      	adds	r7, #32
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b088      	sub	sp, #32
 8002f78:	af02      	add	r7, sp, #8
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	603b      	str	r3, [r7, #0]
 8002f80:	4613      	mov	r3, r2
 8002f82:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002f84:	2300      	movs	r3, #0
 8002f86:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f90:	d112      	bne.n	8002fb8 <HAL_SPI_Receive+0x44>
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10e      	bne.n	8002fb8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2204      	movs	r2, #4
 8002f9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002fa2:	88fa      	ldrh	r2, [r7, #6]
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	9300      	str	r3, [sp, #0]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	68ba      	ldr	r2, [r7, #8]
 8002fac:	68b9      	ldr	r1, [r7, #8]
 8002fae:	68f8      	ldr	r0, [r7, #12]
 8002fb0:	f000 f8f1 	bl	8003196 <HAL_SPI_TransmitReceive>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	e0ea      	b.n	800318e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d101      	bne.n	8002fc6 <HAL_SPI_Receive+0x52>
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	e0e3      	b.n	800318e <HAL_SPI_Receive+0x21a>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fce:	f7fe fe55 	bl	8001c7c <HAL_GetTick>
 8002fd2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d002      	beq.n	8002fe6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002fe4:	e0ca      	b.n	800317c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d002      	beq.n	8002ff2 <HAL_SPI_Receive+0x7e>
 8002fec:	88fb      	ldrh	r3, [r7, #6]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d102      	bne.n	8002ff8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002ff6:	e0c1      	b.n	800317c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2204      	movs	r2, #4
 8002ffc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	68ba      	ldr	r2, [r7, #8]
 800300a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	88fa      	ldrh	r2, [r7, #6]
 8003010:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	88fa      	ldrh	r2, [r7, #6]
 8003016:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2200      	movs	r2, #0
 8003028:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2200      	movs	r2, #0
 8003034:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800303e:	d10f      	bne.n	8003060 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800304e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800305e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800306a:	2b40      	cmp	r3, #64	; 0x40
 800306c:	d007      	beq.n	800307e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800307c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d162      	bne.n	800314c <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003086:	e02e      	b.n	80030e6 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b01      	cmp	r3, #1
 8003094:	d115      	bne.n	80030c2 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f103 020c 	add.w	r2, r3, #12
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a2:	7812      	ldrb	r2, [r2, #0]
 80030a4:	b2d2      	uxtb	r2, r2
 80030a6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ac:	1c5a      	adds	r2, r3, #1
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	3b01      	subs	r3, #1
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	87da      	strh	r2, [r3, #62]	; 0x3e
 80030c0:	e011      	b.n	80030e6 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030c2:	f7fe fddb 	bl	8001c7c <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	683a      	ldr	r2, [r7, #0]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d803      	bhi.n	80030da <HAL_SPI_Receive+0x166>
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d8:	d102      	bne.n	80030e0 <HAL_SPI_Receive+0x16c>
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d102      	bne.n	80030e6 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80030e4:	e04a      	b.n	800317c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d1cb      	bne.n	8003088 <HAL_SPI_Receive+0x114>
 80030f0:	e031      	b.n	8003156 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f003 0301 	and.w	r3, r3, #1
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d113      	bne.n	8003128 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68da      	ldr	r2, [r3, #12]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800310a:	b292      	uxth	r2, r2
 800310c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003112:	1c9a      	adds	r2, r3, #2
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800311c:	b29b      	uxth	r3, r3
 800311e:	3b01      	subs	r3, #1
 8003120:	b29a      	uxth	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003126:	e011      	b.n	800314c <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003128:	f7fe fda8 	bl	8001c7c <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	683a      	ldr	r2, [r7, #0]
 8003134:	429a      	cmp	r2, r3
 8003136:	d803      	bhi.n	8003140 <HAL_SPI_Receive+0x1cc>
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800313e:	d102      	bne.n	8003146 <HAL_SPI_Receive+0x1d2>
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d102      	bne.n	800314c <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	75fb      	strb	r3, [r7, #23]
          goto error;
 800314a:	e017      	b.n	800317c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003150:	b29b      	uxth	r3, r3
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1cd      	bne.n	80030f2 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003156:	693a      	ldr	r2, [r7, #16]
 8003158:	6839      	ldr	r1, [r7, #0]
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f000 fa52 	bl	8003604 <SPI_EndRxTransaction>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d002      	beq.n	800316c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2220      	movs	r2, #32
 800316a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003170:	2b00      	cmp	r3, #0
 8003172:	d002      	beq.n	800317a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	75fb      	strb	r3, [r7, #23]
 8003178:	e000      	b.n	800317c <HAL_SPI_Receive+0x208>
  }

error :
 800317a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800318c:	7dfb      	ldrb	r3, [r7, #23]
}
 800318e:	4618      	mov	r0, r3
 8003190:	3718      	adds	r7, #24
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b08c      	sub	sp, #48	; 0x30
 800319a:	af00      	add	r7, sp, #0
 800319c:	60f8      	str	r0, [r7, #12]
 800319e:	60b9      	str	r1, [r7, #8]
 80031a0:	607a      	str	r2, [r7, #4]
 80031a2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80031a4:	2301      	movs	r3, #1
 80031a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80031a8:	2300      	movs	r3, #0
 80031aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d101      	bne.n	80031bc <HAL_SPI_TransmitReceive+0x26>
 80031b8:	2302      	movs	r3, #2
 80031ba:	e18a      	b.n	80034d2 <HAL_SPI_TransmitReceive+0x33c>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031c4:	f7fe fd5a 	bl	8001c7c <HAL_GetTick>
 80031c8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80031da:	887b      	ldrh	r3, [r7, #2]
 80031dc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80031de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d00f      	beq.n	8003206 <HAL_SPI_TransmitReceive+0x70>
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031ec:	d107      	bne.n	80031fe <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d103      	bne.n	80031fe <HAL_SPI_TransmitReceive+0x68>
 80031f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031fa:	2b04      	cmp	r3, #4
 80031fc:	d003      	beq.n	8003206 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80031fe:	2302      	movs	r3, #2
 8003200:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003204:	e15b      	b.n	80034be <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d005      	beq.n	8003218 <HAL_SPI_TransmitReceive+0x82>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d002      	beq.n	8003218 <HAL_SPI_TransmitReceive+0x82>
 8003212:	887b      	ldrh	r3, [r7, #2]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d103      	bne.n	8003220 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800321e:	e14e      	b.n	80034be <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003226:	b2db      	uxtb	r3, r3
 8003228:	2b04      	cmp	r3, #4
 800322a:	d003      	beq.n	8003234 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2205      	movs	r2, #5
 8003230:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	887a      	ldrh	r2, [r7, #2]
 8003244:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	887a      	ldrh	r2, [r7, #2]
 800324a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	68ba      	ldr	r2, [r7, #8]
 8003250:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	887a      	ldrh	r2, [r7, #2]
 8003256:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	887a      	ldrh	r2, [r7, #2]
 800325c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2200      	movs	r2, #0
 8003268:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003274:	2b40      	cmp	r3, #64	; 0x40
 8003276:	d007      	beq.n	8003288 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003286:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003290:	d178      	bne.n	8003384 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d002      	beq.n	80032a0 <HAL_SPI_TransmitReceive+0x10a>
 800329a:	8b7b      	ldrh	r3, [r7, #26]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d166      	bne.n	800336e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a4:	881a      	ldrh	r2, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b0:	1c9a      	adds	r2, r3, #2
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	3b01      	subs	r3, #1
 80032be:	b29a      	uxth	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032c4:	e053      	b.n	800336e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f003 0302 	and.w	r3, r3, #2
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d11b      	bne.n	800330c <HAL_SPI_TransmitReceive+0x176>
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032d8:	b29b      	uxth	r3, r3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d016      	beq.n	800330c <HAL_SPI_TransmitReceive+0x176>
 80032de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d113      	bne.n	800330c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e8:	881a      	ldrh	r2, [r3, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f4:	1c9a      	adds	r2, r3, #2
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032fe:	b29b      	uxth	r3, r3
 8003300:	3b01      	subs	r3, #1
 8003302:	b29a      	uxth	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003308:	2300      	movs	r3, #0
 800330a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	2b01      	cmp	r3, #1
 8003318:	d119      	bne.n	800334e <HAL_SPI_TransmitReceive+0x1b8>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800331e:	b29b      	uxth	r3, r3
 8003320:	2b00      	cmp	r3, #0
 8003322:	d014      	beq.n	800334e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68da      	ldr	r2, [r3, #12]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800332e:	b292      	uxth	r2, r2
 8003330:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003336:	1c9a      	adds	r2, r3, #2
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003340:	b29b      	uxth	r3, r3
 8003342:	3b01      	subs	r3, #1
 8003344:	b29a      	uxth	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800334a:	2301      	movs	r3, #1
 800334c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800334e:	f7fe fc95 	bl	8001c7c <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800335a:	429a      	cmp	r2, r3
 800335c:	d807      	bhi.n	800336e <HAL_SPI_TransmitReceive+0x1d8>
 800335e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003364:	d003      	beq.n	800336e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800336c:	e0a7      	b.n	80034be <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003372:	b29b      	uxth	r3, r3
 8003374:	2b00      	cmp	r3, #0
 8003376:	d1a6      	bne.n	80032c6 <HAL_SPI_TransmitReceive+0x130>
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800337c:	b29b      	uxth	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1a1      	bne.n	80032c6 <HAL_SPI_TransmitReceive+0x130>
 8003382:	e07c      	b.n	800347e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d002      	beq.n	8003392 <HAL_SPI_TransmitReceive+0x1fc>
 800338c:	8b7b      	ldrh	r3, [r7, #26]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d16b      	bne.n	800346a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	330c      	adds	r3, #12
 800339c:	7812      	ldrb	r2, [r2, #0]
 800339e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a4:	1c5a      	adds	r2, r3, #1
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	3b01      	subs	r3, #1
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033b8:	e057      	b.n	800346a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f003 0302 	and.w	r3, r3, #2
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d11c      	bne.n	8003402 <HAL_SPI_TransmitReceive+0x26c>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d017      	beq.n	8003402 <HAL_SPI_TransmitReceive+0x26c>
 80033d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d114      	bne.n	8003402 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	330c      	adds	r3, #12
 80033e2:	7812      	ldrb	r2, [r2, #0]
 80033e4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ea:	1c5a      	adds	r2, r3, #1
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	3b01      	subs	r3, #1
 80033f8:	b29a      	uxth	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80033fe:	2300      	movs	r3, #0
 8003400:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	2b01      	cmp	r3, #1
 800340e:	d119      	bne.n	8003444 <HAL_SPI_TransmitReceive+0x2ae>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003414:	b29b      	uxth	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d014      	beq.n	8003444 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68da      	ldr	r2, [r3, #12]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003424:	b2d2      	uxtb	r2, r2
 8003426:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800342c:	1c5a      	adds	r2, r3, #1
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003436:	b29b      	uxth	r3, r3
 8003438:	3b01      	subs	r3, #1
 800343a:	b29a      	uxth	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003440:	2301      	movs	r3, #1
 8003442:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003444:	f7fe fc1a 	bl	8001c7c <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003450:	429a      	cmp	r2, r3
 8003452:	d803      	bhi.n	800345c <HAL_SPI_TransmitReceive+0x2c6>
 8003454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800345a:	d102      	bne.n	8003462 <HAL_SPI_TransmitReceive+0x2cc>
 800345c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800345e:	2b00      	cmp	r3, #0
 8003460:	d103      	bne.n	800346a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003468:	e029      	b.n	80034be <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800346e:	b29b      	uxth	r3, r3
 8003470:	2b00      	cmp	r3, #0
 8003472:	d1a2      	bne.n	80033ba <HAL_SPI_TransmitReceive+0x224>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003478:	b29b      	uxth	r3, r3
 800347a:	2b00      	cmp	r3, #0
 800347c:	d19d      	bne.n	80033ba <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800347e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003480:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003482:	68f8      	ldr	r0, [r7, #12]
 8003484:	f000 f910 	bl	80036a8 <SPI_EndRxTxTransaction>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d006      	beq.n	800349c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2220      	movs	r2, #32
 8003498:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800349a:	e010      	b.n	80034be <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d10b      	bne.n	80034bc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034a4:	2300      	movs	r3, #0
 80034a6:	617b      	str	r3, [r7, #20]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	617b      	str	r3, [r7, #20]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	617b      	str	r3, [r7, #20]
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	e000      	b.n	80034be <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80034bc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2201      	movs	r2, #1
 80034c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80034ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3730      	adds	r7, #48	; 0x30
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80034da:	b480      	push	{r7}
 80034dc:	b083      	sub	sp, #12
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034e8:	b2db      	uxtb	r3, r3
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	370c      	adds	r7, #12
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bc80      	pop	{r7}
 80034f2:	4770      	bx	lr

080034f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b088      	sub	sp, #32
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	603b      	str	r3, [r7, #0]
 8003500:	4613      	mov	r3, r2
 8003502:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003504:	f7fe fbba 	bl	8001c7c <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800350c:	1a9b      	subs	r3, r3, r2
 800350e:	683a      	ldr	r2, [r7, #0]
 8003510:	4413      	add	r3, r2
 8003512:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003514:	f7fe fbb2 	bl	8001c7c <HAL_GetTick>
 8003518:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800351a:	4b39      	ldr	r3, [pc, #228]	; (8003600 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	015b      	lsls	r3, r3, #5
 8003520:	0d1b      	lsrs	r3, r3, #20
 8003522:	69fa      	ldr	r2, [r7, #28]
 8003524:	fb02 f303 	mul.w	r3, r2, r3
 8003528:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800352a:	e054      	b.n	80035d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003532:	d050      	beq.n	80035d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003534:	f7fe fba2 	bl	8001c7c <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	69fa      	ldr	r2, [r7, #28]
 8003540:	429a      	cmp	r2, r3
 8003542:	d902      	bls.n	800354a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d13d      	bne.n	80035c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	685a      	ldr	r2, [r3, #4]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003558:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003562:	d111      	bne.n	8003588 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800356c:	d004      	beq.n	8003578 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003576:	d107      	bne.n	8003588 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003586:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003590:	d10f      	bne.n	80035b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035a0:	601a      	str	r2, [r3, #0]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e017      	b.n	80035f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d101      	bne.n	80035d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80035cc:	2300      	movs	r3, #0
 80035ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	3b01      	subs	r3, #1
 80035d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	689a      	ldr	r2, [r3, #8]
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	4013      	ands	r3, r2
 80035e0:	68ba      	ldr	r2, [r7, #8]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	bf0c      	ite	eq
 80035e6:	2301      	moveq	r3, #1
 80035e8:	2300      	movne	r3, #0
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	461a      	mov	r2, r3
 80035ee:	79fb      	ldrb	r3, [r7, #7]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d19b      	bne.n	800352c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3720      	adds	r7, #32
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	20000000 	.word	0x20000000

08003604 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af02      	add	r7, sp, #8
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003618:	d111      	bne.n	800363e <SPI_EndRxTransaction+0x3a>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003622:	d004      	beq.n	800362e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800362c:	d107      	bne.n	800363e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800363c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003646:	d117      	bne.n	8003678 <SPI_EndRxTransaction+0x74>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003650:	d112      	bne.n	8003678 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	9300      	str	r3, [sp, #0]
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	2200      	movs	r2, #0
 800365a:	2101      	movs	r1, #1
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f7ff ff49 	bl	80034f4 <SPI_WaitFlagStateUntilTimeout>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d01a      	beq.n	800369e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800366c:	f043 0220 	orr.w	r2, r3, #32
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e013      	b.n	80036a0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	9300      	str	r3, [sp, #0]
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	2200      	movs	r2, #0
 8003680:	2180      	movs	r1, #128	; 0x80
 8003682:	68f8      	ldr	r0, [r7, #12]
 8003684:	f7ff ff36 	bl	80034f4 <SPI_WaitFlagStateUntilTimeout>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d007      	beq.n	800369e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003692:	f043 0220 	orr.w	r2, r3, #32
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e000      	b.n	80036a0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800369e:	2300      	movs	r3, #0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3710      	adds	r7, #16
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af02      	add	r7, sp, #8
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	9300      	str	r3, [sp, #0]
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	2200      	movs	r2, #0
 80036bc:	2180      	movs	r1, #128	; 0x80
 80036be:	68f8      	ldr	r0, [r7, #12]
 80036c0:	f7ff ff18 	bl	80034f4 <SPI_WaitFlagStateUntilTimeout>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d007      	beq.n	80036da <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ce:	f043 0220 	orr.w	r2, r3, #32
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e000      	b.n	80036dc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3710      	adds	r7, #16
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e041      	b.n	800377a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d106      	bne.n	8003710 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f7fe f86c 	bl	80017e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2202      	movs	r2, #2
 8003714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	3304      	adds	r3, #4
 8003720:	4619      	mov	r1, r3
 8003722:	4610      	mov	r0, r2
 8003724:	f000 fa70 	bl	8003c08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3708      	adds	r7, #8
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
	...

08003784 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003784:	b480      	push	{r7}
 8003786:	b085      	sub	sp, #20
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003792:	b2db      	uxtb	r3, r3
 8003794:	2b01      	cmp	r3, #1
 8003796:	d001      	beq.n	800379c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e03a      	b.n	8003812 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2202      	movs	r2, #2
 80037a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68da      	ldr	r2, [r3, #12]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f042 0201 	orr.w	r2, r2, #1
 80037b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a18      	ldr	r2, [pc, #96]	; (800381c <HAL_TIM_Base_Start_IT+0x98>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d00e      	beq.n	80037dc <HAL_TIM_Base_Start_IT+0x58>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037c6:	d009      	beq.n	80037dc <HAL_TIM_Base_Start_IT+0x58>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a14      	ldr	r2, [pc, #80]	; (8003820 <HAL_TIM_Base_Start_IT+0x9c>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d004      	beq.n	80037dc <HAL_TIM_Base_Start_IT+0x58>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a13      	ldr	r2, [pc, #76]	; (8003824 <HAL_TIM_Base_Start_IT+0xa0>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d111      	bne.n	8003800 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f003 0307 	and.w	r3, r3, #7
 80037e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2b06      	cmp	r3, #6
 80037ec:	d010      	beq.n	8003810 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f042 0201 	orr.w	r2, r2, #1
 80037fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037fe:	e007      	b.n	8003810 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f042 0201 	orr.w	r2, r2, #1
 800380e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3714      	adds	r7, #20
 8003816:	46bd      	mov	sp, r7
 8003818:	bc80      	pop	{r7}
 800381a:	4770      	bx	lr
 800381c:	40012c00 	.word	0x40012c00
 8003820:	40000400 	.word	0x40000400
 8003824:	40000800 	.word	0x40000800

08003828 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	2b02      	cmp	r3, #2
 800383c:	d122      	bne.n	8003884 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	2b02      	cmp	r3, #2
 800384a:	d11b      	bne.n	8003884 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f06f 0202 	mvn.w	r2, #2
 8003854:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2201      	movs	r2, #1
 800385a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	f003 0303 	and.w	r3, r3, #3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d003      	beq.n	8003872 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 f9b1 	bl	8003bd2 <HAL_TIM_IC_CaptureCallback>
 8003870:	e005      	b.n	800387e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 f9a4 	bl	8003bc0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f000 f9b3 	bl	8003be4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	f003 0304 	and.w	r3, r3, #4
 800388e:	2b04      	cmp	r3, #4
 8003890:	d122      	bne.n	80038d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	f003 0304 	and.w	r3, r3, #4
 800389c:	2b04      	cmp	r3, #4
 800389e:	d11b      	bne.n	80038d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f06f 0204 	mvn.w	r2, #4
 80038a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2202      	movs	r2, #2
 80038ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d003      	beq.n	80038c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f987 	bl	8003bd2 <HAL_TIM_IC_CaptureCallback>
 80038c4:	e005      	b.n	80038d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 f97a 	bl	8003bc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f000 f989 	bl	8003be4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	f003 0308 	and.w	r3, r3, #8
 80038e2:	2b08      	cmp	r3, #8
 80038e4:	d122      	bne.n	800392c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	f003 0308 	and.w	r3, r3, #8
 80038f0:	2b08      	cmp	r3, #8
 80038f2:	d11b      	bne.n	800392c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f06f 0208 	mvn.w	r2, #8
 80038fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2204      	movs	r2, #4
 8003902:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	69db      	ldr	r3, [r3, #28]
 800390a:	f003 0303 	and.w	r3, r3, #3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d003      	beq.n	800391a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 f95d 	bl	8003bd2 <HAL_TIM_IC_CaptureCallback>
 8003918:	e005      	b.n	8003926 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 f950 	bl	8003bc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 f95f 	bl	8003be4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	f003 0310 	and.w	r3, r3, #16
 8003936:	2b10      	cmp	r3, #16
 8003938:	d122      	bne.n	8003980 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	f003 0310 	and.w	r3, r3, #16
 8003944:	2b10      	cmp	r3, #16
 8003946:	d11b      	bne.n	8003980 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f06f 0210 	mvn.w	r2, #16
 8003950:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2208      	movs	r2, #8
 8003956:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	69db      	ldr	r3, [r3, #28]
 800395e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003962:	2b00      	cmp	r3, #0
 8003964:	d003      	beq.n	800396e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 f933 	bl	8003bd2 <HAL_TIM_IC_CaptureCallback>
 800396c:	e005      	b.n	800397a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 f926 	bl	8003bc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f000 f935 	bl	8003be4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	f003 0301 	and.w	r3, r3, #1
 800398a:	2b01      	cmp	r3, #1
 800398c:	d10e      	bne.n	80039ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	f003 0301 	and.w	r3, r3, #1
 8003998:	2b01      	cmp	r3, #1
 800399a:	d107      	bne.n	80039ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f06f 0201 	mvn.w	r2, #1
 80039a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f7fd fe7e 	bl	80016a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039b6:	2b80      	cmp	r3, #128	; 0x80
 80039b8:	d10e      	bne.n	80039d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039c4:	2b80      	cmp	r3, #128	; 0x80
 80039c6:	d107      	bne.n	80039d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 fa77 	bl	8003ec6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e2:	2b40      	cmp	r3, #64	; 0x40
 80039e4:	d10e      	bne.n	8003a04 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f0:	2b40      	cmp	r3, #64	; 0x40
 80039f2:	d107      	bne.n	8003a04 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 f8f9 	bl	8003bf6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	f003 0320 	and.w	r3, r3, #32
 8003a0e:	2b20      	cmp	r3, #32
 8003a10:	d10e      	bne.n	8003a30 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	f003 0320 	and.w	r3, r3, #32
 8003a1c:	2b20      	cmp	r3, #32
 8003a1e:	d107      	bne.n	8003a30 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f06f 0220 	mvn.w	r2, #32
 8003a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 fa42 	bl	8003eb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a30:	bf00      	nop
 8003a32:	3708      	adds	r7, #8
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d101      	bne.n	8003a50 <HAL_TIM_ConfigClockSource+0x18>
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	e0b3      	b.n	8003bb8 <HAL_TIM_ConfigClockSource+0x180>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a6e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a76:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68fa      	ldr	r2, [r7, #12]
 8003a7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a88:	d03e      	beq.n	8003b08 <HAL_TIM_ConfigClockSource+0xd0>
 8003a8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a8e:	f200 8087 	bhi.w	8003ba0 <HAL_TIM_ConfigClockSource+0x168>
 8003a92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a96:	f000 8085 	beq.w	8003ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8003a9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a9e:	d87f      	bhi.n	8003ba0 <HAL_TIM_ConfigClockSource+0x168>
 8003aa0:	2b70      	cmp	r3, #112	; 0x70
 8003aa2:	d01a      	beq.n	8003ada <HAL_TIM_ConfigClockSource+0xa2>
 8003aa4:	2b70      	cmp	r3, #112	; 0x70
 8003aa6:	d87b      	bhi.n	8003ba0 <HAL_TIM_ConfigClockSource+0x168>
 8003aa8:	2b60      	cmp	r3, #96	; 0x60
 8003aaa:	d050      	beq.n	8003b4e <HAL_TIM_ConfigClockSource+0x116>
 8003aac:	2b60      	cmp	r3, #96	; 0x60
 8003aae:	d877      	bhi.n	8003ba0 <HAL_TIM_ConfigClockSource+0x168>
 8003ab0:	2b50      	cmp	r3, #80	; 0x50
 8003ab2:	d03c      	beq.n	8003b2e <HAL_TIM_ConfigClockSource+0xf6>
 8003ab4:	2b50      	cmp	r3, #80	; 0x50
 8003ab6:	d873      	bhi.n	8003ba0 <HAL_TIM_ConfigClockSource+0x168>
 8003ab8:	2b40      	cmp	r3, #64	; 0x40
 8003aba:	d058      	beq.n	8003b6e <HAL_TIM_ConfigClockSource+0x136>
 8003abc:	2b40      	cmp	r3, #64	; 0x40
 8003abe:	d86f      	bhi.n	8003ba0 <HAL_TIM_ConfigClockSource+0x168>
 8003ac0:	2b30      	cmp	r3, #48	; 0x30
 8003ac2:	d064      	beq.n	8003b8e <HAL_TIM_ConfigClockSource+0x156>
 8003ac4:	2b30      	cmp	r3, #48	; 0x30
 8003ac6:	d86b      	bhi.n	8003ba0 <HAL_TIM_ConfigClockSource+0x168>
 8003ac8:	2b20      	cmp	r3, #32
 8003aca:	d060      	beq.n	8003b8e <HAL_TIM_ConfigClockSource+0x156>
 8003acc:	2b20      	cmp	r3, #32
 8003ace:	d867      	bhi.n	8003ba0 <HAL_TIM_ConfigClockSource+0x168>
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d05c      	beq.n	8003b8e <HAL_TIM_ConfigClockSource+0x156>
 8003ad4:	2b10      	cmp	r3, #16
 8003ad6:	d05a      	beq.n	8003b8e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003ad8:	e062      	b.n	8003ba0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6818      	ldr	r0, [r3, #0]
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	6899      	ldr	r1, [r3, #8]
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	685a      	ldr	r2, [r3, #4]
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	f000 f966 	bl	8003dba <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003afc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	609a      	str	r2, [r3, #8]
      break;
 8003b06:	e04e      	b.n	8003ba6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6818      	ldr	r0, [r3, #0]
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	6899      	ldr	r1, [r3, #8]
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	685a      	ldr	r2, [r3, #4]
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	f000 f94f 	bl	8003dba <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	689a      	ldr	r2, [r3, #8]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b2a:	609a      	str	r2, [r3, #8]
      break;
 8003b2c:	e03b      	b.n	8003ba6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6818      	ldr	r0, [r3, #0]
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	6859      	ldr	r1, [r3, #4]
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	f000 f8c6 	bl	8003ccc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2150      	movs	r1, #80	; 0x50
 8003b46:	4618      	mov	r0, r3
 8003b48:	f000 f91d 	bl	8003d86 <TIM_ITRx_SetConfig>
      break;
 8003b4c:	e02b      	b.n	8003ba6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6818      	ldr	r0, [r3, #0]
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	6859      	ldr	r1, [r3, #4]
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	f000 f8e4 	bl	8003d28 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2160      	movs	r1, #96	; 0x60
 8003b66:	4618      	mov	r0, r3
 8003b68:	f000 f90d 	bl	8003d86 <TIM_ITRx_SetConfig>
      break;
 8003b6c:	e01b      	b.n	8003ba6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6818      	ldr	r0, [r3, #0]
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	6859      	ldr	r1, [r3, #4]
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	f000 f8a6 	bl	8003ccc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2140      	movs	r1, #64	; 0x40
 8003b86:	4618      	mov	r0, r3
 8003b88:	f000 f8fd 	bl	8003d86 <TIM_ITRx_SetConfig>
      break;
 8003b8c:	e00b      	b.n	8003ba6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4619      	mov	r1, r3
 8003b98:	4610      	mov	r0, r2
 8003b9a:	f000 f8f4 	bl	8003d86 <TIM_ITRx_SetConfig>
        break;
 8003b9e:	e002      	b.n	8003ba6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003ba0:	bf00      	nop
 8003ba2:	e000      	b.n	8003ba6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003ba4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3710      	adds	r7, #16
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003bc8:	bf00      	nop
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bc80      	pop	{r7}
 8003bd0:	4770      	bx	lr

08003bd2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	b083      	sub	sp, #12
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003bda:	bf00      	nop
 8003bdc:	370c      	adds	r7, #12
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bc80      	pop	{r7}
 8003be2:	4770      	bx	lr

08003be4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bc80      	pop	{r7}
 8003bf4:	4770      	bx	lr

08003bf6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003bf6:	b480      	push	{r7}
 8003bf8:	b083      	sub	sp, #12
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003bfe:	bf00      	nop
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bc80      	pop	{r7}
 8003c06:	4770      	bx	lr

08003c08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a29      	ldr	r2, [pc, #164]	; (8003cc0 <TIM_Base_SetConfig+0xb8>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d00b      	beq.n	8003c38 <TIM_Base_SetConfig+0x30>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c26:	d007      	beq.n	8003c38 <TIM_Base_SetConfig+0x30>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a26      	ldr	r2, [pc, #152]	; (8003cc4 <TIM_Base_SetConfig+0xbc>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d003      	beq.n	8003c38 <TIM_Base_SetConfig+0x30>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a25      	ldr	r2, [pc, #148]	; (8003cc8 <TIM_Base_SetConfig+0xc0>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d108      	bne.n	8003c4a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a1c      	ldr	r2, [pc, #112]	; (8003cc0 <TIM_Base_SetConfig+0xb8>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d00b      	beq.n	8003c6a <TIM_Base_SetConfig+0x62>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c58:	d007      	beq.n	8003c6a <TIM_Base_SetConfig+0x62>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a19      	ldr	r2, [pc, #100]	; (8003cc4 <TIM_Base_SetConfig+0xbc>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d003      	beq.n	8003c6a <TIM_Base_SetConfig+0x62>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a18      	ldr	r2, [pc, #96]	; (8003cc8 <TIM_Base_SetConfig+0xc0>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d108      	bne.n	8003c7c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	689a      	ldr	r2, [r3, #8]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a07      	ldr	r2, [pc, #28]	; (8003cc0 <TIM_Base_SetConfig+0xb8>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d103      	bne.n	8003cb0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	691a      	ldr	r2, [r3, #16]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	615a      	str	r2, [r3, #20]
}
 8003cb6:	bf00      	nop
 8003cb8:	3714      	adds	r7, #20
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bc80      	pop	{r7}
 8003cbe:	4770      	bx	lr
 8003cc0:	40012c00 	.word	0x40012c00
 8003cc4:	40000400 	.word	0x40000400
 8003cc8:	40000800 	.word	0x40000800

08003ccc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b087      	sub	sp, #28
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6a1b      	ldr	r3, [r3, #32]
 8003cdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6a1b      	ldr	r3, [r3, #32]
 8003ce2:	f023 0201 	bic.w	r2, r3, #1
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	011b      	lsls	r3, r3, #4
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	f023 030a 	bic.w	r3, r3, #10
 8003d08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d0a:	697a      	ldr	r2, [r7, #20]
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	693a      	ldr	r2, [r7, #16]
 8003d16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	697a      	ldr	r2, [r7, #20]
 8003d1c:	621a      	str	r2, [r3, #32]
}
 8003d1e:	bf00      	nop
 8003d20:	371c      	adds	r7, #28
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bc80      	pop	{r7}
 8003d26:	4770      	bx	lr

08003d28 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b087      	sub	sp, #28
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6a1b      	ldr	r3, [r3, #32]
 8003d38:	f023 0210 	bic.w	r2, r3, #16
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	699b      	ldr	r3, [r3, #24]
 8003d44:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d52:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	031b      	lsls	r3, r3, #12
 8003d58:	697a      	ldr	r2, [r7, #20]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d64:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	011b      	lsls	r3, r3, #4
 8003d6a:	693a      	ldr	r2, [r7, #16]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	697a      	ldr	r2, [r7, #20]
 8003d74:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	621a      	str	r2, [r3, #32]
}
 8003d7c:	bf00      	nop
 8003d7e:	371c      	adds	r7, #28
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bc80      	pop	{r7}
 8003d84:	4770      	bx	lr

08003d86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d86:	b480      	push	{r7}
 8003d88:	b085      	sub	sp, #20
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
 8003d8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d9e:	683a      	ldr	r2, [r7, #0]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	f043 0307 	orr.w	r3, r3, #7
 8003da8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	609a      	str	r2, [r3, #8]
}
 8003db0:	bf00      	nop
 8003db2:	3714      	adds	r7, #20
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bc80      	pop	{r7}
 8003db8:	4770      	bx	lr

08003dba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003dba:	b480      	push	{r7}
 8003dbc:	b087      	sub	sp, #28
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	60f8      	str	r0, [r7, #12]
 8003dc2:	60b9      	str	r1, [r7, #8]
 8003dc4:	607a      	str	r2, [r7, #4]
 8003dc6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003dd4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	021a      	lsls	r2, r3, #8
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	431a      	orrs	r2, r3
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	697a      	ldr	r2, [r7, #20]
 8003dec:	609a      	str	r2, [r3, #8]
}
 8003dee:	bf00      	nop
 8003df0:	371c      	adds	r7, #28
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bc80      	pop	{r7}
 8003df6:	4770      	bx	lr

08003df8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b085      	sub	sp, #20
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d101      	bne.n	8003e10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e0c:	2302      	movs	r3, #2
 8003e0e:	e046      	b.n	8003e9e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2202      	movs	r2, #2
 8003e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a16      	ldr	r2, [pc, #88]	; (8003ea8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d00e      	beq.n	8003e72 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e5c:	d009      	beq.n	8003e72 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a12      	ldr	r2, [pc, #72]	; (8003eac <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d004      	beq.n	8003e72 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a10      	ldr	r2, [pc, #64]	; (8003eb0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d10c      	bne.n	8003e8c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	68ba      	ldr	r2, [r7, #8]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68ba      	ldr	r2, [r7, #8]
 8003e8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3714      	adds	r7, #20
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bc80      	pop	{r7}
 8003ea6:	4770      	bx	lr
 8003ea8:	40012c00 	.word	0x40012c00
 8003eac:	40000400 	.word	0x40000400
 8003eb0:	40000800 	.word	0x40000800

08003eb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ebc:	bf00      	nop
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bc80      	pop	{r7}
 8003ec4:	4770      	bx	lr

08003ec6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b083      	sub	sp, #12
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ece:	bf00      	nop
 8003ed0:	370c      	adds	r7, #12
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bc80      	pop	{r7}
 8003ed6:	4770      	bx	lr

08003ed8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d101      	bne.n	8003eea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e03f      	b.n	8003f6a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d106      	bne.n	8003f04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f7fd fc96 	bl	8001830 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2224      	movs	r2, #36	; 0x24
 8003f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68da      	ldr	r2, [r3, #12]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f000 fc85 	bl	800482c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	691a      	ldr	r2, [r3, #16]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	695a      	ldr	r2, [r3, #20]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68da      	ldr	r2, [r3, #12]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2220      	movs	r2, #32
 8003f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2220      	movs	r2, #32
 8003f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3708      	adds	r7, #8
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f72:	b580      	push	{r7, lr}
 8003f74:	b08a      	sub	sp, #40	; 0x28
 8003f76:	af02      	add	r7, sp, #8
 8003f78:	60f8      	str	r0, [r7, #12]
 8003f7a:	60b9      	str	r1, [r7, #8]
 8003f7c:	603b      	str	r3, [r7, #0]
 8003f7e:	4613      	mov	r3, r2
 8003f80:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f82:	2300      	movs	r3, #0
 8003f84:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	2b20      	cmp	r3, #32
 8003f90:	d17c      	bne.n	800408c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d002      	beq.n	8003f9e <HAL_UART_Transmit+0x2c>
 8003f98:	88fb      	ldrh	r3, [r7, #6]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d101      	bne.n	8003fa2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e075      	b.n	800408e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d101      	bne.n	8003fb0 <HAL_UART_Transmit+0x3e>
 8003fac:	2302      	movs	r3, #2
 8003fae:	e06e      	b.n	800408e <HAL_UART_Transmit+0x11c>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2221      	movs	r2, #33	; 0x21
 8003fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fc6:	f7fd fe59 	bl	8001c7c <HAL_GetTick>
 8003fca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	88fa      	ldrh	r2, [r7, #6]
 8003fd0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	88fa      	ldrh	r2, [r7, #6]
 8003fd6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fe0:	d108      	bne.n	8003ff4 <HAL_UART_Transmit+0x82>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d104      	bne.n	8003ff4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003fea:	2300      	movs	r3, #0
 8003fec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	61bb      	str	r3, [r7, #24]
 8003ff2:	e003      	b.n	8003ffc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004004:	e02a      	b.n	800405c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	9300      	str	r3, [sp, #0]
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	2200      	movs	r2, #0
 800400e:	2180      	movs	r1, #128	; 0x80
 8004010:	68f8      	ldr	r0, [r7, #12]
 8004012:	f000 fa38 	bl	8004486 <UART_WaitOnFlagUntilTimeout>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d001      	beq.n	8004020 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e036      	b.n	800408e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d10b      	bne.n	800403e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	881b      	ldrh	r3, [r3, #0]
 800402a:	461a      	mov	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004034:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	3302      	adds	r3, #2
 800403a:	61bb      	str	r3, [r7, #24]
 800403c:	e007      	b.n	800404e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	781a      	ldrb	r2, [r3, #0]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	3301      	adds	r3, #1
 800404c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004052:	b29b      	uxth	r3, r3
 8004054:	3b01      	subs	r3, #1
 8004056:	b29a      	uxth	r2, r3
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004060:	b29b      	uxth	r3, r3
 8004062:	2b00      	cmp	r3, #0
 8004064:	d1cf      	bne.n	8004006 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	9300      	str	r3, [sp, #0]
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	2200      	movs	r2, #0
 800406e:	2140      	movs	r1, #64	; 0x40
 8004070:	68f8      	ldr	r0, [r7, #12]
 8004072:	f000 fa08 	bl	8004486 <UART_WaitOnFlagUntilTimeout>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d001      	beq.n	8004080 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e006      	b.n	800408e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2220      	movs	r2, #32
 8004084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004088:	2300      	movs	r3, #0
 800408a:	e000      	b.n	800408e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800408c:	2302      	movs	r3, #2
  }
}
 800408e:	4618      	mov	r0, r3
 8004090:	3720      	adds	r7, #32
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004096:	b580      	push	{r7, lr}
 8004098:	b084      	sub	sp, #16
 800409a:	af00      	add	r7, sp, #0
 800409c:	60f8      	str	r0, [r7, #12]
 800409e:	60b9      	str	r1, [r7, #8]
 80040a0:	4613      	mov	r3, r2
 80040a2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	2b20      	cmp	r3, #32
 80040ae:	d11d      	bne.n	80040ec <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d002      	beq.n	80040bc <HAL_UART_Receive_IT+0x26>
 80040b6:	88fb      	ldrh	r3, [r7, #6]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d101      	bne.n	80040c0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e016      	b.n	80040ee <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d101      	bne.n	80040ce <HAL_UART_Receive_IT+0x38>
 80040ca:	2302      	movs	r3, #2
 80040cc:	e00f      	b.n	80040ee <HAL_UART_Receive_IT+0x58>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2200      	movs	r2, #0
 80040da:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80040dc:	88fb      	ldrh	r3, [r7, #6]
 80040de:	461a      	mov	r2, r3
 80040e0:	68b9      	ldr	r1, [r7, #8]
 80040e2:	68f8      	ldr	r0, [r7, #12]
 80040e4:	f000 fa19 	bl	800451a <UART_Start_Receive_IT>
 80040e8:	4603      	mov	r3, r0
 80040ea:	e000      	b.n	80040ee <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80040ec:	2302      	movs	r3, #2
  }
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3710      	adds	r7, #16
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
	...

080040f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b08a      	sub	sp, #40	; 0x28
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004118:	2300      	movs	r3, #0
 800411a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800411c:	2300      	movs	r3, #0
 800411e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004122:	f003 030f 	and.w	r3, r3, #15
 8004126:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d10d      	bne.n	800414a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800412e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004130:	f003 0320 	and.w	r3, r3, #32
 8004134:	2b00      	cmp	r3, #0
 8004136:	d008      	beq.n	800414a <HAL_UART_IRQHandler+0x52>
 8004138:	6a3b      	ldr	r3, [r7, #32]
 800413a:	f003 0320 	and.w	r3, r3, #32
 800413e:	2b00      	cmp	r3, #0
 8004140:	d003      	beq.n	800414a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 fac9 	bl	80046da <UART_Receive_IT>
      return;
 8004148:	e17b      	b.n	8004442 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	2b00      	cmp	r3, #0
 800414e:	f000 80b1 	beq.w	80042b4 <HAL_UART_IRQHandler+0x1bc>
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	f003 0301 	and.w	r3, r3, #1
 8004158:	2b00      	cmp	r3, #0
 800415a:	d105      	bne.n	8004168 <HAL_UART_IRQHandler+0x70>
 800415c:	6a3b      	ldr	r3, [r7, #32]
 800415e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004162:	2b00      	cmp	r3, #0
 8004164:	f000 80a6 	beq.w	80042b4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00a      	beq.n	8004188 <HAL_UART_IRQHandler+0x90>
 8004172:	6a3b      	ldr	r3, [r7, #32]
 8004174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004178:	2b00      	cmp	r3, #0
 800417a:	d005      	beq.n	8004188 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004180:	f043 0201 	orr.w	r2, r3, #1
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418a:	f003 0304 	and.w	r3, r3, #4
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00a      	beq.n	80041a8 <HAL_UART_IRQHandler+0xb0>
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	f003 0301 	and.w	r3, r3, #1
 8004198:	2b00      	cmp	r3, #0
 800419a:	d005      	beq.n	80041a8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a0:	f043 0202 	orr.w	r2, r3, #2
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80041a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00a      	beq.n	80041c8 <HAL_UART_IRQHandler+0xd0>
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	f003 0301 	and.w	r3, r3, #1
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d005      	beq.n	80041c8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c0:	f043 0204 	orr.w	r2, r3, #4
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80041c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ca:	f003 0308 	and.w	r3, r3, #8
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00f      	beq.n	80041f2 <HAL_UART_IRQHandler+0xfa>
 80041d2:	6a3b      	ldr	r3, [r7, #32]
 80041d4:	f003 0320 	and.w	r3, r3, #32
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d104      	bne.n	80041e6 <HAL_UART_IRQHandler+0xee>
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	f003 0301 	and.w	r3, r3, #1
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d005      	beq.n	80041f2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ea:	f043 0208 	orr.w	r2, r3, #8
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	f000 811e 	beq.w	8004438 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fe:	f003 0320 	and.w	r3, r3, #32
 8004202:	2b00      	cmp	r3, #0
 8004204:	d007      	beq.n	8004216 <HAL_UART_IRQHandler+0x11e>
 8004206:	6a3b      	ldr	r3, [r7, #32]
 8004208:	f003 0320 	and.w	r3, r3, #32
 800420c:	2b00      	cmp	r3, #0
 800420e:	d002      	beq.n	8004216 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f000 fa62 	bl	80046da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	695b      	ldr	r3, [r3, #20]
 800421c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004220:	2b00      	cmp	r3, #0
 8004222:	bf14      	ite	ne
 8004224:	2301      	movne	r3, #1
 8004226:	2300      	moveq	r3, #0
 8004228:	b2db      	uxtb	r3, r3
 800422a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004230:	f003 0308 	and.w	r3, r3, #8
 8004234:	2b00      	cmp	r3, #0
 8004236:	d102      	bne.n	800423e <HAL_UART_IRQHandler+0x146>
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d031      	beq.n	80042a2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 f9a4 	bl	800458c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800424e:	2b00      	cmp	r3, #0
 8004250:	d023      	beq.n	800429a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	695a      	ldr	r2, [r3, #20]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004260:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004266:	2b00      	cmp	r3, #0
 8004268:	d013      	beq.n	8004292 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800426e:	4a76      	ldr	r2, [pc, #472]	; (8004448 <HAL_UART_IRQHandler+0x350>)
 8004270:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004276:	4618      	mov	r0, r3
 8004278:	f7fd fe48 	bl	8001f0c <HAL_DMA_Abort_IT>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d016      	beq.n	80042b0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800428c:	4610      	mov	r0, r2
 800428e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004290:	e00e      	b.n	80042b0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 f8e3 	bl	800445e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004298:	e00a      	b.n	80042b0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 f8df 	bl	800445e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042a0:	e006      	b.n	80042b0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 f8db 	bl	800445e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80042ae:	e0c3      	b.n	8004438 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042b0:	bf00      	nop
    return;
 80042b2:	e0c1      	b.n	8004438 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	f040 80a1 	bne.w	8004400 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80042be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c0:	f003 0310 	and.w	r3, r3, #16
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	f000 809b 	beq.w	8004400 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80042ca:	6a3b      	ldr	r3, [r7, #32]
 80042cc:	f003 0310 	and.w	r3, r3, #16
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f000 8095 	beq.w	8004400 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80042d6:	2300      	movs	r3, #0
 80042d8:	60fb      	str	r3, [r7, #12]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	60fb      	str	r3, [r7, #12]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	60fb      	str	r3, [r7, #12]
 80042ea:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d04e      	beq.n	8004398 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004304:	8a3b      	ldrh	r3, [r7, #16]
 8004306:	2b00      	cmp	r3, #0
 8004308:	f000 8098 	beq.w	800443c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004310:	8a3a      	ldrh	r2, [r7, #16]
 8004312:	429a      	cmp	r2, r3
 8004314:	f080 8092 	bcs.w	800443c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	8a3a      	ldrh	r2, [r7, #16]
 800431c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004322:	699b      	ldr	r3, [r3, #24]
 8004324:	2b20      	cmp	r3, #32
 8004326:	d02b      	beq.n	8004380 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68da      	ldr	r2, [r3, #12]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004336:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	695a      	ldr	r2, [r3, #20]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f022 0201 	bic.w	r2, r2, #1
 8004346:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	695a      	ldr	r2, [r3, #20]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004356:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2220      	movs	r2, #32
 800435c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68da      	ldr	r2, [r3, #12]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f022 0210 	bic.w	r2, r2, #16
 8004374:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437a:	4618      	mov	r0, r3
 800437c:	f7fd fd8b 	bl	8001e96 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004388:	b29b      	uxth	r3, r3
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	b29b      	uxth	r3, r3
 800438e:	4619      	mov	r1, r3
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f000 f86d 	bl	8004470 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004396:	e051      	b.n	800443c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d047      	beq.n	8004440 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80043b0:	8a7b      	ldrh	r3, [r7, #18]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d044      	beq.n	8004440 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68da      	ldr	r2, [r3, #12]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80043c4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	695a      	ldr	r2, [r3, #20]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f022 0201 	bic.w	r2, r2, #1
 80043d4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2220      	movs	r2, #32
 80043da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68da      	ldr	r2, [r3, #12]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f022 0210 	bic.w	r2, r2, #16
 80043f2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80043f4:	8a7b      	ldrh	r3, [r7, #18]
 80043f6:	4619      	mov	r1, r3
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f000 f839 	bl	8004470 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80043fe:	e01f      	b.n	8004440 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004406:	2b00      	cmp	r3, #0
 8004408:	d008      	beq.n	800441c <HAL_UART_IRQHandler+0x324>
 800440a:	6a3b      	ldr	r3, [r7, #32]
 800440c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004410:	2b00      	cmp	r3, #0
 8004412:	d003      	beq.n	800441c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f000 f8f9 	bl	800460c <UART_Transmit_IT>
    return;
 800441a:	e012      	b.n	8004442 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800441c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00d      	beq.n	8004442 <HAL_UART_IRQHandler+0x34a>
 8004426:	6a3b      	ldr	r3, [r7, #32]
 8004428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800442c:	2b00      	cmp	r3, #0
 800442e:	d008      	beq.n	8004442 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 f93a 	bl	80046aa <UART_EndTransmit_IT>
    return;
 8004436:	e004      	b.n	8004442 <HAL_UART_IRQHandler+0x34a>
    return;
 8004438:	bf00      	nop
 800443a:	e002      	b.n	8004442 <HAL_UART_IRQHandler+0x34a>
      return;
 800443c:	bf00      	nop
 800443e:	e000      	b.n	8004442 <HAL_UART_IRQHandler+0x34a>
      return;
 8004440:	bf00      	nop
  }
}
 8004442:	3728      	adds	r7, #40	; 0x28
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}
 8004448:	080045e5 	.word	0x080045e5

0800444c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004454:	bf00      	nop
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	bc80      	pop	{r7}
 800445c:	4770      	bx	lr

0800445e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800445e:	b480      	push	{r7}
 8004460:	b083      	sub	sp, #12
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004466:	bf00      	nop
 8004468:	370c      	adds	r7, #12
 800446a:	46bd      	mov	sp, r7
 800446c:	bc80      	pop	{r7}
 800446e:	4770      	bx	lr

08004470 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	460b      	mov	r3, r1
 800447a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	bc80      	pop	{r7}
 8004484:	4770      	bx	lr

08004486 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004486:	b580      	push	{r7, lr}
 8004488:	b084      	sub	sp, #16
 800448a:	af00      	add	r7, sp, #0
 800448c:	60f8      	str	r0, [r7, #12]
 800448e:	60b9      	str	r1, [r7, #8]
 8004490:	603b      	str	r3, [r7, #0]
 8004492:	4613      	mov	r3, r2
 8004494:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004496:	e02c      	b.n	80044f2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800449e:	d028      	beq.n	80044f2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d007      	beq.n	80044b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80044a6:	f7fd fbe9 	bl	8001c7c <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	69ba      	ldr	r2, [r7, #24]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d21d      	bcs.n	80044f2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68da      	ldr	r2, [r3, #12]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80044c4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	695a      	ldr	r2, [r3, #20]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f022 0201 	bic.w	r2, r2, #1
 80044d4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2220      	movs	r2, #32
 80044da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2220      	movs	r2, #32
 80044e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e00f      	b.n	8004512 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	4013      	ands	r3, r2
 80044fc:	68ba      	ldr	r2, [r7, #8]
 80044fe:	429a      	cmp	r2, r3
 8004500:	bf0c      	ite	eq
 8004502:	2301      	moveq	r3, #1
 8004504:	2300      	movne	r3, #0
 8004506:	b2db      	uxtb	r3, r3
 8004508:	461a      	mov	r2, r3
 800450a:	79fb      	ldrb	r3, [r7, #7]
 800450c:	429a      	cmp	r2, r3
 800450e:	d0c3      	beq.n	8004498 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3710      	adds	r7, #16
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}

0800451a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800451a:	b480      	push	{r7}
 800451c:	b085      	sub	sp, #20
 800451e:	af00      	add	r7, sp, #0
 8004520:	60f8      	str	r0, [r7, #12]
 8004522:	60b9      	str	r1, [r7, #8]
 8004524:	4613      	mov	r3, r2
 8004526:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	68ba      	ldr	r2, [r7, #8]
 800452c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	88fa      	ldrh	r2, [r7, #6]
 8004532:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	88fa      	ldrh	r2, [r7, #6]
 8004538:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2200      	movs	r2, #0
 800453e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2222      	movs	r2, #34	; 0x22
 8004544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68da      	ldr	r2, [r3, #12]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800455e:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	695a      	ldr	r2, [r3, #20]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f042 0201 	orr.w	r2, r2, #1
 800456e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68da      	ldr	r2, [r3, #12]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f042 0220 	orr.w	r2, r2, #32
 800457e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	3714      	adds	r7, #20
 8004586:	46bd      	mov	sp, r7
 8004588:	bc80      	pop	{r7}
 800458a:	4770      	bx	lr

0800458c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68da      	ldr	r2, [r3, #12]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80045a2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	695a      	ldr	r2, [r3, #20]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f022 0201 	bic.w	r2, r2, #1
 80045b2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d107      	bne.n	80045cc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68da      	ldr	r2, [r3, #12]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f022 0210 	bic.w	r2, r2, #16
 80045ca:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2220      	movs	r2, #32
 80045d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80045da:	bf00      	nop
 80045dc:	370c      	adds	r7, #12
 80045de:	46bd      	mov	sp, r7
 80045e0:	bc80      	pop	{r7}
 80045e2:	4770      	bx	lr

080045e4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2200      	movs	r2, #0
 80045fc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	f7ff ff2d 	bl	800445e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004604:	bf00      	nop
 8004606:	3710      	adds	r7, #16
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800460c:	b480      	push	{r7}
 800460e:	b085      	sub	sp, #20
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800461a:	b2db      	uxtb	r3, r3
 800461c:	2b21      	cmp	r3, #33	; 0x21
 800461e:	d13e      	bne.n	800469e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004628:	d114      	bne.n	8004654 <UART_Transmit_IT+0x48>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d110      	bne.n	8004654 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a1b      	ldr	r3, [r3, #32]
 8004636:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	881b      	ldrh	r3, [r3, #0]
 800463c:	461a      	mov	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004646:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a1b      	ldr	r3, [r3, #32]
 800464c:	1c9a      	adds	r2, r3, #2
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	621a      	str	r2, [r3, #32]
 8004652:	e008      	b.n	8004666 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a1b      	ldr	r3, [r3, #32]
 8004658:	1c59      	adds	r1, r3, #1
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	6211      	str	r1, [r2, #32]
 800465e:	781a      	ldrb	r2, [r3, #0]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800466a:	b29b      	uxth	r3, r3
 800466c:	3b01      	subs	r3, #1
 800466e:	b29b      	uxth	r3, r3
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	4619      	mov	r1, r3
 8004674:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004676:	2b00      	cmp	r3, #0
 8004678:	d10f      	bne.n	800469a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68da      	ldr	r2, [r3, #12]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004688:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68da      	ldr	r2, [r3, #12]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004698:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800469a:	2300      	movs	r3, #0
 800469c:	e000      	b.n	80046a0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800469e:	2302      	movs	r3, #2
  }
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3714      	adds	r7, #20
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bc80      	pop	{r7}
 80046a8:	4770      	bx	lr

080046aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b082      	sub	sp, #8
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68da      	ldr	r2, [r3, #12]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2220      	movs	r2, #32
 80046c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f7ff febe 	bl	800444c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3708      	adds	r7, #8
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80046da:	b580      	push	{r7, lr}
 80046dc:	b086      	sub	sp, #24
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	2b22      	cmp	r3, #34	; 0x22
 80046ec:	f040 8099 	bne.w	8004822 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046f8:	d117      	bne.n	800472a <UART_Receive_IT+0x50>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d113      	bne.n	800472a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004702:	2300      	movs	r3, #0
 8004704:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800470a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	b29b      	uxth	r3, r3
 8004714:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004718:	b29a      	uxth	r2, r3
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004722:	1c9a      	adds	r2, r3, #2
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	629a      	str	r2, [r3, #40]	; 0x28
 8004728:	e026      	b.n	8004778 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800472e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004730:	2300      	movs	r3, #0
 8004732:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800473c:	d007      	beq.n	800474e <UART_Receive_IT+0x74>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d10a      	bne.n	800475c <UART_Receive_IT+0x82>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d106      	bne.n	800475c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	b2da      	uxtb	r2, r3
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	701a      	strb	r2, [r3, #0]
 800475a:	e008      	b.n	800476e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	b2db      	uxtb	r3, r3
 8004764:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004768:	b2da      	uxtb	r2, r3
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004772:	1c5a      	adds	r2, r3, #1
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800477c:	b29b      	uxth	r3, r3
 800477e:	3b01      	subs	r3, #1
 8004780:	b29b      	uxth	r3, r3
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	4619      	mov	r1, r3
 8004786:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004788:	2b00      	cmp	r3, #0
 800478a:	d148      	bne.n	800481e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68da      	ldr	r2, [r3, #12]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f022 0220 	bic.w	r2, r2, #32
 800479a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68da      	ldr	r2, [r3, #12]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	695a      	ldr	r2, [r3, #20]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f022 0201 	bic.w	r2, r2, #1
 80047ba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2220      	movs	r2, #32
 80047c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d123      	bne.n	8004814 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68da      	ldr	r2, [r3, #12]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f022 0210 	bic.w	r2, r2, #16
 80047e0:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0310 	and.w	r3, r3, #16
 80047ec:	2b10      	cmp	r3, #16
 80047ee:	d10a      	bne.n	8004806 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80047f0:	2300      	movs	r3, #0
 80047f2:	60fb      	str	r3, [r7, #12]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	60fb      	str	r3, [r7, #12]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	60fb      	str	r3, [r7, #12]
 8004804:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800480a:	4619      	mov	r1, r3
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f7ff fe2f 	bl	8004470 <HAL_UARTEx_RxEventCallback>
 8004812:	e002      	b.n	800481a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f7fc f9df 	bl	8000bd8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800481a:	2300      	movs	r3, #0
 800481c:	e002      	b.n	8004824 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800481e:	2300      	movs	r3, #0
 8004820:	e000      	b.n	8004824 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004822:	2302      	movs	r3, #2
  }
}
 8004824:	4618      	mov	r0, r3
 8004826:	3718      	adds	r7, #24
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	68da      	ldr	r2, [r3, #12]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	430a      	orrs	r2, r1
 8004848:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	689a      	ldr	r2, [r3, #8]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	431a      	orrs	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	695b      	ldr	r3, [r3, #20]
 8004858:	4313      	orrs	r3, r2
 800485a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004866:	f023 030c 	bic.w	r3, r3, #12
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	6812      	ldr	r2, [r2, #0]
 800486e:	68b9      	ldr	r1, [r7, #8]
 8004870:	430b      	orrs	r3, r1
 8004872:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	699a      	ldr	r2, [r3, #24]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	430a      	orrs	r2, r1
 8004888:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a2c      	ldr	r2, [pc, #176]	; (8004940 <UART_SetConfig+0x114>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d103      	bne.n	800489c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004894:	f7fe f94c 	bl	8002b30 <HAL_RCC_GetPCLK2Freq>
 8004898:	60f8      	str	r0, [r7, #12]
 800489a:	e002      	b.n	80048a2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800489c:	f7fe f934 	bl	8002b08 <HAL_RCC_GetPCLK1Freq>
 80048a0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048a2:	68fa      	ldr	r2, [r7, #12]
 80048a4:	4613      	mov	r3, r2
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	4413      	add	r3, r2
 80048aa:	009a      	lsls	r2, r3, #2
 80048ac:	441a      	add	r2, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b8:	4a22      	ldr	r2, [pc, #136]	; (8004944 <UART_SetConfig+0x118>)
 80048ba:	fba2 2303 	umull	r2, r3, r2, r3
 80048be:	095b      	lsrs	r3, r3, #5
 80048c0:	0119      	lsls	r1, r3, #4
 80048c2:	68fa      	ldr	r2, [r7, #12]
 80048c4:	4613      	mov	r3, r2
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	4413      	add	r3, r2
 80048ca:	009a      	lsls	r2, r3, #2
 80048cc:	441a      	add	r2, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80048d8:	4b1a      	ldr	r3, [pc, #104]	; (8004944 <UART_SetConfig+0x118>)
 80048da:	fba3 0302 	umull	r0, r3, r3, r2
 80048de:	095b      	lsrs	r3, r3, #5
 80048e0:	2064      	movs	r0, #100	; 0x64
 80048e2:	fb00 f303 	mul.w	r3, r0, r3
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	011b      	lsls	r3, r3, #4
 80048ea:	3332      	adds	r3, #50	; 0x32
 80048ec:	4a15      	ldr	r2, [pc, #84]	; (8004944 <UART_SetConfig+0x118>)
 80048ee:	fba2 2303 	umull	r2, r3, r2, r3
 80048f2:	095b      	lsrs	r3, r3, #5
 80048f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048f8:	4419      	add	r1, r3
 80048fa:	68fa      	ldr	r2, [r7, #12]
 80048fc:	4613      	mov	r3, r2
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	4413      	add	r3, r2
 8004902:	009a      	lsls	r2, r3, #2
 8004904:	441a      	add	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004910:	4b0c      	ldr	r3, [pc, #48]	; (8004944 <UART_SetConfig+0x118>)
 8004912:	fba3 0302 	umull	r0, r3, r3, r2
 8004916:	095b      	lsrs	r3, r3, #5
 8004918:	2064      	movs	r0, #100	; 0x64
 800491a:	fb00 f303 	mul.w	r3, r0, r3
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	011b      	lsls	r3, r3, #4
 8004922:	3332      	adds	r3, #50	; 0x32
 8004924:	4a07      	ldr	r2, [pc, #28]	; (8004944 <UART_SetConfig+0x118>)
 8004926:	fba2 2303 	umull	r2, r3, r2, r3
 800492a:	095b      	lsrs	r3, r3, #5
 800492c:	f003 020f 	and.w	r2, r3, #15
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	440a      	add	r2, r1
 8004936:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004938:	bf00      	nop
 800493a:	3710      	adds	r7, #16
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}
 8004940:	40013800 	.word	0x40013800
 8004944:	51eb851f 	.word	0x51eb851f

08004948 <CLCD_Delay>:
CLCD_WriteString(&LCD1,"Hello anh em");
******************************************************************************************************************/
#include "Lcd.h"
//************************ Low Level Function *****************************************//
static void CLCD_Delay(uint16_t Time)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
 800494e:	4603      	mov	r3, r0
 8004950:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(Time);
 8004952:	88fb      	ldrh	r3, [r7, #6]
 8004954:	4618      	mov	r0, r3
 8004956:	f7fd f99b 	bl	8001c90 <HAL_Delay>

}
 800495a:	bf00      	nop
 800495c:	3708      	adds	r7, #8
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <CLCD_Write8>:
static void CLCD_Write8(CLCD_Name* LCD, uint8_t Data, uint8_t Mode)
{
 8004962:	b580      	push	{r7, lr}
 8004964:	b082      	sub	sp, #8
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
 800496a:	460b      	mov	r3, r1
 800496c:	70fb      	strb	r3, [r7, #3]
 800496e:	4613      	mov	r3, r2
 8004970:	70bb      	strb	r3, [r7, #2]
	if(Mode == CLCD_COMMAND)
 8004972:	78bb      	ldrb	r3, [r7, #2]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d108      	bne.n	800498a <CLCD_Write8+0x28>
	{
		HAL_GPIO_WritePin(LCD->RS_PORT, LCD->RS_PIN, GPIO_PIN_RESET);// RS = 0, write cmd
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6858      	ldr	r0, [r3, #4]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	891b      	ldrh	r3, [r3, #8]
 8004980:	2200      	movs	r2, #0
 8004982:	4619      	mov	r1, r3
 8004984:	f7fd fcbc 	bl	8002300 <HAL_GPIO_WritePin>
 8004988:	e00a      	b.n	80049a0 <CLCD_Write8+0x3e>
	}
	else if(Mode == CLCD_DATA)
 800498a:	78bb      	ldrb	r3, [r7, #2]
 800498c:	2b01      	cmp	r3, #1
 800498e:	d107      	bne.n	80049a0 <CLCD_Write8+0x3e>
	{
		HAL_GPIO_WritePin(LCD->RS_PORT, LCD->RS_PIN, GPIO_PIN_SET);// RS = 1, write data
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6858      	ldr	r0, [r3, #4]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	891b      	ldrh	r3, [r3, #8]
 8004998:	2201      	movs	r2, #1
 800499a:	4619      	mov	r1, r3
 800499c:	f7fd fcb0 	bl	8002300 <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(LCD->D0_PORT, LCD->D0_PIN, Data&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6958      	ldr	r0, [r3, #20]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	8b19      	ldrh	r1, [r3, #24]
 80049a8:	78fb      	ldrb	r3, [r7, #3]
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	461a      	mov	r2, r3
 80049b2:	f7fd fca5 	bl	8002300 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D1_PORT, LCD->D1_PIN, Data>>1&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	69d8      	ldr	r0, [r3, #28]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	8c19      	ldrh	r1, [r3, #32]
 80049be:	78fb      	ldrb	r3, [r7, #3]
 80049c0:	085b      	lsrs	r3, r3, #1
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	f003 0301 	and.w	r3, r3, #1
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	461a      	mov	r2, r3
 80049cc:	f7fd fc98 	bl	8002300 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D2_PORT, LCD->D2_PIN, Data>>2&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	8d19      	ldrh	r1, [r3, #40]	; 0x28
 80049d8:	78fb      	ldrb	r3, [r7, #3]
 80049da:	089b      	lsrs	r3, r3, #2
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	461a      	mov	r2, r3
 80049e6:	f7fd fc8b 	bl	8002300 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D3_PORT, LCD->D3_PIN, Data>>3&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	8e19      	ldrh	r1, [r3, #48]	; 0x30
 80049f2:	78fb      	ldrb	r3, [r7, #3]
 80049f4:	08db      	lsrs	r3, r3, #3
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	f003 0301 	and.w	r3, r3, #1
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	461a      	mov	r2, r3
 8004a00:	f7fd fc7e 	bl	8002300 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D4_PORT, LCD->D4_PIN, Data>>4&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	8f19      	ldrh	r1, [r3, #56]	; 0x38
 8004a0c:	78fb      	ldrb	r3, [r7, #3]
 8004a0e:	091b      	lsrs	r3, r3, #4
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	f003 0301 	and.w	r3, r3, #1
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	461a      	mov	r2, r3
 8004a1a:	f7fd fc71 	bl	8002300 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D5_PORT, LCD->D5_PIN, Data>>5&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
 8004a28:	78fb      	ldrb	r3, [r7, #3]
 8004a2a:	095b      	lsrs	r3, r3, #5
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	f003 0301 	and.w	r3, r3, #1
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	461a      	mov	r2, r3
 8004a36:	f7fd fc63 	bl	8002300 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D6_PORT, LCD->D6_PIN, Data>>6&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f8b3 1048 	ldrh.w	r1, [r3, #72]	; 0x48
 8004a44:	78fb      	ldrb	r3, [r7, #3]
 8004a46:	099b      	lsrs	r3, r3, #6
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	f003 0301 	and.w	r3, r3, #1
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	461a      	mov	r2, r3
 8004a52:	f7fd fc55 	bl	8002300 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D7_PORT, LCD->D7_PIN, Data>>7&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8004a60:	78fb      	ldrb	r3, [r7, #3]
 8004a62:	09db      	lsrs	r3, r3, #7
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	461a      	mov	r2, r3
 8004a68:	f7fd fc4a 	bl	8002300 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_RESET);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	68d8      	ldr	r0, [r3, #12]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	8a1b      	ldrh	r3, [r3, #16]
 8004a74:	2200      	movs	r2, #0
 8004a76:	4619      	mov	r1, r3
 8004a78:	f7fd fc42 	bl	8002300 <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 8004a7c:	2001      	movs	r0, #1
 8004a7e:	f7ff ff63 	bl	8004948 <CLCD_Delay>
	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_SET);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	68d8      	ldr	r0, [r3, #12]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	8a1b      	ldrh	r3, [r3, #16]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	f7fd fc37 	bl	8002300 <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 8004a92:	2001      	movs	r0, #1
 8004a94:	f7ff ff58 	bl	8004948 <CLCD_Delay>
	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_RESET);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	68d8      	ldr	r0, [r3, #12]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	8a1b      	ldrh	r3, [r3, #16]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	f7fd fc2c 	bl	8002300 <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 8004aa8:	2001      	movs	r0, #1
 8004aaa:	f7ff ff4d 	bl	8004948 <CLCD_Delay>
}
 8004aae:	bf00      	nop
 8004ab0:	3708      	adds	r7, #8
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}

08004ab6 <CLCD_Write4>:
static void CLCD_Write4(CLCD_Name* LCD, uint8_t Data, uint8_t Mode)
{
 8004ab6:	b580      	push	{r7, lr}
 8004ab8:	b084      	sub	sp, #16
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
 8004abe:	460b      	mov	r3, r1
 8004ac0:	70fb      	strb	r3, [r7, #3]
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	70bb      	strb	r3, [r7, #2]
	uint8_t Data_H = Data >>4;
 8004ac6:	78fb      	ldrb	r3, [r7, #3]
 8004ac8:	091b      	lsrs	r3, r3, #4
 8004aca:	73fb      	strb	r3, [r7, #15]
	uint8_t Data_L = Data;
 8004acc:	78fb      	ldrb	r3, [r7, #3]
 8004ace:	73bb      	strb	r3, [r7, #14]
	if(Mode == CLCD_COMMAND)
 8004ad0:	78bb      	ldrb	r3, [r7, #2]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d108      	bne.n	8004ae8 <CLCD_Write4+0x32>
	{
		HAL_GPIO_WritePin(LCD->RS_PORT, LCD->RS_PIN, GPIO_PIN_RESET);// RS = 0, write cmd
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6858      	ldr	r0, [r3, #4]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	891b      	ldrh	r3, [r3, #8]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	f7fd fc0d 	bl	8002300 <HAL_GPIO_WritePin>
 8004ae6:	e00a      	b.n	8004afe <CLCD_Write4+0x48>
	}
	else if(Mode == CLCD_DATA)
 8004ae8:	78bb      	ldrb	r3, [r7, #2]
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d107      	bne.n	8004afe <CLCD_Write4+0x48>
	{
		HAL_GPIO_WritePin(LCD->RS_PORT, LCD->RS_PIN, GPIO_PIN_SET);// RS = 1, write data
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6858      	ldr	r0, [r3, #4]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	891b      	ldrh	r3, [r3, #8]
 8004af6:	2201      	movs	r2, #1
 8004af8:	4619      	mov	r1, r3
 8004afa:	f7fd fc01 	bl	8002300 <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(LCD->D4_PORT, LCD->D4_PIN, Data_H&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	8f19      	ldrh	r1, [r3, #56]	; 0x38
 8004b06:	7bfb      	ldrb	r3, [r7, #15]
 8004b08:	f003 0301 	and.w	r3, r3, #1
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	461a      	mov	r2, r3
 8004b10:	f7fd fbf6 	bl	8002300 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D5_PORT, LCD->D5_PIN, Data_H>>1&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
 8004b1e:	7bfb      	ldrb	r3, [r7, #15]
 8004b20:	085b      	lsrs	r3, r3, #1
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	f003 0301 	and.w	r3, r3, #1
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	f7fd fbe8 	bl	8002300 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D6_PORT, LCD->D6_PIN, Data_H>>2&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f8b3 1048 	ldrh.w	r1, [r3, #72]	; 0x48
 8004b3a:	7bfb      	ldrb	r3, [r7, #15]
 8004b3c:	089b      	lsrs	r3, r3, #2
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	f003 0301 	and.w	r3, r3, #1
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	461a      	mov	r2, r3
 8004b48:	f7fd fbda 	bl	8002300 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D7_PORT, LCD->D7_PIN, Data_H>>3&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8004b56:	7bfb      	ldrb	r3, [r7, #15]
 8004b58:	08db      	lsrs	r3, r3, #3
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	f003 0301 	and.w	r3, r3, #1
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	461a      	mov	r2, r3
 8004b64:	f7fd fbcc 	bl	8002300 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_RESET);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	68d8      	ldr	r0, [r3, #12]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	8a1b      	ldrh	r3, [r3, #16]
 8004b70:	2200      	movs	r2, #0
 8004b72:	4619      	mov	r1, r3
 8004b74:	f7fd fbc4 	bl	8002300 <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 8004b78:	2001      	movs	r0, #1
 8004b7a:	f7ff fee5 	bl	8004948 <CLCD_Delay>
	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_SET);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	68d8      	ldr	r0, [r3, #12]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	8a1b      	ldrh	r3, [r3, #16]
 8004b86:	2201      	movs	r2, #1
 8004b88:	4619      	mov	r1, r3
 8004b8a:	f7fd fbb9 	bl	8002300 <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 8004b8e:	2001      	movs	r0, #1
 8004b90:	f7ff feda 	bl	8004948 <CLCD_Delay>
	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_RESET);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	68d8      	ldr	r0, [r3, #12]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	8a1b      	ldrh	r3, [r3, #16]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	f7fd fbae 	bl	8002300 <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 8004ba4:	2001      	movs	r0, #1
 8004ba6:	f7ff fecf 	bl	8004948 <CLCD_Delay>

	HAL_GPIO_WritePin(LCD->D4_PORT, LCD->D4_PIN, Data_L&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	8f19      	ldrh	r1, [r3, #56]	; 0x38
 8004bb2:	7bbb      	ldrb	r3, [r7, #14]
 8004bb4:	f003 0301 	and.w	r3, r3, #1
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	461a      	mov	r2, r3
 8004bbc:	f7fd fba0 	bl	8002300 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D5_PORT, LCD->D5_PIN, Data_L>>1&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
 8004bca:	7bbb      	ldrb	r3, [r7, #14]
 8004bcc:	085b      	lsrs	r3, r3, #1
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	f003 0301 	and.w	r3, r3, #1
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	f7fd fb92 	bl	8002300 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D6_PORT, LCD->D6_PIN, Data_L>>2&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f8b3 1048 	ldrh.w	r1, [r3, #72]	; 0x48
 8004be6:	7bbb      	ldrb	r3, [r7, #14]
 8004be8:	089b      	lsrs	r3, r3, #2
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	f003 0301 	and.w	r3, r3, #1
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	f7fd fb84 	bl	8002300 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->D7_PORT, LCD->D7_PIN, Data_L>>3&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8004c02:	7bbb      	ldrb	r3, [r7, #14]
 8004c04:	08db      	lsrs	r3, r3, #3
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	f003 0301 	and.w	r3, r3, #1
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	461a      	mov	r2, r3
 8004c10:	f7fd fb76 	bl	8002300 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_RESET);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	68d8      	ldr	r0, [r3, #12]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	8a1b      	ldrh	r3, [r3, #16]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	4619      	mov	r1, r3
 8004c20:	f7fd fb6e 	bl	8002300 <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 8004c24:	2001      	movs	r0, #1
 8004c26:	f7ff fe8f 	bl	8004948 <CLCD_Delay>
	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_SET);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	68d8      	ldr	r0, [r3, #12]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	8a1b      	ldrh	r3, [r3, #16]
 8004c32:	2201      	movs	r2, #1
 8004c34:	4619      	mov	r1, r3
 8004c36:	f7fd fb63 	bl	8002300 <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 8004c3a:	2001      	movs	r0, #1
 8004c3c:	f7ff fe84 	bl	8004948 <CLCD_Delay>
	HAL_GPIO_WritePin(LCD->EN_PORT, LCD->EN_PIN, GPIO_PIN_RESET);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	68d8      	ldr	r0, [r3, #12]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	8a1b      	ldrh	r3, [r3, #16]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	f7fd fb58 	bl	8002300 <HAL_GPIO_WritePin>
	CLCD_Delay(1);
 8004c50:	2001      	movs	r0, #1
 8004c52:	f7ff fe79 	bl	8004948 <CLCD_Delay>
}
 8004c56:	bf00      	nop
 8004c58:	3710      	adds	r7, #16
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}

08004c5e <CLCD_4BIT_Init>:

void CLCD_4BIT_Init(CLCD_Name* LCD, uint8_t Colum, uint8_t Row,
									GPIO_TypeDef* RS_PORT, uint16_t RS_PIN, GPIO_TypeDef* EN_PORT, uint16_t EN_PIN,
									GPIO_TypeDef* D4_PORT, uint16_t D4_PIN, GPIO_TypeDef* D5_PORT, uint16_t D5_PIN,
									GPIO_TypeDef* D6_PORT, uint16_t D6_PIN, GPIO_TypeDef* D7_PORT, uint16_t D7_PIN)
{
 8004c5e:	b580      	push	{r7, lr}
 8004c60:	b084      	sub	sp, #16
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	60f8      	str	r0, [r7, #12]
 8004c66:	607b      	str	r3, [r7, #4]
 8004c68:	460b      	mov	r3, r1
 8004c6a:	72fb      	strb	r3, [r7, #11]
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	72bb      	strb	r3, [r7, #10]
	LCD->MODE = LCD_4BITMODE;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2200      	movs	r2, #0
 8004c74:	701a      	strb	r2, [r3, #0]
	LCD->COLUMS = Colum;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	7afa      	ldrb	r2, [r7, #11]
 8004c7a:	705a      	strb	r2, [r3, #1]
	LCD->ROWS = Row;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	7aba      	ldrb	r2, [r7, #10]
 8004c80:	709a      	strb	r2, [r3, #2]
	LCD->RS_PORT = RS_PORT;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	605a      	str	r2, [r3, #4]
	LCD->RS_PIN = RS_PIN;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	8b3a      	ldrh	r2, [r7, #24]
 8004c8c:	811a      	strh	r2, [r3, #8]
	LCD->EN_PORT = EN_PORT;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	69fa      	ldr	r2, [r7, #28]
 8004c92:	60da      	str	r2, [r3, #12]
	LCD->EN_PIN = EN_PIN;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	8c3a      	ldrh	r2, [r7, #32]
 8004c98:	821a      	strh	r2, [r3, #16]
	LCD->D4_PORT = D4_PORT;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c9e:	635a      	str	r2, [r3, #52]	; 0x34
	LCD->D4_PIN = D4_PIN;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004ca4:	871a      	strh	r2, [r3, #56]	; 0x38
	LCD->D5_PORT = D5_PORT;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004caa:	63da      	str	r2, [r3, #60]	; 0x3c
	LCD->D5_PIN = D5_PIN;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8004cb0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	LCD->D6_PORT = D6_PORT;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cb8:	645a      	str	r2, [r3, #68]	; 0x44
	LCD->D6_PIN = D6_PIN;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8004cbe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	LCD->D7_PORT = D7_PORT;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004cc6:	64da      	str	r2, [r3, #76]	; 0x4c
	LCD->D7_PIN = D7_PIN;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8004cce:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	LCD->FUNCTIONSET = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2228      	movs	r2, #40	; 0x28
 8004cd6:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	LCD->ENTRYMODE = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2206      	movs	r2, #6
 8004cde:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	LCD->DISPLAYCTRL = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	220c      	movs	r2, #12
 8004ce6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	LCD->CURSORSHIFT = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2214      	movs	r2, #20
 8004cee:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

	CLCD_Delay(50);
 8004cf2:	2032      	movs	r0, #50	; 0x32
 8004cf4:	f7ff fe28 	bl	8004948 <CLCD_Delay>
	CLCD_Write4(LCD, 0x33, CLCD_COMMAND);
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	2133      	movs	r1, #51	; 0x33
 8004cfc:	68f8      	ldr	r0, [r7, #12]
 8004cfe:	f7ff feda 	bl	8004ab6 <CLCD_Write4>
	CLCD_Delay(5);
 8004d02:	2005      	movs	r0, #5
 8004d04:	f7ff fe20 	bl	8004948 <CLCD_Delay>
	CLCD_Write4(LCD, 0x33, CLCD_COMMAND);
 8004d08:	2200      	movs	r2, #0
 8004d0a:	2133      	movs	r1, #51	; 0x33
 8004d0c:	68f8      	ldr	r0, [r7, #12]
 8004d0e:	f7ff fed2 	bl	8004ab6 <CLCD_Write4>
	CLCD_Delay(5);
 8004d12:	2005      	movs	r0, #5
 8004d14:	f7ff fe18 	bl	8004948 <CLCD_Delay>
	CLCD_Write4(LCD, 0x32, CLCD_COMMAND);
 8004d18:	2200      	movs	r2, #0
 8004d1a:	2132      	movs	r1, #50	; 0x32
 8004d1c:	68f8      	ldr	r0, [r7, #12]
 8004d1e:	f7ff feca 	bl	8004ab6 <CLCD_Write4>
	CLCD_Delay(5);
 8004d22:	2005      	movs	r0, #5
 8004d24:	f7ff fe10 	bl	8004948 <CLCD_Delay>

	CLCD_Write4(LCD, LCD->ENTRYMODE,CLCD_COMMAND);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8004d2e:	2200      	movs	r2, #0
 8004d30:	4619      	mov	r1, r3
 8004d32:	68f8      	ldr	r0, [r7, #12]
 8004d34:	f7ff febf 	bl	8004ab6 <CLCD_Write4>
	CLCD_Write4(LCD, LCD->DISPLAYCTRL,CLCD_COMMAND);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8004d3e:	2200      	movs	r2, #0
 8004d40:	4619      	mov	r1, r3
 8004d42:	68f8      	ldr	r0, [r7, #12]
 8004d44:	f7ff feb7 	bl	8004ab6 <CLCD_Write4>
	CLCD_Write4(LCD, LCD->CURSORSHIFT,CLCD_COMMAND);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004d4e:	2200      	movs	r2, #0
 8004d50:	4619      	mov	r1, r3
 8004d52:	68f8      	ldr	r0, [r7, #12]
 8004d54:	f7ff feaf 	bl	8004ab6 <CLCD_Write4>
	CLCD_Write4(LCD, LCD->FUNCTIONSET,CLCD_COMMAND);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8004d5e:	2200      	movs	r2, #0
 8004d60:	4619      	mov	r1, r3
 8004d62:	68f8      	ldr	r0, [r7, #12]
 8004d64:	f7ff fea7 	bl	8004ab6 <CLCD_Write4>

	CLCD_Write4(LCD, LCD_CLEARDISPLAY,CLCD_COMMAND);
 8004d68:	2200      	movs	r2, #0
 8004d6a:	2101      	movs	r1, #1
 8004d6c:	68f8      	ldr	r0, [r7, #12]
 8004d6e:	f7ff fea2 	bl	8004ab6 <CLCD_Write4>
	CLCD_Write4(LCD, LCD_RETURNHOME,CLCD_COMMAND);
 8004d72:	2200      	movs	r2, #0
 8004d74:	2102      	movs	r1, #2
 8004d76:	68f8      	ldr	r0, [r7, #12]
 8004d78:	f7ff fe9d 	bl	8004ab6 <CLCD_Write4>
}
 8004d7c:	bf00      	nop
 8004d7e:	3710      	adds	r7, #16
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <CLCD_SetCursor>:
void CLCD_SetCursor(CLCD_Name* LCD, uint8_t Xpos, uint8_t Ypos)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	460b      	mov	r3, r1
 8004d8e:	70fb      	strb	r3, [r7, #3]
 8004d90:	4613      	mov	r3, r2
 8004d92:	70bb      	strb	r3, [r7, #2]

	uint8_t DRAM_ADDRESS = 0x00;
 8004d94:	2300      	movs	r3, #0
 8004d96:	73fb      	strb	r3, [r7, #15]
	uint8_t DRAM_OFFSET[4] = {0x00, 0x40, 0x14, 0x54};
 8004d98:	4b1d      	ldr	r3, [pc, #116]	; (8004e10 <CLCD_SetCursor+0x8c>)
 8004d9a:	60bb      	str	r3, [r7, #8]
	if(Xpos >= LCD->COLUMS)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	785b      	ldrb	r3, [r3, #1]
 8004da0:	78fa      	ldrb	r2, [r7, #3]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d303      	bcc.n	8004dae <CLCD_SetCursor+0x2a>
	{
		Xpos = LCD->COLUMS - 1;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	785b      	ldrb	r3, [r3, #1]
 8004daa:	3b01      	subs	r3, #1
 8004dac:	70fb      	strb	r3, [r7, #3]
	}
	if(Ypos >= LCD->ROWS)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	789b      	ldrb	r3, [r3, #2]
 8004db2:	78ba      	ldrb	r2, [r7, #2]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d303      	bcc.n	8004dc0 <CLCD_SetCursor+0x3c>
	{
		Ypos = LCD->ROWS -1;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	789b      	ldrb	r3, [r3, #2]
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	70bb      	strb	r3, [r7, #2]
	}
	DRAM_ADDRESS = DRAM_OFFSET[Ypos] + Xpos;
 8004dc0:	78bb      	ldrb	r3, [r7, #2]
 8004dc2:	3310      	adds	r3, #16
 8004dc4:	443b      	add	r3, r7
 8004dc6:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8004dca:	78fb      	ldrb	r3, [r7, #3]
 8004dcc:	4413      	add	r3, r2
 8004dce:	73fb      	strb	r3, [r7, #15]
	if(LCD->MODE == LCD_8BITMODE)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	2b10      	cmp	r3, #16
 8004dd6:	d109      	bne.n	8004dec <CLCD_SetCursor+0x68>
	{
		CLCD_Write8(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
 8004dd8:	7bfb      	ldrb	r3, [r7, #15]
 8004dda:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	2200      	movs	r2, #0
 8004de2:	4619      	mov	r1, r3
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f7ff fdbc 	bl	8004962 <CLCD_Write8>
	}
	else if(LCD->MODE == LCD_4BITMODE)
	{
		CLCD_Write4(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
	}
}
 8004dea:	e00c      	b.n	8004e06 <CLCD_SetCursor+0x82>
	else if(LCD->MODE == LCD_4BITMODE)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d108      	bne.n	8004e06 <CLCD_SetCursor+0x82>
		CLCD_Write4(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
 8004df4:	7bfb      	ldrb	r3, [r7, #15]
 8004df6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	4619      	mov	r1, r3
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f7ff fe58 	bl	8004ab6 <CLCD_Write4>
}
 8004e06:	bf00      	nop
 8004e08:	3710      	adds	r7, #16
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	54144000 	.word	0x54144000

08004e14 <CLCD_WriteChar>:
void CLCD_WriteChar(CLCD_Name* LCD, char character)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	70fb      	strb	r3, [r7, #3]
	if(LCD->MODE == LCD_8BITMODE)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	2b10      	cmp	r3, #16
 8004e26:	d106      	bne.n	8004e36 <CLCD_WriteChar+0x22>
	{
		CLCD_Write8(LCD, character, CLCD_DATA);
 8004e28:	78fb      	ldrb	r3, [r7, #3]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f7ff fd97 	bl	8004962 <CLCD_Write8>
	}
	else if(LCD->MODE == LCD_4BITMODE)
	{
		CLCD_Write4(LCD, character, CLCD_DATA);
	}
}
 8004e34:	e009      	b.n	8004e4a <CLCD_WriteChar+0x36>
	else if(LCD->MODE == LCD_4BITMODE)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d105      	bne.n	8004e4a <CLCD_WriteChar+0x36>
		CLCD_Write4(LCD, character, CLCD_DATA);
 8004e3e:	78fb      	ldrb	r3, [r7, #3]
 8004e40:	2201      	movs	r2, #1
 8004e42:	4619      	mov	r1, r3
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f7ff fe36 	bl	8004ab6 <CLCD_Write4>
}
 8004e4a:	bf00      	nop
 8004e4c:	3708      	adds	r7, #8
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <CLCD_WriteString>:
void CLCD_WriteString(CLCD_Name* LCD, char *String)
{
 8004e52:	b580      	push	{r7, lr}
 8004e54:	b082      	sub	sp, #8
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
 8004e5a:	6039      	str	r1, [r7, #0]
	while(*String)CLCD_WriteChar(LCD, *String++);
 8004e5c:	e007      	b.n	8004e6e <CLCD_WriteString+0x1c>
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	1c5a      	adds	r2, r3, #1
 8004e62:	603a      	str	r2, [r7, #0]
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	4619      	mov	r1, r3
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f7ff ffd3 	bl	8004e14 <CLCD_WriteChar>
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1f3      	bne.n	8004e5e <CLCD_WriteString+0xc>
}
 8004e76:	bf00      	nop
 8004e78:	bf00      	nop
 8004e7a:	3708      	adds	r7, #8
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8004e8a:	2101      	movs	r1, #1
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f000 f9a0 	bl	80051d2 <LoRa_read>
 8004e92:	4603      	mov	r3, r0
 8004e94:	73bb      	strb	r3, [r7, #14]
	data = read;
 8004e96:	7bbb      	ldrb	r3, [r7, #14]
 8004e98:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d107      	bne.n	8004eb0 <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 8004ea0:	7bbb      	ldrb	r3, [r7, #14]
 8004ea2:	f023 0307 	bic.w	r3, r3, #7
 8004ea6:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	61da      	str	r2, [r3, #28]
 8004eae:	e03e      	b.n	8004f2e <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d10c      	bne.n	8004ed0 <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8004eb6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004eba:	f023 0307 	bic.w	r3, r3, #7
 8004ebe:	b25b      	sxtb	r3, r3
 8004ec0:	f043 0301 	orr.w	r3, r3, #1
 8004ec4:	b25b      	sxtb	r3, r3
 8004ec6:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	61da      	str	r2, [r3, #28]
 8004ece:	e02e      	b.n	8004f2e <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	2b03      	cmp	r3, #3
 8004ed4:	d10c      	bne.n	8004ef0 <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 8004ed6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004eda:	f023 0307 	bic.w	r3, r3, #7
 8004ede:	b25b      	sxtb	r3, r3
 8004ee0:	f043 0303 	orr.w	r3, r3, #3
 8004ee4:	b25b      	sxtb	r3, r3
 8004ee6:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2203      	movs	r2, #3
 8004eec:	61da      	str	r2, [r3, #28]
 8004eee:	e01e      	b.n	8004f2e <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	2b05      	cmp	r3, #5
 8004ef4:	d10c      	bne.n	8004f10 <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 8004ef6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004efa:	f023 0307 	bic.w	r3, r3, #7
 8004efe:	b25b      	sxtb	r3, r3
 8004f00:	f043 0305 	orr.w	r3, r3, #5
 8004f04:	b25b      	sxtb	r3, r3
 8004f06:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2205      	movs	r2, #5
 8004f0c:	61da      	str	r2, [r3, #28]
 8004f0e:	e00e      	b.n	8004f2e <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	2b06      	cmp	r3, #6
 8004f14:	d10b      	bne.n	8004f2e <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 8004f16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f1a:	f023 0307 	bic.w	r3, r3, #7
 8004f1e:	b25b      	sxtb	r3, r3
 8004f20:	f043 0306 	orr.w	r3, r3, #6
 8004f24:	b25b      	sxtb	r3, r3
 8004f26:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2206      	movs	r2, #6
 8004f2c:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8004f2e:	7bfb      	ldrb	r3, [r7, #15]
 8004f30:	461a      	mov	r2, r3
 8004f32:	2101      	movs	r1, #1
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f000 f966 	bl	8005206 <LoRa_write>
	//HAL_Delay(10);
}
 8004f3a:	bf00      	nop
 8004f3c:	3710      	adds	r7, #16
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}

08004f42 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b084      	sub	sp, #16
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	60f8      	str	r0, [r7, #12]
 8004f4a:	60b9      	str	r1, [r7, #8]
 8004f4c:	603b      	str	r3, [r7, #0]
 8004f4e:	4613      	mov	r3, r2
 8004f50:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6818      	ldr	r0, [r3, #0]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	889b      	ldrh	r3, [r3, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	f7fd f9cf 	bl	8002300 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6998      	ldr	r0, [r3, #24]
 8004f66:	88fa      	ldrh	r2, [r7, #6]
 8004f68:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004f6c:	68b9      	ldr	r1, [r7, #8]
 8004f6e:	f7fd fec5 	bl	8002cfc <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8004f72:	bf00      	nop
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	699b      	ldr	r3, [r3, #24]
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f7fe faae 	bl	80034da <HAL_SPI_GetState>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d1f7      	bne.n	8004f74 <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6998      	ldr	r0, [r3, #24]
 8004f88:	8b3a      	ldrh	r2, [r7, #24]
 8004f8a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004f8e:	6839      	ldr	r1, [r7, #0]
 8004f90:	f7fd fff0 	bl	8002f74 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8004f94:	bf00      	nop
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f7fe fa9d 	bl	80034da <HAL_SPI_GetState>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d1f7      	bne.n	8004f96 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6818      	ldr	r0, [r3, #0]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	889b      	ldrh	r3, [r3, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	f7fd f9a5 	bl	8002300 <HAL_GPIO_WritePin>
}
 8004fb6:	bf00      	nop
 8004fb8:	3710      	adds	r7, #16
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}

08004fbe <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b084      	sub	sp, #16
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	60f8      	str	r0, [r7, #12]
 8004fc6:	60b9      	str	r1, [r7, #8]
 8004fc8:	603b      	str	r3, [r7, #0]
 8004fca:	4613      	mov	r3, r2
 8004fcc:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6818      	ldr	r0, [r3, #0]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	889b      	ldrh	r3, [r3, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	4619      	mov	r1, r3
 8004fda:	f7fd f991 	bl	8002300 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6998      	ldr	r0, [r3, #24]
 8004fe2:	88fa      	ldrh	r2, [r7, #6]
 8004fe4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004fe8:	68b9      	ldr	r1, [r7, #8]
 8004fea:	f7fd fe87 	bl	8002cfc <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8004fee:	bf00      	nop
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	699b      	ldr	r3, [r3, #24]
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f7fe fa70 	bl	80034da <HAL_SPI_GetState>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d1f7      	bne.n	8004ff0 <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6998      	ldr	r0, [r3, #24]
 8005004:	8b3a      	ldrh	r2, [r7, #24]
 8005006:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800500a:	6839      	ldr	r1, [r7, #0]
 800500c:	f7fd fe76 	bl	8002cfc <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8005010:	bf00      	nop
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	699b      	ldr	r3, [r3, #24]
 8005016:	4618      	mov	r0, r3
 8005018:	f7fe fa5f 	bl	80034da <HAL_SPI_GetState>
 800501c:	4603      	mov	r3, r0
 800501e:	2b01      	cmp	r3, #1
 8005020:	d1f7      	bne.n	8005012 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6818      	ldr	r0, [r3, #0]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	889b      	ldrh	r3, [r3, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	4619      	mov	r1, r3
 800502e:	f7fd f967 	bl	8002300 <HAL_GPIO_WritePin>
}
 8005032:	bf00      	nop
 8005034:	3710      	adds	r7, #16
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}

0800503a <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 800503a:	b580      	push	{r7, lr}
 800503c:	b084      	sub	sp, #16
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
 8005042:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	04db      	lsls	r3, r3, #19
 8005048:	115b      	asrs	r3, r3, #5
 800504a:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	0c1b      	lsrs	r3, r3, #16
 8005050:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 8005052:	7afb      	ldrb	r3, [r7, #11]
 8005054:	461a      	mov	r2, r3
 8005056:	2106      	movs	r1, #6
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f000 f8d4 	bl	8005206 <LoRa_write>
	HAL_Delay(5);
 800505e:	2005      	movs	r0, #5
 8005060:	f7fc fe16 	bl	8001c90 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	0a1b      	lsrs	r3, r3, #8
 8005068:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 800506a:	7afb      	ldrb	r3, [r7, #11]
 800506c:	461a      	mov	r2, r3
 800506e:	2107      	movs	r1, #7
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 f8c8 	bl	8005206 <LoRa_write>
	HAL_Delay(5);
 8005076:	2005      	movs	r0, #5
 8005078:	f7fc fe0a 	bl	8001c90 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 8005080:	7afb      	ldrb	r3, [r7, #11]
 8005082:	461a      	mov	r2, r3
 8005084:	2108      	movs	r1, #8
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 f8bd 	bl	8005206 <LoRa_write>
	HAL_Delay(5);
 800508c:	2005      	movs	r0, #5
 800508e:	f7fc fdff 	bl	8001c90 <HAL_Delay>
}
 8005092:	bf00      	nop
 8005094:	3710      	adds	r7, #16
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}

0800509a <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 800509a:	b580      	push	{r7, lr}
 800509c:	b084      	sub	sp, #16
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
 80050a2:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	2b0c      	cmp	r3, #12
 80050a8:	dd01      	ble.n	80050ae <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 80050aa:	230c      	movs	r3, #12
 80050ac:	603b      	str	r3, [r7, #0]
	if(SF<7)
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	2b06      	cmp	r3, #6
 80050b2:	dc01      	bgt.n	80050b8 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 80050b4:	2307      	movs	r3, #7
 80050b6:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 80050b8:	211e      	movs	r1, #30
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 f889 	bl	80051d2 <LoRa_read>
 80050c0:	4603      	mov	r3, r0
 80050c2:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 80050c4:	200a      	movs	r0, #10
 80050c6:	f7fc fde3 	bl	8001c90 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	011b      	lsls	r3, r3, #4
 80050d0:	b2da      	uxtb	r2, r3
 80050d2:	7bfb      	ldrb	r3, [r7, #15]
 80050d4:	f003 030f 	and.w	r3, r3, #15
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	4413      	add	r3, r2
 80050dc:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 80050de:	7bbb      	ldrb	r3, [r7, #14]
 80050e0:	461a      	mov	r2, r3
 80050e2:	211e      	movs	r1, #30
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f000 f88e 	bl	8005206 <LoRa_write>
	HAL_Delay(10);
 80050ea:	200a      	movs	r0, #10
 80050ec:	f7fc fdd0 	bl	8001c90 <HAL_Delay>
}
 80050f0:	bf00      	nop
 80050f2:	3710      	adds	r7, #16
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power e.g POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b082      	sub	sp, #8
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	460b      	mov	r3, r1
 8005102:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 8005104:	78fb      	ldrb	r3, [r7, #3]
 8005106:	461a      	mov	r2, r3
 8005108:	2109      	movs	r1, #9
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 f87b 	bl	8005206 <LoRa_write>
	HAL_Delay(10);
 8005110:	200a      	movs	r0, #10
 8005112:	f7fc fdbd 	bl	8001c90 <HAL_Delay>
}
 8005116:	bf00      	nop
 8005118:	3708      	adds	r7, #8
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
	...

08005120 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	460b      	mov	r3, r1
 800512a:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 800512c:	2300      	movs	r3, #0
 800512e:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8005130:	78fb      	ldrb	r3, [r7, #3]
 8005132:	2b2c      	cmp	r3, #44	; 0x2c
 8005134:	d801      	bhi.n	800513a <LoRa_setOCP+0x1a>
		current = 45;
 8005136:	232d      	movs	r3, #45	; 0x2d
 8005138:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 800513a:	78fb      	ldrb	r3, [r7, #3]
 800513c:	2bf0      	cmp	r3, #240	; 0xf0
 800513e:	d901      	bls.n	8005144 <LoRa_setOCP+0x24>
		current = 240;
 8005140:	23f0      	movs	r3, #240	; 0xf0
 8005142:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 8005144:	78fb      	ldrb	r3, [r7, #3]
 8005146:	2b78      	cmp	r3, #120	; 0x78
 8005148:	d809      	bhi.n	800515e <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 800514a:	78fb      	ldrb	r3, [r7, #3]
 800514c:	3b2d      	subs	r3, #45	; 0x2d
 800514e:	4a12      	ldr	r2, [pc, #72]	; (8005198 <LoRa_setOCP+0x78>)
 8005150:	fb82 1203 	smull	r1, r2, r2, r3
 8005154:	1052      	asrs	r2, r2, #1
 8005156:	17db      	asrs	r3, r3, #31
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	73fb      	strb	r3, [r7, #15]
 800515c:	e00b      	b.n	8005176 <LoRa_setOCP+0x56>
	else if(current <= 240)
 800515e:	78fb      	ldrb	r3, [r7, #3]
 8005160:	2bf0      	cmp	r3, #240	; 0xf0
 8005162:	d808      	bhi.n	8005176 <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 8005164:	78fb      	ldrb	r3, [r7, #3]
 8005166:	331e      	adds	r3, #30
 8005168:	4a0b      	ldr	r2, [pc, #44]	; (8005198 <LoRa_setOCP+0x78>)
 800516a:	fb82 1203 	smull	r1, r2, r2, r3
 800516e:	1092      	asrs	r2, r2, #2
 8005170:	17db      	asrs	r3, r3, #31
 8005172:	1ad3      	subs	r3, r2, r3
 8005174:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 8005176:	7bfb      	ldrb	r3, [r7, #15]
 8005178:	3320      	adds	r3, #32
 800517a:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 800517c:	7bfb      	ldrb	r3, [r7, #15]
 800517e:	461a      	mov	r2, r3
 8005180:	210b      	movs	r1, #11
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 f83f 	bl	8005206 <LoRa_write>
	HAL_Delay(10);
 8005188:	200a      	movs	r0, #10
 800518a:	f7fc fd81 	bl	8001c90 <HAL_Delay>
}
 800518e:	bf00      	nop
 8005190:	3710      	adds	r7, #16
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	66666667 	.word	0x66666667

0800519c <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 80051a4:	211e      	movs	r1, #30
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 f813 	bl	80051d2 <LoRa_read>
 80051ac:	4603      	mov	r3, r0
 80051ae:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 80051b0:	7bfb      	ldrb	r3, [r7, #15]
 80051b2:	f043 0307 	orr.w	r3, r3, #7
 80051b6:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 80051b8:	7bbb      	ldrb	r3, [r7, #14]
 80051ba:	461a      	mov	r2, r3
 80051bc:	211e      	movs	r1, #30
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 f821 	bl	8005206 <LoRa_write>
	HAL_Delay(10);
 80051c4:	200a      	movs	r0, #10
 80051c6:	f7fc fd63 	bl	8001c90 <HAL_Delay>
}
 80051ca:	bf00      	nop
 80051cc:	3710      	adds	r7, #16
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 80051d2:	b580      	push	{r7, lr}
 80051d4:	b086      	sub	sp, #24
 80051d6:	af02      	add	r7, sp, #8
 80051d8:	6078      	str	r0, [r7, #4]
 80051da:	460b      	mov	r3, r1
 80051dc:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 80051de:	78fb      	ldrb	r3, [r7, #3]
 80051e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 80051e8:	f107 030f 	add.w	r3, r7, #15
 80051ec:	f107 010e 	add.w	r1, r7, #14
 80051f0:	2201      	movs	r2, #1
 80051f2:	9200      	str	r2, [sp, #0]
 80051f4:	2201      	movs	r2, #1
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f7ff fea3 	bl	8004f42 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 80051fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3710      	adds	r7, #16
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}

08005206 <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8005206:	b580      	push	{r7, lr}
 8005208:	b086      	sub	sp, #24
 800520a:	af02      	add	r7, sp, #8
 800520c:	6078      	str	r0, [r7, #4]
 800520e:	460b      	mov	r3, r1
 8005210:	70fb      	strb	r3, [r7, #3]
 8005212:	4613      	mov	r3, r2
 8005214:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8005216:	78fb      	ldrb	r3, [r7, #3]
 8005218:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800521c:	b2db      	uxtb	r3, r3
 800521e:	73bb      	strb	r3, [r7, #14]
	data = value;
 8005220:	78bb      	ldrb	r3, [r7, #2]
 8005222:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8005224:	f107 030f 	add.w	r3, r7, #15
 8005228:	f107 010e 	add.w	r1, r7, #14
 800522c:	2201      	movs	r2, #1
 800522e:	9200      	str	r2, [sp, #0]
 8005230:	2201      	movs	r2, #1
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f7ff fec3 	bl	8004fbe <LoRa_writeReg>
	//HAL_Delay(5);
}
 8005238:	bf00      	nop
 800523a:	3710      	adds	r7, #16
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 8005240:	b580      	push	{r7, lr}
 8005242:	b086      	sub	sp, #24
 8005244:	af00      	add	r7, sp, #0
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	607a      	str	r2, [r7, #4]
 800524a:	461a      	mov	r2, r3
 800524c:	460b      	mov	r3, r1
 800524e:	72fb      	strb	r3, [r7, #11]
 8005250:	4613      	mov	r3, r2
 8005252:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 8005254:	7afb      	ldrb	r3, [r7, #11]
 8005256:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800525a:	b2db      	uxtb	r3, r3
 800525c:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6818      	ldr	r0, [r3, #0]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	889b      	ldrh	r3, [r3, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	4619      	mov	r1, r3
 800526a:	f7fd f849 	bl	8002300 <HAL_GPIO_WritePin>
	//say module thai I want to write in RegFiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6998      	ldr	r0, [r3, #24]
 8005272:	f107 0117 	add.w	r1, r7, #23
 8005276:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800527a:	2201      	movs	r2, #1
 800527c:	f7fd fd3e 	bl	8002cfc <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8005280:	bf00      	nop
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	699b      	ldr	r3, [r3, #24]
 8005286:	4618      	mov	r0, r3
 8005288:	f7fe f927 	bl	80034da <HAL_SPI_GetState>
 800528c:	4603      	mov	r3, r0
 800528e:	2b01      	cmp	r3, #1
 8005290:	d1f7      	bne.n	8005282 <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6998      	ldr	r0, [r3, #24]
 8005296:	7abb      	ldrb	r3, [r7, #10]
 8005298:	b29a      	uxth	r2, r3
 800529a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800529e:	6879      	ldr	r1, [r7, #4]
 80052a0:	f7fd fd2c 	bl	8002cfc <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80052a4:	bf00      	nop
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	4618      	mov	r0, r3
 80052ac:	f7fe f915 	bl	80034da <HAL_SPI_GetState>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d1f7      	bne.n	80052a6 <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6818      	ldr	r0, [r3, #0]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	889b      	ldrh	r3, [r3, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	4619      	mov	r1, r3
 80052c2:	f7fd f81d 	bl	8002300 <HAL_GPIO_WritePin>
}
 80052c6:	bf00      	nop
 80052c8:	3718      	adds	r7, #24
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}

080052ce <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 80052ce:	b480      	push	{r7}
 80052d0:	b083      	sub	sp, #12
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]

	return 1;
 80052d6:	2301      	movs	r3, #1
}
 80052d8:	4618      	mov	r0, r3
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	bc80      	pop	{r7}
 80052e0:	4770      	bx	lr

080052e2 <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 80052e2:	b580      	push	{r7, lr}
 80052e4:	b086      	sub	sp, #24
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	60f8      	str	r0, [r7, #12]
 80052ea:	60b9      	str	r1, [r7, #8]
 80052ec:	4611      	mov	r1, r2
 80052ee:	461a      	mov	r2, r3
 80052f0:	460b      	mov	r3, r1
 80052f2:	71fb      	strb	r3, [r7, #7]
 80052f4:	4613      	mov	r3, r2
 80052f6:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	69db      	ldr	r3, [r3, #28]
 80052fc:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 80052fe:	2101      	movs	r1, #1
 8005300:	68f8      	ldr	r0, [r7, #12]
 8005302:	f7ff fdbd 	bl	8004e80 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 8005306:	210e      	movs	r1, #14
 8005308:	68f8      	ldr	r0, [r7, #12]
 800530a:	f7ff ff62 	bl	80051d2 <LoRa_read>
 800530e:	4603      	mov	r3, r0
 8005310:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8005312:	7cfb      	ldrb	r3, [r7, #19]
 8005314:	461a      	mov	r2, r3
 8005316:	210d      	movs	r1, #13
 8005318:	68f8      	ldr	r0, [r7, #12]
 800531a:	f7ff ff74 	bl	8005206 <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 800531e:	79fb      	ldrb	r3, [r7, #7]
 8005320:	461a      	mov	r2, r3
 8005322:	2122      	movs	r1, #34	; 0x22
 8005324:	68f8      	ldr	r0, [r7, #12]
 8005326:	f7ff ff6e 	bl	8005206 <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 800532a:	79fb      	ldrb	r3, [r7, #7]
 800532c:	68ba      	ldr	r2, [r7, #8]
 800532e:	2100      	movs	r1, #0
 8005330:	68f8      	ldr	r0, [r7, #12]
 8005332:	f7ff ff85 	bl	8005240 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 8005336:	2103      	movs	r1, #3
 8005338:	68f8      	ldr	r0, [r7, #12]
 800533a:	f7ff fda1 	bl	8004e80 <LoRa_gotoMode>
//	read = LoRa_read(_LoRa,RegOpMode);
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 800533e:	2112      	movs	r1, #18
 8005340:	68f8      	ldr	r0, [r7, #12]
 8005342:	f7ff ff46 	bl	80051d2 <LoRa_read>
 8005346:	4603      	mov	r3, r0
 8005348:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 800534a:	7cfb      	ldrb	r3, [r7, #19]
 800534c:	f003 0308 	and.w	r3, r3, #8
 8005350:	2b00      	cmp	r3, #0
 8005352:	d00a      	beq.n	800536a <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8005354:	22ff      	movs	r2, #255	; 0xff
 8005356:	2112      	movs	r1, #18
 8005358:	68f8      	ldr	r0, [r7, #12]
 800535a:	f7ff ff54 	bl	8005206 <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 800535e:	6979      	ldr	r1, [r7, #20]
 8005360:	68f8      	ldr	r0, [r7, #12]
 8005362:	f7ff fd8d 	bl	8004e80 <LoRa_gotoMode>
			return 1;
 8005366:	2301      	movs	r3, #1
 8005368:	e00f      	b.n	800538a <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 800536a:	88bb      	ldrh	r3, [r7, #4]
 800536c:	3b01      	subs	r3, #1
 800536e:	80bb      	strh	r3, [r7, #4]
 8005370:	88bb      	ldrh	r3, [r7, #4]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d105      	bne.n	8005382 <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 8005376:	6979      	ldr	r1, [r7, #20]
 8005378:	68f8      	ldr	r0, [r7, #12]
 800537a:	f7ff fd81 	bl	8004e80 <LoRa_gotoMode>
				return 0;
 800537e:	2300      	movs	r3, #0
 8005380:	e003      	b.n	800538a <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 8005382:	2001      	movs	r0, #1
 8005384:	f7fc fc84 	bl	8001c90 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 8005388:	e7d9      	b.n	800533e <LoRa_transmit+0x5c>
	}

}
 800538a:	4618      	mov	r0, r3
 800538c:	3718      	adds	r7, #24
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}

08005392 <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 8005392:	b580      	push	{r7, lr}
 8005394:	b082      	sub	sp, #8
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 800539a:	2105      	movs	r1, #5
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f7ff fd6f 	bl	8004e80 <LoRa_gotoMode>
}
 80053a2:	bf00      	nop
 80053a4:	3708      	adds	r7, #8
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}

080053aa <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 80053aa:	b580      	push	{r7, lr}
 80053ac:	b084      	sub	sp, #16
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f7ff ff8b 	bl	80052ce <LoRa_isvalid>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	f000 8093 	beq.w	80054e6 <LoRa_init+0x13c>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 80053c0:	2100      	movs	r1, #0
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f7ff fd5c 	bl	8004e80 <LoRa_gotoMode>
			HAL_Delay(10);
 80053c8:	200a      	movs	r0, #10
 80053ca:	f7fc fc61 	bl	8001c90 <HAL_Delay>

		// turn on lora mode:
			read = LoRa_read(_LoRa, RegOpMode);
 80053ce:	2101      	movs	r1, #1
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f7ff fefe 	bl	80051d2 <LoRa_read>
 80053d6:	4603      	mov	r3, r0
 80053d8:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 80053da:	200a      	movs	r0, #10
 80053dc:	f7fc fc58 	bl	8001c90 <HAL_Delay>
			data = read | 0x80;
 80053e0:	7bfb      	ldrb	r3, [r7, #15]
 80053e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80053e6:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 80053e8:	7bbb      	ldrb	r3, [r7, #14]
 80053ea:	461a      	mov	r2, r3
 80053ec:	2101      	movs	r1, #1
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f7ff ff09 	bl	8005206 <LoRa_write>
			HAL_Delay(100);
 80053f4:	2064      	movs	r0, #100	; 0x64
 80053f6:	f7fc fc4b 	bl	8001c90 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a1b      	ldr	r3, [r3, #32]
 80053fe:	4619      	mov	r1, r3
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f7ff fe1a 	bl	800503a <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800540c:	4619      	mov	r1, r3
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f7ff fe72 	bl	80050f8 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800541a:	4619      	mov	r1, r3
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f7ff fe7f 	bl	8005120 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8005422:	2223      	movs	r2, #35	; 0x23
 8005424:	210c      	movs	r1, #12
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f7ff feed 	bl	8005206 <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f7ff feb5 	bl	800519c <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005438:	4619      	mov	r1, r3
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f7ff fe2d 	bl	800509a <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8005440:	22ff      	movs	r2, #255	; 0xff
 8005442:	211f      	movs	r1, #31
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f7ff fede 	bl	8005206 <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 800544a:	2300      	movs	r3, #0
 800544c:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005454:	011b      	lsls	r3, r3, #4
 8005456:	b2da      	uxtb	r2, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800545e:	005b      	lsls	r3, r3, #1
 8005460:	b2db      	uxtb	r3, r3
 8005462:	4413      	add	r3, r2
 8005464:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8005466:	7bbb      	ldrb	r3, [r7, #14]
 8005468:	461a      	mov	r2, r3
 800546a:	211d      	movs	r1, #29
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f7ff feca 	bl	8005206 <LoRa_write>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005476:	0a1b      	lsrs	r3, r3, #8
 8005478:	b29b      	uxth	r3, r3
 800547a:	b2db      	uxtb	r3, r3
 800547c:	461a      	mov	r2, r3
 800547e:	2120      	movs	r1, #32
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f7ff fec0 	bl	8005206 <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800548a:	b2db      	uxtb	r3, r3
 800548c:	461a      	mov	r2, r3
 800548e:	2121      	movs	r1, #33	; 0x21
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f7ff feb8 	bl	8005206 <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8005496:	2140      	movs	r1, #64	; 0x40
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f7ff fe9a 	bl	80051d2 <LoRa_read>
 800549e:	4603      	mov	r3, r0
 80054a0:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 80054a2:	7bfb      	ldrb	r3, [r7, #15]
 80054a4:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 80054a8:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 80054aa:	7bbb      	ldrb	r3, [r7, #14]
 80054ac:	461a      	mov	r2, r3
 80054ae:	2140      	movs	r1, #64	; 0x40
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f7ff fea8 	bl	8005206 <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 80054b6:	2101      	movs	r1, #1
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f7ff fce1 	bl	8004e80 <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2201      	movs	r2, #1
 80054c2:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 80054c4:	200a      	movs	r0, #10
 80054c6:	f7fc fbe3 	bl	8001c90 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 80054ca:	2142      	movs	r1, #66	; 0x42
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f7ff fe80 	bl	80051d2 <LoRa_read>
 80054d2:	4603      	mov	r3, r0
 80054d4:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 80054d6:	7bfb      	ldrb	r3, [r7, #15]
 80054d8:	2b12      	cmp	r3, #18
 80054da:	d101      	bne.n	80054e0 <LoRa_init+0x136>
				return LORA_OK;
 80054dc:	23c8      	movs	r3, #200	; 0xc8
 80054de:	e004      	b.n	80054ea <LoRa_init+0x140>
			else
				return LORA_NOT_FOUND;
 80054e0:	f44f 73ca 	mov.w	r3, #404	; 0x194
 80054e4:	e001      	b.n	80054ea <LoRa_init+0x140>
	}
	else {
		return LORA_UNAVAILABLE;
 80054e6:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3710      	adds	r7, #16
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
	...

080054f4 <crc16>:

extern UART_HandleTypeDef huart2;


uint16_t crc16(uint8_t *buffer, uint16_t buffer_length)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	460b      	mov	r3, r1
 80054fe:	807b      	strh	r3, [r7, #2]
    uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 8005500:	23ff      	movs	r3, #255	; 0xff
 8005502:	73fb      	strb	r3, [r7, #15]
    uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 8005504:	23ff      	movs	r3, #255	; 0xff
 8005506:	73bb      	strb	r3, [r7, #14]
    unsigned int i; /* will index into CRC lookup */

    /* pass through message buffer */
    while (buffer_length--) {
 8005508:	e013      	b.n	8005532 <crc16+0x3e>
        i = crc_lo ^ *buffer++; /* calculate the CRC  */
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	1c5a      	adds	r2, r3, #1
 800550e:	607a      	str	r2, [r7, #4]
 8005510:	781a      	ldrb	r2, [r3, #0]
 8005512:	7bbb      	ldrb	r3, [r7, #14]
 8005514:	4053      	eors	r3, r2
 8005516:	b2db      	uxtb	r3, r3
 8005518:	60bb      	str	r3, [r7, #8]
        crc_lo = crc_hi ^ table_crc_hi[i];
 800551a:	4a0f      	ldr	r2, [pc, #60]	; (8005558 <crc16+0x64>)
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	4413      	add	r3, r2
 8005520:	781a      	ldrb	r2, [r3, #0]
 8005522:	7bfb      	ldrb	r3, [r7, #15]
 8005524:	4053      	eors	r3, r2
 8005526:	73bb      	strb	r3, [r7, #14]
        crc_hi = table_crc_lo[i];
 8005528:	4a0c      	ldr	r2, [pc, #48]	; (800555c <crc16+0x68>)
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	4413      	add	r3, r2
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	73fb      	strb	r3, [r7, #15]
    while (buffer_length--) {
 8005532:	887b      	ldrh	r3, [r7, #2]
 8005534:	1e5a      	subs	r2, r3, #1
 8005536:	807a      	strh	r2, [r7, #2]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d1e6      	bne.n	800550a <crc16+0x16>
    }

    return (crc_hi << 8 | crc_lo);
 800553c:	7bfb      	ldrb	r3, [r7, #15]
 800553e:	021b      	lsls	r3, r3, #8
 8005540:	b21a      	sxth	r2, r3
 8005542:	7bbb      	ldrb	r3, [r7, #14]
 8005544:	b21b      	sxth	r3, r3
 8005546:	4313      	orrs	r3, r2
 8005548:	b21b      	sxth	r3, r3
 800554a:	b29b      	uxth	r3, r3
}
 800554c:	4618      	mov	r0, r3
 800554e:	3714      	adds	r7, #20
 8005550:	46bd      	mov	sp, r7
 8005552:	bc80      	pop	{r7}
 8005554:	4770      	bx	lr
 8005556:	bf00      	nop
 8005558:	0800d978 	.word	0x0800d978
 800555c:	0800da78 	.word	0x0800da78

08005560 <checkcrc16>:

// buffer: data nhan duoc de kiem tra checksum
// index: size cua data
// Vd truyen vao data có 7 byte: index = 7
uint8_t checkcrc16(uint8_t *buffer, uint8_t index)
{
 8005560:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005564:	b089      	sub	sp, #36	; 0x24
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
 800556a:	460b      	mov	r3, r1
 800556c:	70fb      	strb	r3, [r7, #3]
 800556e:	466b      	mov	r3, sp
 8005570:	461e      	mov	r6, r3
	uint8_t transform[index], a;
 8005572:	78f9      	ldrb	r1, [r7, #3]
 8005574:	460b      	mov	r3, r1
 8005576:	3b01      	subs	r3, #1
 8005578:	617b      	str	r3, [r7, #20]
 800557a:	b2cb      	uxtb	r3, r1
 800557c:	2200      	movs	r2, #0
 800557e:	4698      	mov	r8, r3
 8005580:	4691      	mov	r9, r2
 8005582:	f04f 0200 	mov.w	r2, #0
 8005586:	f04f 0300 	mov.w	r3, #0
 800558a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800558e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005592:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005596:	b2cb      	uxtb	r3, r1
 8005598:	2200      	movs	r2, #0
 800559a:	461c      	mov	r4, r3
 800559c:	4615      	mov	r5, r2
 800559e:	f04f 0200 	mov.w	r2, #0
 80055a2:	f04f 0300 	mov.w	r3, #0
 80055a6:	00eb      	lsls	r3, r5, #3
 80055a8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055ac:	00e2      	lsls	r2, r4, #3
 80055ae:	460b      	mov	r3, r1
 80055b0:	3307      	adds	r3, #7
 80055b2:	08db      	lsrs	r3, r3, #3
 80055b4:	00db      	lsls	r3, r3, #3
 80055b6:	ebad 0d03 	sub.w	sp, sp, r3
 80055ba:	466b      	mov	r3, sp
 80055bc:	3300      	adds	r3, #0
 80055be:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < index - 2; i++)
 80055c0:	2300      	movs	r3, #0
 80055c2:	61fb      	str	r3, [r7, #28]
 80055c4:	e00b      	b.n	80055de <checkcrc16+0x7e>
	{
		transform[i] = buffer[i];
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	4413      	add	r3, r2
 80055cc:	7819      	ldrb	r1, [r3, #0]
 80055ce:	693a      	ldr	r2, [r7, #16]
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	4413      	add	r3, r2
 80055d4:	460a      	mov	r2, r1
 80055d6:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < index - 2; i++)
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	3301      	adds	r3, #1
 80055dc:	61fb      	str	r3, [r7, #28]
 80055de:	78fb      	ldrb	r3, [r7, #3]
 80055e0:	3b02      	subs	r3, #2
 80055e2:	69fa      	ldr	r2, [r7, #28]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	dbee      	blt.n	80055c6 <checkcrc16+0x66>
	}
	uint16_t crc = crc16(transform, index - 2);
 80055e8:	78fb      	ldrb	r3, [r7, #3]
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	3b02      	subs	r3, #2
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	4619      	mov	r1, r3
 80055f2:	6938      	ldr	r0, [r7, #16]
 80055f4:	f7ff ff7e 	bl	80054f4 <crc16>
 80055f8:	4603      	mov	r3, r0
 80055fa:	81fb      	strh	r3, [r7, #14]
	transform[index - 2] = crc&0xFF;   // CRC LOW
 80055fc:	78fb      	ldrb	r3, [r7, #3]
 80055fe:	3b02      	subs	r3, #2
 8005600:	89fa      	ldrh	r2, [r7, #14]
 8005602:	b2d1      	uxtb	r1, r2
 8005604:	693a      	ldr	r2, [r7, #16]
 8005606:	54d1      	strb	r1, [r2, r3]
	transform[index - 1] = (crc>>8)&0xFF;  // CRC HIGH
 8005608:	89fb      	ldrh	r3, [r7, #14]
 800560a:	0a1b      	lsrs	r3, r3, #8
 800560c:	b29a      	uxth	r2, r3
 800560e:	78fb      	ldrb	r3, [r7, #3]
 8005610:	3b01      	subs	r3, #1
 8005612:	b2d1      	uxtb	r1, r2
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	54d1      	strb	r1, [r2, r3]
	if ((transform[index - 2] == buffer[index - 2]) && (transform[index - 2] == buffer[index - 2]))
 8005618:	78fb      	ldrb	r3, [r7, #3]
 800561a:	3b02      	subs	r3, #2
 800561c:	693a      	ldr	r2, [r7, #16]
 800561e:	5cd2      	ldrb	r2, [r2, r3]
 8005620:	78fb      	ldrb	r3, [r7, #3]
 8005622:	3b02      	subs	r3, #2
 8005624:	6879      	ldr	r1, [r7, #4]
 8005626:	440b      	add	r3, r1
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	429a      	cmp	r2, r3
 800562c:	d10d      	bne.n	800564a <checkcrc16+0xea>
 800562e:	78fb      	ldrb	r3, [r7, #3]
 8005630:	3b02      	subs	r3, #2
 8005632:	693a      	ldr	r2, [r7, #16]
 8005634:	5cd2      	ldrb	r2, [r2, r3]
 8005636:	78fb      	ldrb	r3, [r7, #3]
 8005638:	3b02      	subs	r3, #2
 800563a:	6879      	ldr	r1, [r7, #4]
 800563c:	440b      	add	r3, r1
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	429a      	cmp	r2, r3
 8005642:	d102      	bne.n	800564a <checkcrc16+0xea>
	{
		a = 1;
 8005644:	2301      	movs	r3, #1
 8005646:	76fb      	strb	r3, [r7, #27]
 8005648:	e001      	b.n	800564e <checkcrc16+0xee>
	}
	else
	{
		a = 0;
 800564a:	2300      	movs	r3, #0
 800564c:	76fb      	strb	r3, [r7, #27]
	}
	return a;
 800564e:	7efb      	ldrb	r3, [r7, #27]
 8005650:	46b5      	mov	sp, r6
}
 8005652:	4618      	mov	r0, r3
 8005654:	3724      	adds	r7, #36	; 0x24
 8005656:	46bd      	mov	sp, r7
 8005658:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800565c <unpack754_32>:
    return f;
}

// Chuyen float 32 bit sang so thuc
float unpack754_32( uint32_t floatingToIntValue )
{
 800565c:	b480      	push	{r7}
 800565e:	b089      	sub	sp, #36	; 0x24
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
	 myfloat ieee754;
	 unsigned int mantissa = 0;
 8005664:	2300      	movs	r3, #0
 8005666:	61fb      	str	r3, [r7, #28]
	 unsigned int exponent = 0 ;
 8005668:	2300      	movs	r3, #0
 800566a:	61bb      	str	r3, [r7, #24]
	 unsigned int sign = 0;
 800566c:	2300      	movs	r3, #0
 800566e:	60fb      	str	r3, [r7, #12]

	 sign = NTH_BIT(floatingToIntValue, 31);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	0fdb      	lsrs	r3, r3, #31
 8005674:	60fb      	str	r3, [r7, #12]
	 for( int ix=0; ix<8; ix++)
 8005676:	2300      	movs	r3, #0
 8005678:	617b      	str	r3, [r7, #20]
 800567a:	e00e      	b.n	800569a <unpack754_32+0x3e>
	   exponent = (exponent | (NTH_BIT(floatingToIntValue, (30-ix))))<<1;
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	f1c3 031e 	rsb	r3, r3, #30
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	fa22 f303 	lsr.w	r3, r2, r3
 8005688:	f003 0201 	and.w	r2, r3, #1
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	4313      	orrs	r3, r2
 8005690:	005b      	lsls	r3, r3, #1
 8005692:	61bb      	str	r3, [r7, #24]
	 for( int ix=0; ix<8; ix++)
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	3301      	adds	r3, #1
 8005698:	617b      	str	r3, [r7, #20]
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	2b07      	cmp	r3, #7
 800569e:	dded      	ble.n	800567c <unpack754_32+0x20>
	 exponent = exponent>>1;
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	085b      	lsrs	r3, r3, #1
 80056a4:	61bb      	str	r3, [r7, #24]
	 for( int ix=0; ix<23; ix++)
 80056a6:	2300      	movs	r3, #0
 80056a8:	613b      	str	r3, [r7, #16]
 80056aa:	e00e      	b.n	80056ca <unpack754_32+0x6e>
	   mantissa = (mantissa | (NTH_BIT(floatingToIntValue, (22-ix))))<<1;
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	f1c3 0316 	rsb	r3, r3, #22
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	fa22 f303 	lsr.w	r3, r2, r3
 80056b8:	f003 0201 	and.w	r2, r3, #1
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	4313      	orrs	r3, r2
 80056c0:	005b      	lsls	r3, r3, #1
 80056c2:	61fb      	str	r3, [r7, #28]
	 for( int ix=0; ix<23; ix++)
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	3301      	adds	r3, #1
 80056c8:	613b      	str	r3, [r7, #16]
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	2b16      	cmp	r3, #22
 80056ce:	dded      	ble.n	80056ac <unpack754_32+0x50>
	 mantissa = mantissa >> 1;
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	085b      	lsrs	r3, r3, #1
 80056d4:	61fb      	str	r3, [r7, #28]

	 ieee754.raw.sign = sign;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f003 0301 	and.w	r3, r3, #1
 80056dc:	b2da      	uxtb	r2, r3
 80056de:	7afb      	ldrb	r3, [r7, #11]
 80056e0:	f362 13c7 	bfi	r3, r2, #7, #1
 80056e4:	72fb      	strb	r3, [r7, #11]
	 ieee754.raw.exponent = exponent;
 80056e6:	69bb      	ldr	r3, [r7, #24]
 80056e8:	b2da      	uxtb	r2, r3
 80056ea:	897b      	ldrh	r3, [r7, #10]
 80056ec:	f362 13ce 	bfi	r3, r2, #7, #8
 80056f0:	817b      	strh	r3, [r7, #10]
	 ieee754.raw.mantissa = mantissa;
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	f3c3 0216 	ubfx	r2, r3, #0, #23
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	f362 0316 	bfi	r3, r2, #0, #23
 80056fe:	60bb      	str	r3, [r7, #8]
	 return ieee754.f;
 8005700:	68bb      	ldr	r3, [r7, #8]
}
 8005702:	4618      	mov	r0, r3
 8005704:	3724      	adds	r7, #36	; 0x24
 8005706:	46bd      	mov	sp, r7
 8005708:	bc80      	pop	{r7}
 800570a:	4770      	bx	lr

0800570c <Send_Error_Status>:

/********************************************************************************************
 * ******************************************************************************************
 */
void Send_Error_Status(void)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
	uint8_t TxData[8];
	TxData[0] = 0xF0;  // slave address
 8005712:	23f0      	movs	r3, #240	; 0xf0
 8005714:	713b      	strb	r3, [r7, #4]
	TxData[1] = 0x03;  // Function code for Read Input Registers
 8005716:	2303      	movs	r3, #3
 8005718:	717b      	strb	r3, [r7, #5]

	TxData[2] = 0x02;
 800571a:	2302      	movs	r3, #2
 800571c:	71bb      	strb	r3, [r7, #6]
	TxData[3] = 0;
 800571e:	2300      	movs	r3, #0
 8005720:	71fb      	strb	r3, [r7, #7]
	// 0x0200: Error Status Address

	TxData[4] = 0;
 8005722:	2300      	movs	r3, #0
 8005724:	723b      	strb	r3, [r7, #8]
	TxData[5] = 0x01;
 8005726:	2301      	movs	r3, #1
 8005728:	727b      	strb	r3, [r7, #9]
	// no of registers to read will be 00000000 00000001 = 1 Registers = 2 Bytes

	uint16_t crc = crc16(TxData, 6);
 800572a:	1d3b      	adds	r3, r7, #4
 800572c:	2106      	movs	r1, #6
 800572e:	4618      	mov	r0, r3
 8005730:	f7ff fee0 	bl	80054f4 <crc16>
 8005734:	4603      	mov	r3, r0
 8005736:	81fb      	strh	r3, [r7, #14]
	TxData[6] = crc&0xFF;   // CRC LOW
 8005738:	89fb      	ldrh	r3, [r7, #14]
 800573a:	b2db      	uxtb	r3, r3
 800573c:	72bb      	strb	r3, [r7, #10]
	TxData[7] = (crc>>8)&0xFF;  // CRC HIGH
 800573e:	89fb      	ldrh	r3, [r7, #14]
 8005740:	0a1b      	lsrs	r3, r3, #8
 8005742:	b29b      	uxth	r3, r3
 8005744:	b2db      	uxtb	r3, r3
 8005746:	72fb      	strb	r3, [r7, #11]

	HAL_UART_Transmit(&huart2, TxData, 8, 1000);
 8005748:	1d39      	adds	r1, r7, #4
 800574a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800574e:	2208      	movs	r2, #8
 8005750:	4803      	ldr	r0, [pc, #12]	; (8005760 <Send_Error_Status+0x54>)
 8005752:	f7fe fc0e 	bl	8003f72 <HAL_UART_Transmit>
}
 8005756:	bf00      	nop
 8005758:	3710      	adds	r7, #16
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	200002a0 	.word	0x200002a0

08005764 <Receive_Error_Status>:
uint32_t Receive_Error_Status(uint16_t data)
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	4603      	mov	r3, r0
 800576c:	80fb      	strh	r3, [r7, #6]
	if (data == 0x01)
 800576e:	88fb      	ldrh	r3, [r7, #6]
 8005770:	2b01      	cmp	r3, #1
 8005772:	d102      	bne.n	800577a <Receive_Error_Status+0x16>
		return No_Error;
 8005774:	f240 73d1 	movw	r3, #2001	; 0x7d1
 8005778:	e001      	b.n	800577e <Receive_Error_Status+0x1a>
	else
		return Have_Errors;
 800577a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
}
 800577e:	4618      	mov	r0, r3
 8005780:	370c      	adds	r7, #12
 8005782:	46bd      	mov	sp, r7
 8005784:	bc80      	pop	{r7}
 8005786:	4770      	bx	lr

08005788 <Send_Error_Code>:

/********************************************************************************************
 * ******************************************************************************************
 */
void Send_Error_Code(void)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
	uint8_t TxData[8];
	TxData[0] = 0xF0;  // slave address
 800578e:	23f0      	movs	r3, #240	; 0xf0
 8005790:	713b      	strb	r3, [r7, #4]
	TxData[1] = 0x03;  // Function code for Read Input Registers
 8005792:	2303      	movs	r3, #3
 8005794:	717b      	strb	r3, [r7, #5]

	TxData[2] = 0x02;
 8005796:	2302      	movs	r3, #2
 8005798:	71bb      	strb	r3, [r7, #6]
	TxData[3] = 0x03;
 800579a:	2303      	movs	r3, #3
 800579c:	71fb      	strb	r3, [r7, #7]
	// 0x0203: Error Code

	TxData[4] = 0;
 800579e:	2300      	movs	r3, #0
 80057a0:	723b      	strb	r3, [r7, #8]
	TxData[5] = 0x02;
 80057a2:	2302      	movs	r3, #2
 80057a4:	727b      	strb	r3, [r7, #9]

	uint16_t crc = crc16(TxData, 6);
 80057a6:	1d3b      	adds	r3, r7, #4
 80057a8:	2106      	movs	r1, #6
 80057aa:	4618      	mov	r0, r3
 80057ac:	f7ff fea2 	bl	80054f4 <crc16>
 80057b0:	4603      	mov	r3, r0
 80057b2:	81fb      	strh	r3, [r7, #14]
	TxData[6] = crc&0xFF;   // CRC LOW
 80057b4:	89fb      	ldrh	r3, [r7, #14]
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	72bb      	strb	r3, [r7, #10]
	TxData[7] = (crc>>8)&0xFF;  // CRC HIGH
 80057ba:	89fb      	ldrh	r3, [r7, #14]
 80057bc:	0a1b      	lsrs	r3, r3, #8
 80057be:	b29b      	uxth	r3, r3
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	72fb      	strb	r3, [r7, #11]

	HAL_UART_Transmit(&huart2, TxData, 8, 1000);
 80057c4:	1d39      	adds	r1, r7, #4
 80057c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80057ca:	2208      	movs	r2, #8
 80057cc:	4803      	ldr	r0, [pc, #12]	; (80057dc <Send_Error_Code+0x54>)
 80057ce:	f7fe fbd0 	bl	8003f72 <HAL_UART_Transmit>
}
 80057d2:	bf00      	nop
 80057d4:	3710      	adds	r7, #16
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop
 80057dc:	200002a0 	.word	0x200002a0

080057e0 <Receive_Error_Code>:
uint32_t Receive_Error_Code(uint16_t data)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	4603      	mov	r3, r0
 80057e8:	80fb      	strh	r3, [r7, #6]
	if (data == 0)
 80057ea:	88fb      	ldrh	r3, [r7, #6]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d101      	bne.n	80057f4 <Receive_Error_Code+0x14>
		return Status_OK;
 80057f0:	2300      	movs	r3, #0
 80057f2:	e01f      	b.n	8005834 <Receive_Error_Code+0x54>
	else if (data == 0x01)
 80057f4:	88fb      	ldrh	r3, [r7, #6]
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d102      	bne.n	8005800 <Receive_Error_Code+0x20>
		return Temp_Measur_Err;
 80057fa:	f640 33b9 	movw	r3, #3001	; 0xbb9
 80057fe:	e019      	b.n	8005834 <Receive_Error_Code+0x54>
	else if (data == 0x02)
 8005800:	88fb      	ldrh	r3, [r7, #6]
 8005802:	2b02      	cmp	r3, #2
 8005804:	d102      	bne.n	800580c <Receive_Error_Code+0x2c>
		return Hum_Measur_Err;
 8005806:	f640 33ba 	movw	r3, #3002	; 0xbba
 800580a:	e013      	b.n	8005834 <Receive_Error_Code+0x54>
	else if (data == 0x04)
 800580c:	88fb      	ldrh	r3, [r7, #6]
 800580e:	2b04      	cmp	r3, #4
 8005810:	d102      	bne.n	8005818 <Receive_Error_Code+0x38>
		return Humi_Sen_Fail;
 8005812:	f640 33bb 	movw	r3, #3003	; 0xbbb
 8005816:	e00d      	b.n	8005834 <Receive_Error_Code+0x54>
	else if (data == 0x08)
 8005818:	88fb      	ldrh	r3, [r7, #6]
 800581a:	2b08      	cmp	r3, #8
 800581c:	d102      	bne.n	8005824 <Receive_Error_Code+0x44>
		return Capa_Re_Err;
 800581e:	f640 33bc 	movw	r3, #3004	; 0xbbc
 8005822:	e007      	b.n	8005834 <Receive_Error_Code+0x54>
	else if (data == 0x10)
 8005824:	88fb      	ldrh	r3, [r7, #6]
 8005826:	2b10      	cmp	r3, #16
 8005828:	d102      	bne.n	8005830 <Receive_Error_Code+0x50>
		return Temp_Out_Range;
 800582a:	f640 33bd 	movw	r3, #3005	; 0xbbd
 800582e:	e001      	b.n	8005834 <Receive_Error_Code+0x54>
	else
		return Sensor_Heat_Err;
 8005830:	f640 33be 	movw	r3, #3006	; 0xbbe

}
 8005834:	4618      	mov	r0, r3
 8005836:	370c      	adds	r7, #12
 8005838:	46bd      	mov	sp, r7
 800583a:	bc80      	pop	{r7}
 800583c:	4770      	bx	lr
	...

08005840 <Send_Error_Temp>:

/********************************************************************************************
 * ******************************************************************************************
 */
void Send_Error_Temp(void)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
	uint8_t TxData[8];
	TxData[0] = 0xF0;  // slave address
 8005846:	23f0      	movs	r3, #240	; 0xf0
 8005848:	713b      	strb	r3, [r7, #4]
	TxData[1] = 0x03;  // Function code for Read Input Registers
 800584a:	2303      	movs	r3, #3
 800584c:	717b      	strb	r3, [r7, #5]

	TxData[2] = 0x02;
 800584e:	2302      	movs	r3, #2
 8005850:	71bb      	strb	r3, [r7, #6]
	TxData[3] = 0x08;
 8005852:	2308      	movs	r3, #8
 8005854:	71fb      	strb	r3, [r7, #7]
	// T measurement status

	TxData[4] = 0;
 8005856:	2300      	movs	r3, #0
 8005858:	723b      	strb	r3, [r7, #8]
	TxData[5] = 0x01;
 800585a:	2301      	movs	r3, #1
 800585c:	727b      	strb	r3, [r7, #9]

	uint16_t crc = crc16(TxData, 6);
 800585e:	1d3b      	adds	r3, r7, #4
 8005860:	2106      	movs	r1, #6
 8005862:	4618      	mov	r0, r3
 8005864:	f7ff fe46 	bl	80054f4 <crc16>
 8005868:	4603      	mov	r3, r0
 800586a:	81fb      	strh	r3, [r7, #14]
	TxData[6] = crc&0xFF;   // CRC LOW
 800586c:	89fb      	ldrh	r3, [r7, #14]
 800586e:	b2db      	uxtb	r3, r3
 8005870:	72bb      	strb	r3, [r7, #10]
	TxData[7] = (crc>>8)&0xFF;  // CRC HIGH
 8005872:	89fb      	ldrh	r3, [r7, #14]
 8005874:	0a1b      	lsrs	r3, r3, #8
 8005876:	b29b      	uxth	r3, r3
 8005878:	b2db      	uxtb	r3, r3
 800587a:	72fb      	strb	r3, [r7, #11]

	HAL_UART_Transmit(&huart2, TxData, 8, 1000);
 800587c:	1d39      	adds	r1, r7, #4
 800587e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005882:	2208      	movs	r2, #8
 8005884:	4803      	ldr	r0, [pc, #12]	; (8005894 <Send_Error_Temp+0x54>)
 8005886:	f7fe fb74 	bl	8003f72 <HAL_UART_Transmit>
}
 800588a:	bf00      	nop
 800588c:	3710      	adds	r7, #16
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	200002a0 	.word	0x200002a0

08005898 <Receive_Error_Temp>:
uint8_t Receive_Error_Temp(uint16_t data)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	4603      	mov	r3, r0
 80058a0:	80fb      	strh	r3, [r7, #6]
	if (data == 0)
 80058a2:	88fb      	ldrh	r3, [r7, #6]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d101      	bne.n	80058ac <Receive_Error_Temp+0x14>
		return Status_OK;
 80058a8:	2300      	movs	r3, #0
 80058aa:	e01e      	b.n	80058ea <Receive_Error_Temp+0x52>
	else if (data == 0x01)
 80058ac:	88fb      	ldrh	r3, [r7, #6]
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d101      	bne.n	80058b6 <Receive_Error_Temp+0x1e>
		return Measur_Not_Avai;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e019      	b.n	80058ea <Receive_Error_Temp+0x52>
	else if (data == 0x02)
 80058b6:	88fb      	ldrh	r3, [r7, #6]
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d101      	bne.n	80058c0 <Receive_Error_Temp+0x28>
		return Measur_Not_Reliable;
 80058bc:	2302      	movs	r3, #2
 80058be:	e014      	b.n	80058ea <Receive_Error_Temp+0x52>
	else if (data == 0x04)
 80058c0:	88fb      	ldrh	r3, [r7, #6]
 80058c2:	2b04      	cmp	r3, #4
 80058c4:	d101      	bne.n	80058ca <Receive_Error_Temp+0x32>
		return UnderRange;
 80058c6:	2303      	movs	r3, #3
 80058c8:	e00f      	b.n	80058ea <Receive_Error_Temp+0x52>
	else if (data == 0x08)
 80058ca:	88fb      	ldrh	r3, [r7, #6]
 80058cc:	2b08      	cmp	r3, #8
 80058ce:	d101      	bne.n	80058d4 <Receive_Error_Temp+0x3c>
		return Overrange;
 80058d0:	2304      	movs	r3, #4
 80058d2:	e00a      	b.n	80058ea <Receive_Error_Temp+0x52>
	else if (data == 0x20)
 80058d4:	88fb      	ldrh	r3, [r7, #6]
 80058d6:	2b20      	cmp	r3, #32
 80058d8:	d101      	bne.n	80058de <Receive_Error_Temp+0x46>
		return Value_Locked;
 80058da:	2305      	movs	r3, #5
 80058dc:	e005      	b.n	80058ea <Receive_Error_Temp+0x52>
	else if (data == 0x80)
 80058de:	88fb      	ldrh	r3, [r7, #6]
 80058e0:	2b80      	cmp	r3, #128	; 0x80
 80058e2:	d101      	bne.n	80058e8 <Receive_Error_Temp+0x50>
		return Sensor_Failure;
 80058e4:	2306      	movs	r3, #6
 80058e6:	e000      	b.n	80058ea <Receive_Error_Temp+0x52>
	else
		return Measur_Not_Ready;
 80058e8:	2307      	movs	r3, #7
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	370c      	adds	r7, #12
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bc80      	pop	{r7}
 80058f2:	4770      	bx	lr

080058f4 <Send_Error_RH>:

/********************************************************************************************
 * ******************************************************************************************
 */
void Send_Error_RH(void)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
	uint8_t TxData[8];
	TxData[0] = 0xF0;  // slave address
 80058fa:	23f0      	movs	r3, #240	; 0xf0
 80058fc:	713b      	strb	r3, [r7, #4]
	TxData[1] = 0x03;  // Function code for Read Input Registers
 80058fe:	2303      	movs	r3, #3
 8005900:	717b      	strb	r3, [r7, #5]

	TxData[2] = 0x02;
 8005902:	2302      	movs	r3, #2
 8005904:	71bb      	strb	r3, [r7, #6]
	TxData[3] = 0x07;
 8005906:	2307      	movs	r3, #7
 8005908:	71fb      	strb	r3, [r7, #7]
	// RH measurement status

	TxData[4] = 0;
 800590a:	2300      	movs	r3, #0
 800590c:	723b      	strb	r3, [r7, #8]
	TxData[5] = 0x01;
 800590e:	2301      	movs	r3, #1
 8005910:	727b      	strb	r3, [r7, #9]
	// no of registers to read will be 00000000 00000001 = 1 Registers = 2 Bytes

	uint16_t crc = crc16(TxData, 6);
 8005912:	1d3b      	adds	r3, r7, #4
 8005914:	2106      	movs	r1, #6
 8005916:	4618      	mov	r0, r3
 8005918:	f7ff fdec 	bl	80054f4 <crc16>
 800591c:	4603      	mov	r3, r0
 800591e:	81fb      	strh	r3, [r7, #14]
	TxData[6] = crc&0xFF;   // CRC LOW
 8005920:	89fb      	ldrh	r3, [r7, #14]
 8005922:	b2db      	uxtb	r3, r3
 8005924:	72bb      	strb	r3, [r7, #10]
	TxData[7] = (crc>>8)&0xFF;  // CRC HIGH
 8005926:	89fb      	ldrh	r3, [r7, #14]
 8005928:	0a1b      	lsrs	r3, r3, #8
 800592a:	b29b      	uxth	r3, r3
 800592c:	b2db      	uxtb	r3, r3
 800592e:	72fb      	strb	r3, [r7, #11]

	HAL_UART_Transmit(&huart2, TxData, 8, 1000);
 8005930:	1d39      	adds	r1, r7, #4
 8005932:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005936:	2208      	movs	r2, #8
 8005938:	4803      	ldr	r0, [pc, #12]	; (8005948 <Send_Error_RH+0x54>)
 800593a:	f7fe fb1a 	bl	8003f72 <HAL_UART_Transmit>
}
 800593e:	bf00      	nop
 8005940:	3710      	adds	r7, #16
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop
 8005948:	200002a0 	.word	0x200002a0

0800594c <Receive_Error_RH>:
uint8_t Receive_Error_RH(uint16_t data)
{
 800594c:	b480      	push	{r7}
 800594e:	b083      	sub	sp, #12
 8005950:	af00      	add	r7, sp, #0
 8005952:	4603      	mov	r3, r0
 8005954:	80fb      	strh	r3, [r7, #6]
	if (data == 0)
 8005956:	88fb      	ldrh	r3, [r7, #6]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d101      	bne.n	8005960 <Receive_Error_RH+0x14>
		return Status_OK;
 800595c:	2300      	movs	r3, #0
 800595e:	e01e      	b.n	800599e <Receive_Error_RH+0x52>
	else if (data == 0x01)
 8005960:	88fb      	ldrh	r3, [r7, #6]
 8005962:	2b01      	cmp	r3, #1
 8005964:	d101      	bne.n	800596a <Receive_Error_RH+0x1e>
		return Measur_Not_Avai;
 8005966:	2301      	movs	r3, #1
 8005968:	e019      	b.n	800599e <Receive_Error_RH+0x52>
	else if (data == 0x02)
 800596a:	88fb      	ldrh	r3, [r7, #6]
 800596c:	2b02      	cmp	r3, #2
 800596e:	d101      	bne.n	8005974 <Receive_Error_RH+0x28>
		return Measur_Not_Reliable;
 8005970:	2302      	movs	r3, #2
 8005972:	e014      	b.n	800599e <Receive_Error_RH+0x52>
	else if (data == 0x04)
 8005974:	88fb      	ldrh	r3, [r7, #6]
 8005976:	2b04      	cmp	r3, #4
 8005978:	d101      	bne.n	800597e <Receive_Error_RH+0x32>
		return UnderRange;
 800597a:	2303      	movs	r3, #3
 800597c:	e00f      	b.n	800599e <Receive_Error_RH+0x52>
	else if (data == 0x08)
 800597e:	88fb      	ldrh	r3, [r7, #6]
 8005980:	2b08      	cmp	r3, #8
 8005982:	d101      	bne.n	8005988 <Receive_Error_RH+0x3c>
		return Overrange;
 8005984:	2304      	movs	r3, #4
 8005986:	e00a      	b.n	800599e <Receive_Error_RH+0x52>
	else if (data == 0x20)
 8005988:	88fb      	ldrh	r3, [r7, #6]
 800598a:	2b20      	cmp	r3, #32
 800598c:	d101      	bne.n	8005992 <Receive_Error_RH+0x46>
		return Value_Locked;
 800598e:	2305      	movs	r3, #5
 8005990:	e005      	b.n	800599e <Receive_Error_RH+0x52>
	else if (data == 0x80)
 8005992:	88fb      	ldrh	r3, [r7, #6]
 8005994:	2b80      	cmp	r3, #128	; 0x80
 8005996:	d101      	bne.n	800599c <Receive_Error_RH+0x50>
		return Sensor_Failure;
 8005998:	2306      	movs	r3, #6
 800599a:	e000      	b.n	800599e <Receive_Error_RH+0x52>
	else
		return Measur_Not_Ready;
 800599c:	2307      	movs	r3, #7
}
 800599e:	4618      	mov	r0, r3
 80059a0:	370c      	adds	r7, #12
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bc80      	pop	{r7}
 80059a6:	4770      	bx	lr

080059a8 <Send_Error_Device>:
/********************************************************************************************
 * ******************************************************************************************
 */
void Send_Error_Device(void)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
	uint8_t TxData[8];
	TxData[0] = 0xF0;  // slave address
 80059ae:	23f0      	movs	r3, #240	; 0xf0
 80059b0:	713b      	strb	r3, [r7, #4]
	TxData[1] = 0x03;  // Function code for Read Input Registers
 80059b2:	2303      	movs	r3, #3
 80059b4:	717b      	strb	r3, [r7, #5]

	TxData[2] = 0x02;
 80059b6:	2302      	movs	r3, #2
 80059b8:	71bb      	strb	r3, [r7, #6]
	TxData[3] = 0x0A;
 80059ba:	230a      	movs	r3, #10
 80059bc:	71fb      	strb	r3, [r7, #7]
	//Error Device

	TxData[4] = 0;
 80059be:	2300      	movs	r3, #0
 80059c0:	723b      	strb	r3, [r7, #8]
	TxData[5] = 0x01;
 80059c2:	2301      	movs	r3, #1
 80059c4:	727b      	strb	r3, [r7, #9]
	// no of registers to read will be 00000000 00000001 = 1 Registers = 2 Bytes

	uint16_t crc = crc16(TxData, 6);
 80059c6:	1d3b      	adds	r3, r7, #4
 80059c8:	2106      	movs	r1, #6
 80059ca:	4618      	mov	r0, r3
 80059cc:	f7ff fd92 	bl	80054f4 <crc16>
 80059d0:	4603      	mov	r3, r0
 80059d2:	81fb      	strh	r3, [r7, #14]
	TxData[6] = crc&0xFF;   // CRC LOW
 80059d4:	89fb      	ldrh	r3, [r7, #14]
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	72bb      	strb	r3, [r7, #10]
	TxData[7] = (crc>>8)&0xFF;  // CRC HIGH
 80059da:	89fb      	ldrh	r3, [r7, #14]
 80059dc:	0a1b      	lsrs	r3, r3, #8
 80059de:	b29b      	uxth	r3, r3
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	72fb      	strb	r3, [r7, #11]

	HAL_UART_Transmit(&huart2, TxData, 8, 1000);
 80059e4:	1d39      	adds	r1, r7, #4
 80059e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80059ea:	2208      	movs	r2, #8
 80059ec:	4803      	ldr	r0, [pc, #12]	; (80059fc <Send_Error_Device+0x54>)
 80059ee:	f7fe fac0 	bl	8003f72 <HAL_UART_Transmit>
}
 80059f2:	bf00      	nop
 80059f4:	3710      	adds	r7, #16
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	200002a0 	.word	0x200002a0

08005a00 <Receive_Error_Device>:
uint8_t Receive_Error_Device(uint16_t data)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	4603      	mov	r3, r0
 8005a08:	80fb      	strh	r3, [r7, #6]
	if (data == 0)
 8005a0a:	88fb      	ldrh	r3, [r7, #6]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d101      	bne.n	8005a14 <Receive_Error_Device+0x14>
		return Status_OK;
 8005a10:	2300      	movs	r3, #0
 8005a12:	e014      	b.n	8005a3e <Receive_Error_Device+0x3e>
	else if (data == 0x01)
 8005a14:	88fb      	ldrh	r3, [r7, #6]
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d101      	bne.n	8005a1e <Receive_Error_Device+0x1e>
		return Need_Maintance;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	e00f      	b.n	8005a3e <Receive_Error_Device+0x3e>
	else if (data == 0x02)
 8005a1e:	88fb      	ldrh	r3, [r7, #6]
 8005a20:	2b02      	cmp	r3, #2
 8005a22:	d101      	bne.n	8005a28 <Receive_Error_Device+0x28>
		return Recover_Auto;
 8005a24:	2301      	movs	r3, #1
 8005a26:	e00a      	b.n	8005a3e <Receive_Error_Device+0x3e>
	else if (data == 0x04)
 8005a28:	88fb      	ldrh	r3, [r7, #6]
 8005a2a:	2b04      	cmp	r3, #4
 8005a2c:	d101      	bne.n	8005a32 <Receive_Error_Device+0x32>
		return Warning;
 8005a2e:	2302      	movs	r3, #2
 8005a30:	e005      	b.n	8005a3e <Receive_Error_Device+0x3e>
	else if (data == 0x08)
 8005a32:	88fb      	ldrh	r3, [r7, #6]
 8005a34:	2b08      	cmp	r3, #8
 8005a36:	d101      	bne.n	8005a3c <Receive_Error_Device+0x3c>
		return Notification;
 8005a38:	2303      	movs	r3, #3
 8005a3a:	e000      	b.n	8005a3e <Receive_Error_Device+0x3e>
	else
		return Calib_Mode_Active;
 8005a3c:	2304      	movs	r3, #4
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	370c      	adds	r7, #12
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bc80      	pop	{r7}
 8005a46:	4770      	bx	lr

08005a48 <Read_Temp>:

/********************************************************************************************
 * ******************************************************************************************
 */
void Read_Temp(void)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b084      	sub	sp, #16
 8005a4c:	af00      	add	r7, sp, #0
	uint8_t TxData[8];
	TxData[0] = 0xF0;  // slave address
 8005a4e:	23f0      	movs	r3, #240	; 0xf0
 8005a50:	713b      	strb	r3, [r7, #4]
	TxData[1] = 0x03;  // Function code for Read Input Registers
 8005a52:	2303      	movs	r3, #3
 8005a54:	717b      	strb	r3, [r7, #5]

	TxData[2] = 0;
 8005a56:	2300      	movs	r3, #0
 8005a58:	71bb      	strb	r3, [r7, #6]
	TxData[3] = 0x02;
 8005a5a:	2302      	movs	r3, #2
 8005a5c:	71fb      	strb	r3, [r7, #7]
	//  Temp Address

	TxData[4] = 0;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	723b      	strb	r3, [r7, #8]
	TxData[5] = 0x02;
 8005a62:	2302      	movs	r3, #2
 8005a64:	727b      	strb	r3, [r7, #9]

	uint16_t crc = crc16(TxData, 6);
 8005a66:	1d3b      	adds	r3, r7, #4
 8005a68:	2106      	movs	r1, #6
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f7ff fd42 	bl	80054f4 <crc16>
 8005a70:	4603      	mov	r3, r0
 8005a72:	81fb      	strh	r3, [r7, #14]
	TxData[6] = crc&0xFF;   // CRC LOW
 8005a74:	89fb      	ldrh	r3, [r7, #14]
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	72bb      	strb	r3, [r7, #10]
	TxData[7] = (crc>>8)&0xFF;  // CRC HIGH
 8005a7a:	89fb      	ldrh	r3, [r7, #14]
 8005a7c:	0a1b      	lsrs	r3, r3, #8
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	72fb      	strb	r3, [r7, #11]

	HAL_UART_Transmit(&huart2, TxData, 8, 1000);
 8005a84:	1d39      	adds	r1, r7, #4
 8005a86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005a8a:	2208      	movs	r2, #8
 8005a8c:	4803      	ldr	r0, [pc, #12]	; (8005a9c <Read_Temp+0x54>)
 8005a8e:	f7fe fa70 	bl	8003f72 <HAL_UART_Transmit>
}
 8005a92:	bf00      	nop
 8005a94:	3710      	adds	r7, #16
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	200002a0 	.word	0x200002a0

08005aa0 <Read_Water>:

/********************************************************************************************
 * ******************************************************************************************
 */
void Read_Water(void)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
	uint8_t TxData[8];
	TxData[0] = 0xF0;  // slave address
 8005aa6:	23f0      	movs	r3, #240	; 0xf0
 8005aa8:	713b      	strb	r3, [r7, #4]
	TxData[1] = 0x03;  // Function code for Read Input Registers
 8005aaa:	2303      	movs	r3, #3
 8005aac:	717b      	strb	r3, [r7, #5]

	TxData[2] = 0;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	71bb      	strb	r3, [r7, #6]
	TxData[3] = 0x22;
 8005ab2:	2322      	movs	r3, #34	; 0x22
 8005ab4:	71fb      	strb	r3, [r7, #7]
	// Ham luong nuoc trong dau

	TxData[4] = 0;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	723b      	strb	r3, [r7, #8]
	TxData[5] = 0x02;
 8005aba:	2302      	movs	r3, #2
 8005abc:	727b      	strb	r3, [r7, #9]

	uint16_t crc = crc16(TxData, 6);
 8005abe:	1d3b      	adds	r3, r7, #4
 8005ac0:	2106      	movs	r1, #6
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f7ff fd16 	bl	80054f4 <crc16>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	81fb      	strh	r3, [r7, #14]
	TxData[6] = crc&0xFF;   // CRC LOW
 8005acc:	89fb      	ldrh	r3, [r7, #14]
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	72bb      	strb	r3, [r7, #10]
	TxData[7] = (crc>>8)&0xFF;  // CRC HIGH
 8005ad2:	89fb      	ldrh	r3, [r7, #14]
 8005ad4:	0a1b      	lsrs	r3, r3, #8
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	72fb      	strb	r3, [r7, #11]

	HAL_UART_Transmit(&huart2, TxData, 8, 1000);
 8005adc:	1d39      	adds	r1, r7, #4
 8005ade:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005ae2:	2208      	movs	r2, #8
 8005ae4:	4803      	ldr	r0, [pc, #12]	; (8005af4 <Read_Water+0x54>)
 8005ae6:	f7fe fa44 	bl	8003f72 <HAL_UART_Transmit>
}
 8005aea:	bf00      	nop
 8005aec:	3710      	adds	r7, #16
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop
 8005af4:	200002a0 	.word	0x200002a0

08005af8 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005af8:	b480      	push	{r7}
 8005afa:	b085      	sub	sp, #20
 8005afc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005afe:	f3ef 8305 	mrs	r3, IPSR
 8005b02:	60bb      	str	r3, [r7, #8]
  return(result);
 8005b04:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d10f      	bne.n	8005b2a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b0a:	f3ef 8310 	mrs	r3, PRIMASK
 8005b0e:	607b      	str	r3, [r7, #4]
  return(result);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d109      	bne.n	8005b2a <osKernelInitialize+0x32>
 8005b16:	4b10      	ldr	r3, [pc, #64]	; (8005b58 <osKernelInitialize+0x60>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d109      	bne.n	8005b32 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005b1e:	f3ef 8311 	mrs	r3, BASEPRI
 8005b22:	603b      	str	r3, [r7, #0]
  return(result);
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d003      	beq.n	8005b32 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005b2a:	f06f 0305 	mvn.w	r3, #5
 8005b2e:	60fb      	str	r3, [r7, #12]
 8005b30:	e00c      	b.n	8005b4c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005b32:	4b09      	ldr	r3, [pc, #36]	; (8005b58 <osKernelInitialize+0x60>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d105      	bne.n	8005b46 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8005b3a:	4b07      	ldr	r3, [pc, #28]	; (8005b58 <osKernelInitialize+0x60>)
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005b40:	2300      	movs	r3, #0
 8005b42:	60fb      	str	r3, [r7, #12]
 8005b44:	e002      	b.n	8005b4c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005b46:	f04f 33ff 	mov.w	r3, #4294967295
 8005b4a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3714      	adds	r7, #20
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bc80      	pop	{r7}
 8005b56:	4770      	bx	lr
 8005b58:	20000454 	.word	0x20000454

08005b5c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b62:	f3ef 8305 	mrs	r3, IPSR
 8005b66:	60bb      	str	r3, [r7, #8]
  return(result);
 8005b68:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d10f      	bne.n	8005b8e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b6e:	f3ef 8310 	mrs	r3, PRIMASK
 8005b72:	607b      	str	r3, [r7, #4]
  return(result);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d109      	bne.n	8005b8e <osKernelStart+0x32>
 8005b7a:	4b11      	ldr	r3, [pc, #68]	; (8005bc0 <osKernelStart+0x64>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2b02      	cmp	r3, #2
 8005b80:	d109      	bne.n	8005b96 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005b82:	f3ef 8311 	mrs	r3, BASEPRI
 8005b86:	603b      	str	r3, [r7, #0]
  return(result);
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d003      	beq.n	8005b96 <osKernelStart+0x3a>
    stat = osErrorISR;
 8005b8e:	f06f 0305 	mvn.w	r3, #5
 8005b92:	60fb      	str	r3, [r7, #12]
 8005b94:	e00e      	b.n	8005bb4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8005b96:	4b0a      	ldr	r3, [pc, #40]	; (8005bc0 <osKernelStart+0x64>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d107      	bne.n	8005bae <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8005b9e:	4b08      	ldr	r3, [pc, #32]	; (8005bc0 <osKernelStart+0x64>)
 8005ba0:	2202      	movs	r2, #2
 8005ba2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005ba4:	f001 fc58 	bl	8007458 <vTaskStartScheduler>
      stat = osOK;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	60fb      	str	r3, [r7, #12]
 8005bac:	e002      	b.n	8005bb4 <osKernelStart+0x58>
    } else {
      stat = osError;
 8005bae:	f04f 33ff 	mov.w	r3, #4294967295
 8005bb2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3710      	adds	r7, #16
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	20000454 	.word	0x20000454

08005bc4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b092      	sub	sp, #72	; 0x48
 8005bc8:	af04      	add	r7, sp, #16
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	60b9      	str	r1, [r7, #8]
 8005bce:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bd4:	f3ef 8305 	mrs	r3, IPSR
 8005bd8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	f040 8094 	bne.w	8005d0a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005be2:	f3ef 8310 	mrs	r3, PRIMASK
 8005be6:	623b      	str	r3, [r7, #32]
  return(result);
 8005be8:	6a3b      	ldr	r3, [r7, #32]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	f040 808d 	bne.w	8005d0a <osThreadNew+0x146>
 8005bf0:	4b48      	ldr	r3, [pc, #288]	; (8005d14 <osThreadNew+0x150>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	d106      	bne.n	8005c06 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005bf8:	f3ef 8311 	mrs	r3, BASEPRI
 8005bfc:	61fb      	str	r3, [r7, #28]
  return(result);
 8005bfe:	69fb      	ldr	r3, [r7, #28]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	f040 8082 	bne.w	8005d0a <osThreadNew+0x146>
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d07e      	beq.n	8005d0a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8005c0c:	2380      	movs	r3, #128	; 0x80
 8005c0e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8005c10:	2318      	movs	r3, #24
 8005c12:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8005c14:	2300      	movs	r3, #0
 8005c16:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8005c18:	f107 031b 	add.w	r3, r7, #27
 8005c1c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8005c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c22:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d045      	beq.n	8005cb6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d002      	beq.n	8005c38 <osThreadNew+0x74>
        name = attr->name;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	699b      	ldr	r3, [r3, #24]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d002      	beq.n	8005c46 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	699b      	ldr	r3, [r3, #24]
 8005c44:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d008      	beq.n	8005c5e <osThreadNew+0x9a>
 8005c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c4e:	2b38      	cmp	r3, #56	; 0x38
 8005c50:	d805      	bhi.n	8005c5e <osThreadNew+0x9a>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	f003 0301 	and.w	r3, r3, #1
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d001      	beq.n	8005c62 <osThreadNew+0x9e>
        return (NULL);
 8005c5e:	2300      	movs	r3, #0
 8005c60:	e054      	b.n	8005d0c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	695b      	ldr	r3, [r3, #20]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d003      	beq.n	8005c72 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	695b      	ldr	r3, [r3, #20]
 8005c6e:	089b      	lsrs	r3, r3, #2
 8005c70:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d00e      	beq.n	8005c98 <osThreadNew+0xd4>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	2bbb      	cmp	r3, #187	; 0xbb
 8005c80:	d90a      	bls.n	8005c98 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d006      	beq.n	8005c98 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	695b      	ldr	r3, [r3, #20]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d002      	beq.n	8005c98 <osThreadNew+0xd4>
        mem = 1;
 8005c92:	2301      	movs	r3, #1
 8005c94:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c96:	e010      	b.n	8005cba <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d10c      	bne.n	8005cba <osThreadNew+0xf6>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d108      	bne.n	8005cba <osThreadNew+0xf6>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	691b      	ldr	r3, [r3, #16]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d104      	bne.n	8005cba <osThreadNew+0xf6>
          mem = 0;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cb4:	e001      	b.n	8005cba <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8005cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d110      	bne.n	8005ce2 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005cc8:	9202      	str	r2, [sp, #8]
 8005cca:	9301      	str	r3, [sp, #4]
 8005ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cce:	9300      	str	r3, [sp, #0]
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cd4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005cd6:	68f8      	ldr	r0, [r7, #12]
 8005cd8:	f001 f9da 	bl	8007090 <xTaskCreateStatic>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	617b      	str	r3, [r7, #20]
 8005ce0:	e013      	b.n	8005d0a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8005ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d110      	bne.n	8005d0a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cea:	b29a      	uxth	r2, r3
 8005cec:	f107 0314 	add.w	r3, r7, #20
 8005cf0:	9301      	str	r3, [sp, #4]
 8005cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf4:	9300      	str	r3, [sp, #0]
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005cfa:	68f8      	ldr	r0, [r7, #12]
 8005cfc:	f001 fa24 	bl	8007148 <xTaskCreate>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d001      	beq.n	8005d0a <osThreadNew+0x146>
          hTask = NULL;
 8005d06:	2300      	movs	r3, #0
 8005d08:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005d0a:	697b      	ldr	r3, [r7, #20]
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3738      	adds	r7, #56	; 0x38
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}
 8005d14:	20000454 	.word	0x20000454

08005d18 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b086      	sub	sp, #24
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d20:	f3ef 8305 	mrs	r3, IPSR
 8005d24:	613b      	str	r3, [r7, #16]
  return(result);
 8005d26:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d10f      	bne.n	8005d4c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d2c:	f3ef 8310 	mrs	r3, PRIMASK
 8005d30:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d109      	bne.n	8005d4c <osDelay+0x34>
 8005d38:	4b0d      	ldr	r3, [pc, #52]	; (8005d70 <osDelay+0x58>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2b02      	cmp	r3, #2
 8005d3e:	d109      	bne.n	8005d54 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005d40:	f3ef 8311 	mrs	r3, BASEPRI
 8005d44:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d003      	beq.n	8005d54 <osDelay+0x3c>
    stat = osErrorISR;
 8005d4c:	f06f 0305 	mvn.w	r3, #5
 8005d50:	617b      	str	r3, [r7, #20]
 8005d52:	e007      	b.n	8005d64 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005d54:	2300      	movs	r3, #0
 8005d56:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d002      	beq.n	8005d64 <osDelay+0x4c>
      vTaskDelay(ticks);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f001 fb46 	bl	80073f0 <vTaskDelay>
    }
  }

  return (stat);
 8005d64:	697b      	ldr	r3, [r7, #20]
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3718      	adds	r7, #24
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	20000454 	.word	0x20000454

08005d74 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b08c      	sub	sp, #48	; 0x30
 8005d78:	af02      	add	r7, sp, #8
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005d80:	2300      	movs	r3, #0
 8005d82:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d84:	f3ef 8305 	mrs	r3, IPSR
 8005d88:	61bb      	str	r3, [r7, #24]
  return(result);
 8005d8a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	f040 8086 	bne.w	8005e9e <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d92:	f3ef 8310 	mrs	r3, PRIMASK
 8005d96:	617b      	str	r3, [r7, #20]
  return(result);
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d17f      	bne.n	8005e9e <osSemaphoreNew+0x12a>
 8005d9e:	4b42      	ldr	r3, [pc, #264]	; (8005ea8 <osSemaphoreNew+0x134>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2b02      	cmp	r3, #2
 8005da4:	d105      	bne.n	8005db2 <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005da6:	f3ef 8311 	mrs	r3, BASEPRI
 8005daa:	613b      	str	r3, [r7, #16]
  return(result);
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d175      	bne.n	8005e9e <osSemaphoreNew+0x12a>
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d072      	beq.n	8005e9e <osSemaphoreNew+0x12a>
 8005db8:	68ba      	ldr	r2, [r7, #8]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d86e      	bhi.n	8005e9e <osSemaphoreNew+0x12a>
    mem = -1;
 8005dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8005dc4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d015      	beq.n	8005df8 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d006      	beq.n	8005de2 <osSemaphoreNew+0x6e>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	2b4f      	cmp	r3, #79	; 0x4f
 8005dda:	d902      	bls.n	8005de2 <osSemaphoreNew+0x6e>
        mem = 1;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	623b      	str	r3, [r7, #32]
 8005de0:	e00c      	b.n	8005dfc <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d108      	bne.n	8005dfc <osSemaphoreNew+0x88>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d104      	bne.n	8005dfc <osSemaphoreNew+0x88>
          mem = 0;
 8005df2:	2300      	movs	r3, #0
 8005df4:	623b      	str	r3, [r7, #32]
 8005df6:	e001      	b.n	8005dfc <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8005dfc:	6a3b      	ldr	r3, [r7, #32]
 8005dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e02:	d04c      	beq.n	8005e9e <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d128      	bne.n	8005e5c <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8005e0a:	6a3b      	ldr	r3, [r7, #32]
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d10a      	bne.n	8005e26 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	2203      	movs	r2, #3
 8005e16:	9200      	str	r2, [sp, #0]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	2100      	movs	r1, #0
 8005e1c:	2001      	movs	r0, #1
 8005e1e:	f000 fa15 	bl	800624c <xQueueGenericCreateStatic>
 8005e22:	6278      	str	r0, [r7, #36]	; 0x24
 8005e24:	e005      	b.n	8005e32 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8005e26:	2203      	movs	r2, #3
 8005e28:	2100      	movs	r1, #0
 8005e2a:	2001      	movs	r0, #1
 8005e2c:	f000 fa85 	bl	800633a <xQueueGenericCreate>
 8005e30:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d022      	beq.n	8005e7e <osSemaphoreNew+0x10a>
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d01f      	beq.n	8005e7e <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005e3e:	2300      	movs	r3, #0
 8005e40:	2200      	movs	r2, #0
 8005e42:	2100      	movs	r1, #0
 8005e44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e46:	f000 fb43 	bl	80064d0 <xQueueGenericSend>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d016      	beq.n	8005e7e <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8005e50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e52:	f000 ff4d 	bl	8006cf0 <vQueueDelete>
            hSemaphore = NULL;
 8005e56:	2300      	movs	r3, #0
 8005e58:	627b      	str	r3, [r7, #36]	; 0x24
 8005e5a:	e010      	b.n	8005e7e <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8005e5c:	6a3b      	ldr	r3, [r7, #32]
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d108      	bne.n	8005e74 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	461a      	mov	r2, r3
 8005e68:	68b9      	ldr	r1, [r7, #8]
 8005e6a:	68f8      	ldr	r0, [r7, #12]
 8005e6c:	f000 fac6 	bl	80063fc <xQueueCreateCountingSemaphoreStatic>
 8005e70:	6278      	str	r0, [r7, #36]	; 0x24
 8005e72:	e004      	b.n	8005e7e <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005e74:	68b9      	ldr	r1, [r7, #8]
 8005e76:	68f8      	ldr	r0, [r7, #12]
 8005e78:	f000 faf7 	bl	800646a <xQueueCreateCountingSemaphore>
 8005e7c:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d00c      	beq.n	8005e9e <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d003      	beq.n	8005e92 <osSemaphoreNew+0x11e>
          name = attr->name;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	61fb      	str	r3, [r7, #28]
 8005e90:	e001      	b.n	8005e96 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8005e92:	2300      	movs	r3, #0
 8005e94:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005e96:	69f9      	ldr	r1, [r7, #28]
 8005e98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e9a:	f001 f873 	bl	8006f84 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3728      	adds	r7, #40	; 0x28
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}
 8005ea8:	20000454 	.word	0x20000454

08005eac <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b08c      	sub	sp, #48	; 0x30
 8005eb0:	af02      	add	r7, sp, #8
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ebc:	f3ef 8305 	mrs	r3, IPSR
 8005ec0:	61bb      	str	r3, [r7, #24]
  return(result);
 8005ec2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d16f      	bne.n	8005fa8 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ec8:	f3ef 8310 	mrs	r3, PRIMASK
 8005ecc:	617b      	str	r3, [r7, #20]
  return(result);
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d169      	bne.n	8005fa8 <osMessageQueueNew+0xfc>
 8005ed4:	4b37      	ldr	r3, [pc, #220]	; (8005fb4 <osMessageQueueNew+0x108>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2b02      	cmp	r3, #2
 8005eda:	d105      	bne.n	8005ee8 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005edc:	f3ef 8311 	mrs	r3, BASEPRI
 8005ee0:	613b      	str	r3, [r7, #16]
  return(result);
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d15f      	bne.n	8005fa8 <osMessageQueueNew+0xfc>
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d05c      	beq.n	8005fa8 <osMessageQueueNew+0xfc>
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d059      	beq.n	8005fa8 <osMessageQueueNew+0xfc>
    mem = -1;
 8005ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8005ef8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d029      	beq.n	8005f54 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d012      	beq.n	8005f2e <osMessageQueueNew+0x82>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	2b4f      	cmp	r3, #79	; 0x4f
 8005f0e:	d90e      	bls.n	8005f2e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d00a      	beq.n	8005f2e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	695a      	ldr	r2, [r3, #20]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	68b9      	ldr	r1, [r7, #8]
 8005f20:	fb01 f303 	mul.w	r3, r1, r3
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d302      	bcc.n	8005f2e <osMessageQueueNew+0x82>
        mem = 1;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	623b      	str	r3, [r7, #32]
 8005f2c:	e014      	b.n	8005f58 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d110      	bne.n	8005f58 <osMessageQueueNew+0xac>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d10c      	bne.n	8005f58 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d108      	bne.n	8005f58 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	695b      	ldr	r3, [r3, #20]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d104      	bne.n	8005f58 <osMessageQueueNew+0xac>
          mem = 0;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	623b      	str	r3, [r7, #32]
 8005f52:	e001      	b.n	8005f58 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8005f54:	2300      	movs	r3, #0
 8005f56:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005f58:	6a3b      	ldr	r3, [r7, #32]
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d10b      	bne.n	8005f76 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	691a      	ldr	r2, [r3, #16]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	2100      	movs	r1, #0
 8005f68:	9100      	str	r1, [sp, #0]
 8005f6a:	68b9      	ldr	r1, [r7, #8]
 8005f6c:	68f8      	ldr	r0, [r7, #12]
 8005f6e:	f000 f96d 	bl	800624c <xQueueGenericCreateStatic>
 8005f72:	6278      	str	r0, [r7, #36]	; 0x24
 8005f74:	e008      	b.n	8005f88 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8005f76:	6a3b      	ldr	r3, [r7, #32]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d105      	bne.n	8005f88 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	68b9      	ldr	r1, [r7, #8]
 8005f80:	68f8      	ldr	r0, [r7, #12]
 8005f82:	f000 f9da 	bl	800633a <xQueueGenericCreate>
 8005f86:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d00c      	beq.n	8005fa8 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d003      	beq.n	8005f9c <osMessageQueueNew+0xf0>
        name = attr->name;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	61fb      	str	r3, [r7, #28]
 8005f9a:	e001      	b.n	8005fa0 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8005fa0:	69f9      	ldr	r1, [r7, #28]
 8005fa2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005fa4:	f000 ffee 	bl	8006f84 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3728      	adds	r7, #40	; 0x28
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	bf00      	nop
 8005fb4:	20000454 	.word	0x20000454

08005fb8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005fb8:	b480      	push	{r7}
 8005fba:	b085      	sub	sp, #20
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	60b9      	str	r1, [r7, #8]
 8005fc2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	4a06      	ldr	r2, [pc, #24]	; (8005fe0 <vApplicationGetIdleTaskMemory+0x28>)
 8005fc8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	4a05      	ldr	r2, [pc, #20]	; (8005fe4 <vApplicationGetIdleTaskMemory+0x2c>)
 8005fce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2280      	movs	r2, #128	; 0x80
 8005fd4:	601a      	str	r2, [r3, #0]
}
 8005fd6:	bf00      	nop
 8005fd8:	3714      	adds	r7, #20
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bc80      	pop	{r7}
 8005fde:	4770      	bx	lr
 8005fe0:	20000458 	.word	0x20000458
 8005fe4:	20000514 	.word	0x20000514

08005fe8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005fe8:	b480      	push	{r7}
 8005fea:	b085      	sub	sp, #20
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	4a07      	ldr	r2, [pc, #28]	; (8006014 <vApplicationGetTimerTaskMemory+0x2c>)
 8005ff8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	4a06      	ldr	r2, [pc, #24]	; (8006018 <vApplicationGetTimerTaskMemory+0x30>)
 8005ffe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006006:	601a      	str	r2, [r3, #0]
}
 8006008:	bf00      	nop
 800600a:	3714      	adds	r7, #20
 800600c:	46bd      	mov	sp, r7
 800600e:	bc80      	pop	{r7}
 8006010:	4770      	bx	lr
 8006012:	bf00      	nop
 8006014:	20000714 	.word	0x20000714
 8006018:	200007d0 	.word	0x200007d0

0800601c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f103 0208 	add.w	r2, r3, #8
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f04f 32ff 	mov.w	r2, #4294967295
 8006034:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f103 0208 	add.w	r2, r3, #8
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f103 0208 	add.w	r2, r3, #8
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006050:	bf00      	nop
 8006052:	370c      	adds	r7, #12
 8006054:	46bd      	mov	sp, r7
 8006056:	bc80      	pop	{r7}
 8006058:	4770      	bx	lr

0800605a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800605a:	b480      	push	{r7}
 800605c:	b083      	sub	sp, #12
 800605e:	af00      	add	r7, sp, #0
 8006060:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006068:	bf00      	nop
 800606a:	370c      	adds	r7, #12
 800606c:	46bd      	mov	sp, r7
 800606e:	bc80      	pop	{r7}
 8006070:	4770      	bx	lr

08006072 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006072:	b480      	push	{r7}
 8006074:	b085      	sub	sp, #20
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
 800607a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	68fa      	ldr	r2, [r7, #12]
 8006086:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	689a      	ldr	r2, [r3, #8]
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	683a      	ldr	r2, [r7, #0]
 8006096:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	683a      	ldr	r2, [r7, #0]
 800609c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	1c5a      	adds	r2, r3, #1
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	601a      	str	r2, [r3, #0]
}
 80060ae:	bf00      	nop
 80060b0:	3714      	adds	r7, #20
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bc80      	pop	{r7}
 80060b6:	4770      	bx	lr

080060b8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80060b8:	b480      	push	{r7}
 80060ba:	b085      	sub	sp, #20
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ce:	d103      	bne.n	80060d8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	691b      	ldr	r3, [r3, #16]
 80060d4:	60fb      	str	r3, [r7, #12]
 80060d6:	e00c      	b.n	80060f2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	3308      	adds	r3, #8
 80060dc:	60fb      	str	r3, [r7, #12]
 80060de:	e002      	b.n	80060e6 <vListInsert+0x2e>
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	60fb      	str	r3, [r7, #12]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	68ba      	ldr	r2, [r7, #8]
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d2f6      	bcs.n	80060e0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	685a      	ldr	r2, [r3, #4]
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	683a      	ldr	r2, [r7, #0]
 8006100:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	68fa      	ldr	r2, [r7, #12]
 8006106:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	683a      	ldr	r2, [r7, #0]
 800610c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	687a      	ldr	r2, [r7, #4]
 8006112:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	1c5a      	adds	r2, r3, #1
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	601a      	str	r2, [r3, #0]
}
 800611e:	bf00      	nop
 8006120:	3714      	adds	r7, #20
 8006122:	46bd      	mov	sp, r7
 8006124:	bc80      	pop	{r7}
 8006126:	4770      	bx	lr

08006128 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006128:	b480      	push	{r7}
 800612a:	b085      	sub	sp, #20
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	691b      	ldr	r3, [r3, #16]
 8006134:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	6892      	ldr	r2, [r2, #8]
 800613e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	6852      	ldr	r2, [r2, #4]
 8006148:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	429a      	cmp	r2, r3
 8006152:	d103      	bne.n	800615c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	689a      	ldr	r2, [r3, #8]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	1e5a      	subs	r2, r3, #1
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
}
 8006170:	4618      	mov	r0, r3
 8006172:	3714      	adds	r7, #20
 8006174:	46bd      	mov	sp, r7
 8006176:	bc80      	pop	{r7}
 8006178:	4770      	bx	lr
	...

0800617c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b084      	sub	sp, #16
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d10a      	bne.n	80061a6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006194:	f383 8811 	msr	BASEPRI, r3
 8006198:	f3bf 8f6f 	isb	sy
 800619c:	f3bf 8f4f 	dsb	sy
 80061a0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80061a2:	bf00      	nop
 80061a4:	e7fe      	b.n	80061a4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80061a6:	f002 fba1 	bl	80088ec <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061b2:	68f9      	ldr	r1, [r7, #12]
 80061b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80061b6:	fb01 f303 	mul.w	r3, r1, r3
 80061ba:	441a      	add	r2, r3
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2200      	movs	r2, #0
 80061c4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061d6:	3b01      	subs	r3, #1
 80061d8:	68f9      	ldr	r1, [r7, #12]
 80061da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80061dc:	fb01 f303 	mul.w	r3, r1, r3
 80061e0:	441a      	add	r2, r3
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	22ff      	movs	r2, #255	; 0xff
 80061ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	22ff      	movs	r2, #255	; 0xff
 80061f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d114      	bne.n	8006226 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	691b      	ldr	r3, [r3, #16]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d01a      	beq.n	800623a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	3310      	adds	r3, #16
 8006208:	4618      	mov	r0, r3
 800620a:	f001 fbc1 	bl	8007990 <xTaskRemoveFromEventList>
 800620e:	4603      	mov	r3, r0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d012      	beq.n	800623a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006214:	4b0c      	ldr	r3, [pc, #48]	; (8006248 <xQueueGenericReset+0xcc>)
 8006216:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800621a:	601a      	str	r2, [r3, #0]
 800621c:	f3bf 8f4f 	dsb	sy
 8006220:	f3bf 8f6f 	isb	sy
 8006224:	e009      	b.n	800623a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	3310      	adds	r3, #16
 800622a:	4618      	mov	r0, r3
 800622c:	f7ff fef6 	bl	800601c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	3324      	adds	r3, #36	; 0x24
 8006234:	4618      	mov	r0, r3
 8006236:	f7ff fef1 	bl	800601c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800623a:	f002 fb87 	bl	800894c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800623e:	2301      	movs	r3, #1
}
 8006240:	4618      	mov	r0, r3
 8006242:	3710      	adds	r7, #16
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}
 8006248:	e000ed04 	.word	0xe000ed04

0800624c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800624c:	b580      	push	{r7, lr}
 800624e:	b08e      	sub	sp, #56	; 0x38
 8006250:	af02      	add	r7, sp, #8
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	607a      	str	r2, [r7, #4]
 8006258:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d10a      	bne.n	8006276 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006264:	f383 8811 	msr	BASEPRI, r3
 8006268:	f3bf 8f6f 	isb	sy
 800626c:	f3bf 8f4f 	dsb	sy
 8006270:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006272:	bf00      	nop
 8006274:	e7fe      	b.n	8006274 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d10a      	bne.n	8006292 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800627c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006280:	f383 8811 	msr	BASEPRI, r3
 8006284:	f3bf 8f6f 	isb	sy
 8006288:	f3bf 8f4f 	dsb	sy
 800628c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800628e:	bf00      	nop
 8006290:	e7fe      	b.n	8006290 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d002      	beq.n	800629e <xQueueGenericCreateStatic+0x52>
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d001      	beq.n	80062a2 <xQueueGenericCreateStatic+0x56>
 800629e:	2301      	movs	r3, #1
 80062a0:	e000      	b.n	80062a4 <xQueueGenericCreateStatic+0x58>
 80062a2:	2300      	movs	r3, #0
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d10a      	bne.n	80062be <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80062a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ac:	f383 8811 	msr	BASEPRI, r3
 80062b0:	f3bf 8f6f 	isb	sy
 80062b4:	f3bf 8f4f 	dsb	sy
 80062b8:	623b      	str	r3, [r7, #32]
}
 80062ba:	bf00      	nop
 80062bc:	e7fe      	b.n	80062bc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d102      	bne.n	80062ca <xQueueGenericCreateStatic+0x7e>
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d101      	bne.n	80062ce <xQueueGenericCreateStatic+0x82>
 80062ca:	2301      	movs	r3, #1
 80062cc:	e000      	b.n	80062d0 <xQueueGenericCreateStatic+0x84>
 80062ce:	2300      	movs	r3, #0
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d10a      	bne.n	80062ea <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80062d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d8:	f383 8811 	msr	BASEPRI, r3
 80062dc:	f3bf 8f6f 	isb	sy
 80062e0:	f3bf 8f4f 	dsb	sy
 80062e4:	61fb      	str	r3, [r7, #28]
}
 80062e6:	bf00      	nop
 80062e8:	e7fe      	b.n	80062e8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80062ea:	2350      	movs	r3, #80	; 0x50
 80062ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	2b50      	cmp	r3, #80	; 0x50
 80062f2:	d00a      	beq.n	800630a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80062f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f8:	f383 8811 	msr	BASEPRI, r3
 80062fc:	f3bf 8f6f 	isb	sy
 8006300:	f3bf 8f4f 	dsb	sy
 8006304:	61bb      	str	r3, [r7, #24]
}
 8006306:	bf00      	nop
 8006308:	e7fe      	b.n	8006308 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800630e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006310:	2b00      	cmp	r3, #0
 8006312:	d00d      	beq.n	8006330 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006316:	2201      	movs	r2, #1
 8006318:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800631c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006322:	9300      	str	r3, [sp, #0]
 8006324:	4613      	mov	r3, r2
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	68b9      	ldr	r1, [r7, #8]
 800632a:	68f8      	ldr	r0, [r7, #12]
 800632c:	f000 f843 	bl	80063b6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006332:	4618      	mov	r0, r3
 8006334:	3730      	adds	r7, #48	; 0x30
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}

0800633a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800633a:	b580      	push	{r7, lr}
 800633c:	b08a      	sub	sp, #40	; 0x28
 800633e:	af02      	add	r7, sp, #8
 8006340:	60f8      	str	r0, [r7, #12]
 8006342:	60b9      	str	r1, [r7, #8]
 8006344:	4613      	mov	r3, r2
 8006346:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d10a      	bne.n	8006364 <xQueueGenericCreate+0x2a>
	__asm volatile
 800634e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006352:	f383 8811 	msr	BASEPRI, r3
 8006356:	f3bf 8f6f 	isb	sy
 800635a:	f3bf 8f4f 	dsb	sy
 800635e:	613b      	str	r3, [r7, #16]
}
 8006360:	bf00      	nop
 8006362:	e7fe      	b.n	8006362 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d102      	bne.n	8006370 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800636a:	2300      	movs	r3, #0
 800636c:	61fb      	str	r3, [r7, #28]
 800636e:	e004      	b.n	800637a <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	68ba      	ldr	r2, [r7, #8]
 8006374:	fb02 f303 	mul.w	r3, r2, r3
 8006378:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800637a:	69fb      	ldr	r3, [r7, #28]
 800637c:	3350      	adds	r3, #80	; 0x50
 800637e:	4618      	mov	r0, r3
 8006380:	f002 fbb4 	bl	8008aec <pvPortMalloc>
 8006384:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006386:	69bb      	ldr	r3, [r7, #24]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d00f      	beq.n	80063ac <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800638c:	69bb      	ldr	r3, [r7, #24]
 800638e:	3350      	adds	r3, #80	; 0x50
 8006390:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006392:	69bb      	ldr	r3, [r7, #24]
 8006394:	2200      	movs	r2, #0
 8006396:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800639a:	79fa      	ldrb	r2, [r7, #7]
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	9300      	str	r3, [sp, #0]
 80063a0:	4613      	mov	r3, r2
 80063a2:	697a      	ldr	r2, [r7, #20]
 80063a4:	68b9      	ldr	r1, [r7, #8]
 80063a6:	68f8      	ldr	r0, [r7, #12]
 80063a8:	f000 f805 	bl	80063b6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80063ac:	69bb      	ldr	r3, [r7, #24]
	}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3720      	adds	r7, #32
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}

080063b6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80063b6:	b580      	push	{r7, lr}
 80063b8:	b084      	sub	sp, #16
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	60f8      	str	r0, [r7, #12]
 80063be:	60b9      	str	r1, [r7, #8]
 80063c0:	607a      	str	r2, [r7, #4]
 80063c2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d103      	bne.n	80063d2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80063ca:	69bb      	ldr	r3, [r7, #24]
 80063cc:	69ba      	ldr	r2, [r7, #24]
 80063ce:	601a      	str	r2, [r3, #0]
 80063d0:	e002      	b.n	80063d8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80063de:	69bb      	ldr	r3, [r7, #24]
 80063e0:	68ba      	ldr	r2, [r7, #8]
 80063e2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80063e4:	2101      	movs	r1, #1
 80063e6:	69b8      	ldr	r0, [r7, #24]
 80063e8:	f7ff fec8 	bl	800617c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80063ec:	69bb      	ldr	r3, [r7, #24]
 80063ee:	78fa      	ldrb	r2, [r7, #3]
 80063f0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80063f4:	bf00      	nop
 80063f6:	3710      	adds	r7, #16
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b08a      	sub	sp, #40	; 0x28
 8006400:	af02      	add	r7, sp, #8
 8006402:	60f8      	str	r0, [r7, #12]
 8006404:	60b9      	str	r1, [r7, #8]
 8006406:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d10a      	bne.n	8006424 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800640e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006412:	f383 8811 	msr	BASEPRI, r3
 8006416:	f3bf 8f6f 	isb	sy
 800641a:	f3bf 8f4f 	dsb	sy
 800641e:	61bb      	str	r3, [r7, #24]
}
 8006420:	bf00      	nop
 8006422:	e7fe      	b.n	8006422 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006424:	68ba      	ldr	r2, [r7, #8]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	429a      	cmp	r2, r3
 800642a:	d90a      	bls.n	8006442 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800642c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006430:	f383 8811 	msr	BASEPRI, r3
 8006434:	f3bf 8f6f 	isb	sy
 8006438:	f3bf 8f4f 	dsb	sy
 800643c:	617b      	str	r3, [r7, #20]
}
 800643e:	bf00      	nop
 8006440:	e7fe      	b.n	8006440 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006442:	2302      	movs	r3, #2
 8006444:	9300      	str	r3, [sp, #0]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	2100      	movs	r1, #0
 800644c:	68f8      	ldr	r0, [r7, #12]
 800644e:	f7ff fefd 	bl	800624c <xQueueGenericCreateStatic>
 8006452:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006454:	69fb      	ldr	r3, [r7, #28]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d002      	beq.n	8006460 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800645a:	69fb      	ldr	r3, [r7, #28]
 800645c:	68ba      	ldr	r2, [r7, #8]
 800645e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006460:	69fb      	ldr	r3, [r7, #28]
	}
 8006462:	4618      	mov	r0, r3
 8006464:	3720      	adds	r7, #32
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}

0800646a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800646a:	b580      	push	{r7, lr}
 800646c:	b086      	sub	sp, #24
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
 8006472:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d10a      	bne.n	8006490 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800647a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800647e:	f383 8811 	msr	BASEPRI, r3
 8006482:	f3bf 8f6f 	isb	sy
 8006486:	f3bf 8f4f 	dsb	sy
 800648a:	613b      	str	r3, [r7, #16]
}
 800648c:	bf00      	nop
 800648e:	e7fe      	b.n	800648e <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006490:	683a      	ldr	r2, [r7, #0]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	429a      	cmp	r2, r3
 8006496:	d90a      	bls.n	80064ae <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8006498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800649c:	f383 8811 	msr	BASEPRI, r3
 80064a0:	f3bf 8f6f 	isb	sy
 80064a4:	f3bf 8f4f 	dsb	sy
 80064a8:	60fb      	str	r3, [r7, #12]
}
 80064aa:	bf00      	nop
 80064ac:	e7fe      	b.n	80064ac <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80064ae:	2202      	movs	r2, #2
 80064b0:	2100      	movs	r1, #0
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f7ff ff41 	bl	800633a <xQueueGenericCreate>
 80064b8:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d002      	beq.n	80064c6 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	683a      	ldr	r2, [r7, #0]
 80064c4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80064c6:	697b      	ldr	r3, [r7, #20]
	}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3718      	adds	r7, #24
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b08e      	sub	sp, #56	; 0x38
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	60b9      	str	r1, [r7, #8]
 80064da:	607a      	str	r2, [r7, #4]
 80064dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80064de:	2300      	movs	r3, #0
 80064e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80064e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d10a      	bne.n	8006502 <xQueueGenericSend+0x32>
	__asm volatile
 80064ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f0:	f383 8811 	msr	BASEPRI, r3
 80064f4:	f3bf 8f6f 	isb	sy
 80064f8:	f3bf 8f4f 	dsb	sy
 80064fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80064fe:	bf00      	nop
 8006500:	e7fe      	b.n	8006500 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d103      	bne.n	8006510 <xQueueGenericSend+0x40>
 8006508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800650c:	2b00      	cmp	r3, #0
 800650e:	d101      	bne.n	8006514 <xQueueGenericSend+0x44>
 8006510:	2301      	movs	r3, #1
 8006512:	e000      	b.n	8006516 <xQueueGenericSend+0x46>
 8006514:	2300      	movs	r3, #0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d10a      	bne.n	8006530 <xQueueGenericSend+0x60>
	__asm volatile
 800651a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800651e:	f383 8811 	msr	BASEPRI, r3
 8006522:	f3bf 8f6f 	isb	sy
 8006526:	f3bf 8f4f 	dsb	sy
 800652a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800652c:	bf00      	nop
 800652e:	e7fe      	b.n	800652e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	2b02      	cmp	r3, #2
 8006534:	d103      	bne.n	800653e <xQueueGenericSend+0x6e>
 8006536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800653a:	2b01      	cmp	r3, #1
 800653c:	d101      	bne.n	8006542 <xQueueGenericSend+0x72>
 800653e:	2301      	movs	r3, #1
 8006540:	e000      	b.n	8006544 <xQueueGenericSend+0x74>
 8006542:	2300      	movs	r3, #0
 8006544:	2b00      	cmp	r3, #0
 8006546:	d10a      	bne.n	800655e <xQueueGenericSend+0x8e>
	__asm volatile
 8006548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800654c:	f383 8811 	msr	BASEPRI, r3
 8006550:	f3bf 8f6f 	isb	sy
 8006554:	f3bf 8f4f 	dsb	sy
 8006558:	623b      	str	r3, [r7, #32]
}
 800655a:	bf00      	nop
 800655c:	e7fe      	b.n	800655c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800655e:	f001 fbdd 	bl	8007d1c <xTaskGetSchedulerState>
 8006562:	4603      	mov	r3, r0
 8006564:	2b00      	cmp	r3, #0
 8006566:	d102      	bne.n	800656e <xQueueGenericSend+0x9e>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d101      	bne.n	8006572 <xQueueGenericSend+0xa2>
 800656e:	2301      	movs	r3, #1
 8006570:	e000      	b.n	8006574 <xQueueGenericSend+0xa4>
 8006572:	2300      	movs	r3, #0
 8006574:	2b00      	cmp	r3, #0
 8006576:	d10a      	bne.n	800658e <xQueueGenericSend+0xbe>
	__asm volatile
 8006578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800657c:	f383 8811 	msr	BASEPRI, r3
 8006580:	f3bf 8f6f 	isb	sy
 8006584:	f3bf 8f4f 	dsb	sy
 8006588:	61fb      	str	r3, [r7, #28]
}
 800658a:	bf00      	nop
 800658c:	e7fe      	b.n	800658c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800658e:	f002 f9ad 	bl	80088ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006594:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800659a:	429a      	cmp	r2, r3
 800659c:	d302      	bcc.n	80065a4 <xQueueGenericSend+0xd4>
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	2b02      	cmp	r3, #2
 80065a2:	d129      	bne.n	80065f8 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80065a4:	683a      	ldr	r2, [r7, #0]
 80065a6:	68b9      	ldr	r1, [r7, #8]
 80065a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065aa:	f000 fbdb 	bl	8006d64 <prvCopyDataToQueue>
 80065ae:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d010      	beq.n	80065da <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80065b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ba:	3324      	adds	r3, #36	; 0x24
 80065bc:	4618      	mov	r0, r3
 80065be:	f001 f9e7 	bl	8007990 <xTaskRemoveFromEventList>
 80065c2:	4603      	mov	r3, r0
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d013      	beq.n	80065f0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80065c8:	4b3f      	ldr	r3, [pc, #252]	; (80066c8 <xQueueGenericSend+0x1f8>)
 80065ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065ce:	601a      	str	r2, [r3, #0]
 80065d0:	f3bf 8f4f 	dsb	sy
 80065d4:	f3bf 8f6f 	isb	sy
 80065d8:	e00a      	b.n	80065f0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80065da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d007      	beq.n	80065f0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80065e0:	4b39      	ldr	r3, [pc, #228]	; (80066c8 <xQueueGenericSend+0x1f8>)
 80065e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065e6:	601a      	str	r2, [r3, #0]
 80065e8:	f3bf 8f4f 	dsb	sy
 80065ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80065f0:	f002 f9ac 	bl	800894c <vPortExitCritical>
				return pdPASS;
 80065f4:	2301      	movs	r3, #1
 80065f6:	e063      	b.n	80066c0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d103      	bne.n	8006606 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80065fe:	f002 f9a5 	bl	800894c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006602:	2300      	movs	r3, #0
 8006604:	e05c      	b.n	80066c0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006608:	2b00      	cmp	r3, #0
 800660a:	d106      	bne.n	800661a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800660c:	f107 0314 	add.w	r3, r7, #20
 8006610:	4618      	mov	r0, r3
 8006612:	f001 fa21 	bl	8007a58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006616:	2301      	movs	r3, #1
 8006618:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800661a:	f002 f997 	bl	800894c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800661e:	f000 ff8b 	bl	8007538 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006622:	f002 f963 	bl	80088ec <vPortEnterCritical>
 8006626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006628:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800662c:	b25b      	sxtb	r3, r3
 800662e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006632:	d103      	bne.n	800663c <xQueueGenericSend+0x16c>
 8006634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006636:	2200      	movs	r2, #0
 8006638:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800663c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006642:	b25b      	sxtb	r3, r3
 8006644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006648:	d103      	bne.n	8006652 <xQueueGenericSend+0x182>
 800664a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664c:	2200      	movs	r2, #0
 800664e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006652:	f002 f97b 	bl	800894c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006656:	1d3a      	adds	r2, r7, #4
 8006658:	f107 0314 	add.w	r3, r7, #20
 800665c:	4611      	mov	r1, r2
 800665e:	4618      	mov	r0, r3
 8006660:	f001 fa10 	bl	8007a84 <xTaskCheckForTimeOut>
 8006664:	4603      	mov	r3, r0
 8006666:	2b00      	cmp	r3, #0
 8006668:	d124      	bne.n	80066b4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800666a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800666c:	f000 fc72 	bl	8006f54 <prvIsQueueFull>
 8006670:	4603      	mov	r3, r0
 8006672:	2b00      	cmp	r3, #0
 8006674:	d018      	beq.n	80066a8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006678:	3310      	adds	r3, #16
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	4611      	mov	r1, r2
 800667e:	4618      	mov	r0, r3
 8006680:	f001 f936 	bl	80078f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006684:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006686:	f000 fbfd 	bl	8006e84 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800668a:	f000 ff63 	bl	8007554 <xTaskResumeAll>
 800668e:	4603      	mov	r3, r0
 8006690:	2b00      	cmp	r3, #0
 8006692:	f47f af7c 	bne.w	800658e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006696:	4b0c      	ldr	r3, [pc, #48]	; (80066c8 <xQueueGenericSend+0x1f8>)
 8006698:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800669c:	601a      	str	r2, [r3, #0]
 800669e:	f3bf 8f4f 	dsb	sy
 80066a2:	f3bf 8f6f 	isb	sy
 80066a6:	e772      	b.n	800658e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80066a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066aa:	f000 fbeb 	bl	8006e84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80066ae:	f000 ff51 	bl	8007554 <xTaskResumeAll>
 80066b2:	e76c      	b.n	800658e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80066b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066b6:	f000 fbe5 	bl	8006e84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80066ba:	f000 ff4b 	bl	8007554 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80066be:	2300      	movs	r3, #0
		}
	}
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3738      	adds	r7, #56	; 0x38
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}
 80066c8:	e000ed04 	.word	0xe000ed04

080066cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b08e      	sub	sp, #56	; 0x38
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	60f8      	str	r0, [r7, #12]
 80066d4:	60b9      	str	r1, [r7, #8]
 80066d6:	607a      	str	r2, [r7, #4]
 80066d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80066de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d10a      	bne.n	80066fa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80066e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e8:	f383 8811 	msr	BASEPRI, r3
 80066ec:	f3bf 8f6f 	isb	sy
 80066f0:	f3bf 8f4f 	dsb	sy
 80066f4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80066f6:	bf00      	nop
 80066f8:	e7fe      	b.n	80066f8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d103      	bne.n	8006708 <xQueueGenericSendFromISR+0x3c>
 8006700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006704:	2b00      	cmp	r3, #0
 8006706:	d101      	bne.n	800670c <xQueueGenericSendFromISR+0x40>
 8006708:	2301      	movs	r3, #1
 800670a:	e000      	b.n	800670e <xQueueGenericSendFromISR+0x42>
 800670c:	2300      	movs	r3, #0
 800670e:	2b00      	cmp	r3, #0
 8006710:	d10a      	bne.n	8006728 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006716:	f383 8811 	msr	BASEPRI, r3
 800671a:	f3bf 8f6f 	isb	sy
 800671e:	f3bf 8f4f 	dsb	sy
 8006722:	623b      	str	r3, [r7, #32]
}
 8006724:	bf00      	nop
 8006726:	e7fe      	b.n	8006726 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	2b02      	cmp	r3, #2
 800672c:	d103      	bne.n	8006736 <xQueueGenericSendFromISR+0x6a>
 800672e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006732:	2b01      	cmp	r3, #1
 8006734:	d101      	bne.n	800673a <xQueueGenericSendFromISR+0x6e>
 8006736:	2301      	movs	r3, #1
 8006738:	e000      	b.n	800673c <xQueueGenericSendFromISR+0x70>
 800673a:	2300      	movs	r3, #0
 800673c:	2b00      	cmp	r3, #0
 800673e:	d10a      	bne.n	8006756 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006744:	f383 8811 	msr	BASEPRI, r3
 8006748:	f3bf 8f6f 	isb	sy
 800674c:	f3bf 8f4f 	dsb	sy
 8006750:	61fb      	str	r3, [r7, #28]
}
 8006752:	bf00      	nop
 8006754:	e7fe      	b.n	8006754 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006756:	f002 f98b 	bl	8008a70 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800675a:	f3ef 8211 	mrs	r2, BASEPRI
 800675e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006762:	f383 8811 	msr	BASEPRI, r3
 8006766:	f3bf 8f6f 	isb	sy
 800676a:	f3bf 8f4f 	dsb	sy
 800676e:	61ba      	str	r2, [r7, #24]
 8006770:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006772:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006774:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006778:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800677a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800677e:	429a      	cmp	r2, r3
 8006780:	d302      	bcc.n	8006788 <xQueueGenericSendFromISR+0xbc>
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	2b02      	cmp	r3, #2
 8006786:	d12c      	bne.n	80067e2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800678a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800678e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006792:	683a      	ldr	r2, [r7, #0]
 8006794:	68b9      	ldr	r1, [r7, #8]
 8006796:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006798:	f000 fae4 	bl	8006d64 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800679c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80067a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067a4:	d112      	bne.n	80067cc <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d016      	beq.n	80067dc <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b0:	3324      	adds	r3, #36	; 0x24
 80067b2:	4618      	mov	r0, r3
 80067b4:	f001 f8ec 	bl	8007990 <xTaskRemoveFromEventList>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d00e      	beq.n	80067dc <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d00b      	beq.n	80067dc <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	601a      	str	r2, [r3, #0]
 80067ca:	e007      	b.n	80067dc <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80067cc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80067d0:	3301      	adds	r3, #1
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	b25a      	sxtb	r2, r3
 80067d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80067dc:	2301      	movs	r3, #1
 80067de:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80067e0:	e001      	b.n	80067e6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80067e2:	2300      	movs	r3, #0
 80067e4:	637b      	str	r3, [r7, #52]	; 0x34
 80067e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80067f0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80067f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3738      	adds	r7, #56	; 0x38
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}

080067fc <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b08e      	sub	sp, #56	; 0x38
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800680a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680c:	2b00      	cmp	r3, #0
 800680e:	d10a      	bne.n	8006826 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8006810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006814:	f383 8811 	msr	BASEPRI, r3
 8006818:	f3bf 8f6f 	isb	sy
 800681c:	f3bf 8f4f 	dsb	sy
 8006820:	623b      	str	r3, [r7, #32]
}
 8006822:	bf00      	nop
 8006824:	e7fe      	b.n	8006824 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800682a:	2b00      	cmp	r3, #0
 800682c:	d00a      	beq.n	8006844 <xQueueGiveFromISR+0x48>
	__asm volatile
 800682e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006832:	f383 8811 	msr	BASEPRI, r3
 8006836:	f3bf 8f6f 	isb	sy
 800683a:	f3bf 8f4f 	dsb	sy
 800683e:	61fb      	str	r3, [r7, #28]
}
 8006840:	bf00      	nop
 8006842:	e7fe      	b.n	8006842 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8006844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d103      	bne.n	8006854 <xQueueGiveFromISR+0x58>
 800684c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d101      	bne.n	8006858 <xQueueGiveFromISR+0x5c>
 8006854:	2301      	movs	r3, #1
 8006856:	e000      	b.n	800685a <xQueueGiveFromISR+0x5e>
 8006858:	2300      	movs	r3, #0
 800685a:	2b00      	cmp	r3, #0
 800685c:	d10a      	bne.n	8006874 <xQueueGiveFromISR+0x78>
	__asm volatile
 800685e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006862:	f383 8811 	msr	BASEPRI, r3
 8006866:	f3bf 8f6f 	isb	sy
 800686a:	f3bf 8f4f 	dsb	sy
 800686e:	61bb      	str	r3, [r7, #24]
}
 8006870:	bf00      	nop
 8006872:	e7fe      	b.n	8006872 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006874:	f002 f8fc 	bl	8008a70 <vPortValidateInterruptPriority>
	__asm volatile
 8006878:	f3ef 8211 	mrs	r2, BASEPRI
 800687c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006880:	f383 8811 	msr	BASEPRI, r3
 8006884:	f3bf 8f6f 	isb	sy
 8006888:	f3bf 8f4f 	dsb	sy
 800688c:	617a      	str	r2, [r7, #20]
 800688e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006890:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006892:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006898:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800689a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800689c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800689e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d22b      	bcs.n	80068fc <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80068a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80068ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b0:	1c5a      	adds	r2, r3, #1
 80068b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80068b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80068ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068be:	d112      	bne.n	80068e6 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80068c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d016      	beq.n	80068f6 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80068c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ca:	3324      	adds	r3, #36	; 0x24
 80068cc:	4618      	mov	r0, r3
 80068ce:	f001 f85f 	bl	8007990 <xTaskRemoveFromEventList>
 80068d2:	4603      	mov	r3, r0
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d00e      	beq.n	80068f6 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d00b      	beq.n	80068f6 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	2201      	movs	r2, #1
 80068e2:	601a      	str	r2, [r3, #0]
 80068e4:	e007      	b.n	80068f6 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80068e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80068ea:	3301      	adds	r3, #1
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	b25a      	sxtb	r2, r3
 80068f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80068f6:	2301      	movs	r3, #1
 80068f8:	637b      	str	r3, [r7, #52]	; 0x34
 80068fa:	e001      	b.n	8006900 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80068fc:	2300      	movs	r3, #0
 80068fe:	637b      	str	r3, [r7, #52]	; 0x34
 8006900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006902:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f383 8811 	msr	BASEPRI, r3
}
 800690a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800690c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800690e:	4618      	mov	r0, r3
 8006910:	3738      	adds	r7, #56	; 0x38
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
	...

08006918 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b08c      	sub	sp, #48	; 0x30
 800691c:	af00      	add	r7, sp, #0
 800691e:	60f8      	str	r0, [r7, #12]
 8006920:	60b9      	str	r1, [r7, #8]
 8006922:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006924:	2300      	movs	r3, #0
 8006926:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800692c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800692e:	2b00      	cmp	r3, #0
 8006930:	d10a      	bne.n	8006948 <xQueueReceive+0x30>
	__asm volatile
 8006932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006936:	f383 8811 	msr	BASEPRI, r3
 800693a:	f3bf 8f6f 	isb	sy
 800693e:	f3bf 8f4f 	dsb	sy
 8006942:	623b      	str	r3, [r7, #32]
}
 8006944:	bf00      	nop
 8006946:	e7fe      	b.n	8006946 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d103      	bne.n	8006956 <xQueueReceive+0x3e>
 800694e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006952:	2b00      	cmp	r3, #0
 8006954:	d101      	bne.n	800695a <xQueueReceive+0x42>
 8006956:	2301      	movs	r3, #1
 8006958:	e000      	b.n	800695c <xQueueReceive+0x44>
 800695a:	2300      	movs	r3, #0
 800695c:	2b00      	cmp	r3, #0
 800695e:	d10a      	bne.n	8006976 <xQueueReceive+0x5e>
	__asm volatile
 8006960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006964:	f383 8811 	msr	BASEPRI, r3
 8006968:	f3bf 8f6f 	isb	sy
 800696c:	f3bf 8f4f 	dsb	sy
 8006970:	61fb      	str	r3, [r7, #28]
}
 8006972:	bf00      	nop
 8006974:	e7fe      	b.n	8006974 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006976:	f001 f9d1 	bl	8007d1c <xTaskGetSchedulerState>
 800697a:	4603      	mov	r3, r0
 800697c:	2b00      	cmp	r3, #0
 800697e:	d102      	bne.n	8006986 <xQueueReceive+0x6e>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d101      	bne.n	800698a <xQueueReceive+0x72>
 8006986:	2301      	movs	r3, #1
 8006988:	e000      	b.n	800698c <xQueueReceive+0x74>
 800698a:	2300      	movs	r3, #0
 800698c:	2b00      	cmp	r3, #0
 800698e:	d10a      	bne.n	80069a6 <xQueueReceive+0x8e>
	__asm volatile
 8006990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006994:	f383 8811 	msr	BASEPRI, r3
 8006998:	f3bf 8f6f 	isb	sy
 800699c:	f3bf 8f4f 	dsb	sy
 80069a0:	61bb      	str	r3, [r7, #24]
}
 80069a2:	bf00      	nop
 80069a4:	e7fe      	b.n	80069a4 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80069a6:	f001 ffa1 	bl	80088ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80069aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ae:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80069b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d01f      	beq.n	80069f6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80069b6:	68b9      	ldr	r1, [r7, #8]
 80069b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069ba:	f000 fa3d 	bl	8006e38 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80069be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c0:	1e5a      	subs	r2, r3, #1
 80069c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c8:	691b      	ldr	r3, [r3, #16]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d00f      	beq.n	80069ee <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d0:	3310      	adds	r3, #16
 80069d2:	4618      	mov	r0, r3
 80069d4:	f000 ffdc 	bl	8007990 <xTaskRemoveFromEventList>
 80069d8:	4603      	mov	r3, r0
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d007      	beq.n	80069ee <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80069de:	4b3d      	ldr	r3, [pc, #244]	; (8006ad4 <xQueueReceive+0x1bc>)
 80069e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069e4:	601a      	str	r2, [r3, #0]
 80069e6:	f3bf 8f4f 	dsb	sy
 80069ea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80069ee:	f001 ffad 	bl	800894c <vPortExitCritical>
				return pdPASS;
 80069f2:	2301      	movs	r3, #1
 80069f4:	e069      	b.n	8006aca <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d103      	bne.n	8006a04 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80069fc:	f001 ffa6 	bl	800894c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006a00:	2300      	movs	r3, #0
 8006a02:	e062      	b.n	8006aca <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d106      	bne.n	8006a18 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a0a:	f107 0310 	add.w	r3, r7, #16
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f001 f822 	bl	8007a58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a14:	2301      	movs	r3, #1
 8006a16:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a18:	f001 ff98 	bl	800894c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a1c:	f000 fd8c 	bl	8007538 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a20:	f001 ff64 	bl	80088ec <vPortEnterCritical>
 8006a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a2a:	b25b      	sxtb	r3, r3
 8006a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a30:	d103      	bne.n	8006a3a <xQueueReceive+0x122>
 8006a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a34:	2200      	movs	r2, #0
 8006a36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a40:	b25b      	sxtb	r3, r3
 8006a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a46:	d103      	bne.n	8006a50 <xQueueReceive+0x138>
 8006a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a50:	f001 ff7c 	bl	800894c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a54:	1d3a      	adds	r2, r7, #4
 8006a56:	f107 0310 	add.w	r3, r7, #16
 8006a5a:	4611      	mov	r1, r2
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f001 f811 	bl	8007a84 <xTaskCheckForTimeOut>
 8006a62:	4603      	mov	r3, r0
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d123      	bne.n	8006ab0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a6a:	f000 fa5d 	bl	8006f28 <prvIsQueueEmpty>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d017      	beq.n	8006aa4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a76:	3324      	adds	r3, #36	; 0x24
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	4611      	mov	r1, r2
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f000 ff37 	bl	80078f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006a82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a84:	f000 f9fe 	bl	8006e84 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006a88:	f000 fd64 	bl	8007554 <xTaskResumeAll>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d189      	bne.n	80069a6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006a92:	4b10      	ldr	r3, [pc, #64]	; (8006ad4 <xQueueReceive+0x1bc>)
 8006a94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a98:	601a      	str	r2, [r3, #0]
 8006a9a:	f3bf 8f4f 	dsb	sy
 8006a9e:	f3bf 8f6f 	isb	sy
 8006aa2:	e780      	b.n	80069a6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006aa4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006aa6:	f000 f9ed 	bl	8006e84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006aaa:	f000 fd53 	bl	8007554 <xTaskResumeAll>
 8006aae:	e77a      	b.n	80069a6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006ab0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ab2:	f000 f9e7 	bl	8006e84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ab6:	f000 fd4d 	bl	8007554 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006aba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006abc:	f000 fa34 	bl	8006f28 <prvIsQueueEmpty>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	f43f af6f 	beq.w	80069a6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006ac8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3730      	adds	r7, #48	; 0x30
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	e000ed04 	.word	0xe000ed04

08006ad8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b08e      	sub	sp, #56	; 0x38
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006aea:	2300      	movs	r3, #0
 8006aec:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d10a      	bne.n	8006b0a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af8:	f383 8811 	msr	BASEPRI, r3
 8006afc:	f3bf 8f6f 	isb	sy
 8006b00:	f3bf 8f4f 	dsb	sy
 8006b04:	623b      	str	r3, [r7, #32]
}
 8006b06:	bf00      	nop
 8006b08:	e7fe      	b.n	8006b08 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d00a      	beq.n	8006b28 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b16:	f383 8811 	msr	BASEPRI, r3
 8006b1a:	f3bf 8f6f 	isb	sy
 8006b1e:	f3bf 8f4f 	dsb	sy
 8006b22:	61fb      	str	r3, [r7, #28]
}
 8006b24:	bf00      	nop
 8006b26:	e7fe      	b.n	8006b26 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b28:	f001 f8f8 	bl	8007d1c <xTaskGetSchedulerState>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d102      	bne.n	8006b38 <xQueueSemaphoreTake+0x60>
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d101      	bne.n	8006b3c <xQueueSemaphoreTake+0x64>
 8006b38:	2301      	movs	r3, #1
 8006b3a:	e000      	b.n	8006b3e <xQueueSemaphoreTake+0x66>
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d10a      	bne.n	8006b58 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b46:	f383 8811 	msr	BASEPRI, r3
 8006b4a:	f3bf 8f6f 	isb	sy
 8006b4e:	f3bf 8f4f 	dsb	sy
 8006b52:	61bb      	str	r3, [r7, #24]
}
 8006b54:	bf00      	nop
 8006b56:	e7fe      	b.n	8006b56 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b58:	f001 fec8 	bl	80088ec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b60:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d024      	beq.n	8006bb2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b6a:	1e5a      	subs	r2, r3, #1
 8006b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b6e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d104      	bne.n	8006b82 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8006b78:	f001 fa50 	bl	800801c <pvTaskIncrementMutexHeldCount>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b80:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b84:	691b      	ldr	r3, [r3, #16]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d00f      	beq.n	8006baa <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b8c:	3310      	adds	r3, #16
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f000 fefe 	bl	8007990 <xTaskRemoveFromEventList>
 8006b94:	4603      	mov	r3, r0
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d007      	beq.n	8006baa <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006b9a:	4b54      	ldr	r3, [pc, #336]	; (8006cec <xQueueSemaphoreTake+0x214>)
 8006b9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ba0:	601a      	str	r2, [r3, #0]
 8006ba2:	f3bf 8f4f 	dsb	sy
 8006ba6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006baa:	f001 fecf 	bl	800894c <vPortExitCritical>
				return pdPASS;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e097      	b.n	8006ce2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d111      	bne.n	8006bdc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d00a      	beq.n	8006bd4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc2:	f383 8811 	msr	BASEPRI, r3
 8006bc6:	f3bf 8f6f 	isb	sy
 8006bca:	f3bf 8f4f 	dsb	sy
 8006bce:	617b      	str	r3, [r7, #20]
}
 8006bd0:	bf00      	nop
 8006bd2:	e7fe      	b.n	8006bd2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006bd4:	f001 feba 	bl	800894c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	e082      	b.n	8006ce2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d106      	bne.n	8006bf0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006be2:	f107 030c 	add.w	r3, r7, #12
 8006be6:	4618      	mov	r0, r3
 8006be8:	f000 ff36 	bl	8007a58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006bec:	2301      	movs	r3, #1
 8006bee:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006bf0:	f001 feac 	bl	800894c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006bf4:	f000 fca0 	bl	8007538 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006bf8:	f001 fe78 	bl	80088ec <vPortEnterCritical>
 8006bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bfe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c02:	b25b      	sxtb	r3, r3
 8006c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c08:	d103      	bne.n	8006c12 <xQueueSemaphoreTake+0x13a>
 8006c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c18:	b25b      	sxtb	r3, r3
 8006c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c1e:	d103      	bne.n	8006c28 <xQueueSemaphoreTake+0x150>
 8006c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c22:	2200      	movs	r2, #0
 8006c24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c28:	f001 fe90 	bl	800894c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c2c:	463a      	mov	r2, r7
 8006c2e:	f107 030c 	add.w	r3, r7, #12
 8006c32:	4611      	mov	r1, r2
 8006c34:	4618      	mov	r0, r3
 8006c36:	f000 ff25 	bl	8007a84 <xTaskCheckForTimeOut>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d132      	bne.n	8006ca6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006c42:	f000 f971 	bl	8006f28 <prvIsQueueEmpty>
 8006c46:	4603      	mov	r3, r0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d026      	beq.n	8006c9a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d109      	bne.n	8006c68 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006c54:	f001 fe4a 	bl	80088ec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8006c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f001 f87b 	bl	8007d58 <xTaskPriorityInherit>
 8006c62:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006c64:	f001 fe72 	bl	800894c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c6a:	3324      	adds	r3, #36	; 0x24
 8006c6c:	683a      	ldr	r2, [r7, #0]
 8006c6e:	4611      	mov	r1, r2
 8006c70:	4618      	mov	r0, r3
 8006c72:	f000 fe3d 	bl	80078f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006c76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006c78:	f000 f904 	bl	8006e84 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006c7c:	f000 fc6a 	bl	8007554 <xTaskResumeAll>
 8006c80:	4603      	mov	r3, r0
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	f47f af68 	bne.w	8006b58 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006c88:	4b18      	ldr	r3, [pc, #96]	; (8006cec <xQueueSemaphoreTake+0x214>)
 8006c8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c8e:	601a      	str	r2, [r3, #0]
 8006c90:	f3bf 8f4f 	dsb	sy
 8006c94:	f3bf 8f6f 	isb	sy
 8006c98:	e75e      	b.n	8006b58 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006c9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006c9c:	f000 f8f2 	bl	8006e84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ca0:	f000 fc58 	bl	8007554 <xTaskResumeAll>
 8006ca4:	e758      	b.n	8006b58 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006ca6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ca8:	f000 f8ec 	bl	8006e84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006cac:	f000 fc52 	bl	8007554 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006cb0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006cb2:	f000 f939 	bl	8006f28 <prvIsQueueEmpty>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	f43f af4d 	beq.w	8006b58 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d00d      	beq.n	8006ce0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006cc4:	f001 fe12 	bl	80088ec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006cc8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006cca:	f000 f834 	bl	8006d36 <prvGetDisinheritPriorityAfterTimeout>
 8006cce:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8006cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f001 f91a 	bl	8007f10 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006cdc:	f001 fe36 	bl	800894c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006ce0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3738      	adds	r7, #56	; 0x38
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}
 8006cea:	bf00      	nop
 8006cec:	e000ed04 	.word	0xe000ed04

08006cf0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b084      	sub	sp, #16
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d10a      	bne.n	8006d18 <vQueueDelete+0x28>
	__asm volatile
 8006d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d06:	f383 8811 	msr	BASEPRI, r3
 8006d0a:	f3bf 8f6f 	isb	sy
 8006d0e:	f3bf 8f4f 	dsb	sy
 8006d12:	60bb      	str	r3, [r7, #8]
}
 8006d14:	bf00      	nop
 8006d16:	e7fe      	b.n	8006d16 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006d18:	68f8      	ldr	r0, [r7, #12]
 8006d1a:	f000 f95b 	bl	8006fd4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d102      	bne.n	8006d2e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8006d28:	68f8      	ldr	r0, [r7, #12]
 8006d2a:	f001 ffa3 	bl	8008c74 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006d2e:	bf00      	nop
 8006d30:	3710      	adds	r7, #16
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}

08006d36 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006d36:	b480      	push	{r7}
 8006d38:	b085      	sub	sp, #20
 8006d3a:	af00      	add	r7, sp, #0
 8006d3c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d006      	beq.n	8006d54 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006d50:	60fb      	str	r3, [r7, #12]
 8006d52:	e001      	b.n	8006d58 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006d54:	2300      	movs	r3, #0
 8006d56:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006d58:	68fb      	ldr	r3, [r7, #12]
	}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3714      	adds	r7, #20
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bc80      	pop	{r7}
 8006d62:	4770      	bx	lr

08006d64 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b086      	sub	sp, #24
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	60f8      	str	r0, [r7, #12]
 8006d6c:	60b9      	str	r1, [r7, #8]
 8006d6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006d70:	2300      	movs	r3, #0
 8006d72:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d78:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d10d      	bne.n	8006d9e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d14d      	bne.n	8006e26 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f001 f850 	bl	8007e34 <xTaskPriorityDisinherit>
 8006d94:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	605a      	str	r2, [r3, #4]
 8006d9c:	e043      	b.n	8006e26 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d119      	bne.n	8006dd8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6898      	ldr	r0, [r3, #8]
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dac:	461a      	mov	r2, r3
 8006dae:	68b9      	ldr	r1, [r7, #8]
 8006db0:	f002 f997 	bl	80090e2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	689a      	ldr	r2, [r3, #8]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dbc:	441a      	add	r2, r3
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	689a      	ldr	r2, [r3, #8]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d32b      	bcc.n	8006e26 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	609a      	str	r2, [r3, #8]
 8006dd6:	e026      	b.n	8006e26 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	68d8      	ldr	r0, [r3, #12]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de0:	461a      	mov	r2, r3
 8006de2:	68b9      	ldr	r1, [r7, #8]
 8006de4:	f002 f97d 	bl	80090e2 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	68da      	ldr	r2, [r3, #12]
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df0:	425b      	negs	r3, r3
 8006df2:	441a      	add	r2, r3
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	68da      	ldr	r2, [r3, #12]
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d207      	bcs.n	8006e14 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	685a      	ldr	r2, [r3, #4]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e0c:	425b      	negs	r3, r3
 8006e0e:	441a      	add	r2, r3
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2b02      	cmp	r3, #2
 8006e18:	d105      	bne.n	8006e26 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d002      	beq.n	8006e26 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	3b01      	subs	r3, #1
 8006e24:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	1c5a      	adds	r2, r3, #1
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006e2e:	697b      	ldr	r3, [r7, #20]
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3718      	adds	r7, #24
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b082      	sub	sp, #8
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d018      	beq.n	8006e7c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	68da      	ldr	r2, [r3, #12]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e52:	441a      	add	r2, r3
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	68da      	ldr	r2, [r3, #12]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d303      	bcc.n	8006e6c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	68d9      	ldr	r1, [r3, #12]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e74:	461a      	mov	r2, r3
 8006e76:	6838      	ldr	r0, [r7, #0]
 8006e78:	f002 f933 	bl	80090e2 <memcpy>
	}
}
 8006e7c:	bf00      	nop
 8006e7e:	3708      	adds	r7, #8
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006e8c:	f001 fd2e 	bl	80088ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e96:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e98:	e011      	b.n	8006ebe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d012      	beq.n	8006ec8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	3324      	adds	r3, #36	; 0x24
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f000 fd72 	bl	8007990 <xTaskRemoveFromEventList>
 8006eac:	4603      	mov	r3, r0
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d001      	beq.n	8006eb6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006eb2:	f000 fe49 	bl	8007b48 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006eb6:	7bfb      	ldrb	r3, [r7, #15]
 8006eb8:	3b01      	subs	r3, #1
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	dce9      	bgt.n	8006e9a <prvUnlockQueue+0x16>
 8006ec6:	e000      	b.n	8006eca <prvUnlockQueue+0x46>
					break;
 8006ec8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	22ff      	movs	r2, #255	; 0xff
 8006ece:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006ed2:	f001 fd3b 	bl	800894c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006ed6:	f001 fd09 	bl	80088ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ee0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006ee2:	e011      	b.n	8006f08 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	691b      	ldr	r3, [r3, #16]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d012      	beq.n	8006f12 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	3310      	adds	r3, #16
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f000 fd4d 	bl	8007990 <xTaskRemoveFromEventList>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d001      	beq.n	8006f00 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006efc:	f000 fe24 	bl	8007b48 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006f00:	7bbb      	ldrb	r3, [r7, #14]
 8006f02:	3b01      	subs	r3, #1
 8006f04:	b2db      	uxtb	r3, r3
 8006f06:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006f08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	dce9      	bgt.n	8006ee4 <prvUnlockQueue+0x60>
 8006f10:	e000      	b.n	8006f14 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006f12:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	22ff      	movs	r2, #255	; 0xff
 8006f18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006f1c:	f001 fd16 	bl	800894c <vPortExitCritical>
}
 8006f20:	bf00      	nop
 8006f22:	3710      	adds	r7, #16
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b084      	sub	sp, #16
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006f30:	f001 fcdc 	bl	80088ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d102      	bne.n	8006f42 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	60fb      	str	r3, [r7, #12]
 8006f40:	e001      	b.n	8006f46 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006f42:	2300      	movs	r3, #0
 8006f44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006f46:	f001 fd01 	bl	800894c <vPortExitCritical>

	return xReturn;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3710      	adds	r7, #16
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006f5c:	f001 fcc6 	bl	80088ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d102      	bne.n	8006f72 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	60fb      	str	r3, [r7, #12]
 8006f70:	e001      	b.n	8006f76 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006f72:	2300      	movs	r3, #0
 8006f74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006f76:	f001 fce9 	bl	800894c <vPortExitCritical>

	return xReturn;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3710      	adds	r7, #16
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006f84:	b480      	push	{r7}
 8006f86:	b085      	sub	sp, #20
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f8e:	2300      	movs	r3, #0
 8006f90:	60fb      	str	r3, [r7, #12]
 8006f92:	e014      	b.n	8006fbe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006f94:	4a0e      	ldr	r2, [pc, #56]	; (8006fd0 <vQueueAddToRegistry+0x4c>)
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d10b      	bne.n	8006fb8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006fa0:	490b      	ldr	r1, [pc, #44]	; (8006fd0 <vQueueAddToRegistry+0x4c>)
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	683a      	ldr	r2, [r7, #0]
 8006fa6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006faa:	4a09      	ldr	r2, [pc, #36]	; (8006fd0 <vQueueAddToRegistry+0x4c>)
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	00db      	lsls	r3, r3, #3
 8006fb0:	4413      	add	r3, r2
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006fb6:	e006      	b.n	8006fc6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	3301      	adds	r3, #1
 8006fbc:	60fb      	str	r3, [r7, #12]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2b07      	cmp	r3, #7
 8006fc2:	d9e7      	bls.n	8006f94 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006fc4:	bf00      	nop
 8006fc6:	bf00      	nop
 8006fc8:	3714      	adds	r7, #20
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bc80      	pop	{r7}
 8006fce:	4770      	bx	lr
 8006fd0:	20000bd0 	.word	0x20000bd0

08006fd4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b085      	sub	sp, #20
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006fdc:	2300      	movs	r3, #0
 8006fde:	60fb      	str	r3, [r7, #12]
 8006fe0:	e016      	b.n	8007010 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006fe2:	4a10      	ldr	r2, [pc, #64]	; (8007024 <vQueueUnregisterQueue+0x50>)
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	00db      	lsls	r3, r3, #3
 8006fe8:	4413      	add	r3, r2
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d10b      	bne.n	800700a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006ff2:	4a0c      	ldr	r2, [pc, #48]	; (8007024 <vQueueUnregisterQueue+0x50>)
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2100      	movs	r1, #0
 8006ff8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006ffc:	4a09      	ldr	r2, [pc, #36]	; (8007024 <vQueueUnregisterQueue+0x50>)
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	00db      	lsls	r3, r3, #3
 8007002:	4413      	add	r3, r2
 8007004:	2200      	movs	r2, #0
 8007006:	605a      	str	r2, [r3, #4]
				break;
 8007008:	e006      	b.n	8007018 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	3301      	adds	r3, #1
 800700e:	60fb      	str	r3, [r7, #12]
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2b07      	cmp	r3, #7
 8007014:	d9e5      	bls.n	8006fe2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007016:	bf00      	nop
 8007018:	bf00      	nop
 800701a:	3714      	adds	r7, #20
 800701c:	46bd      	mov	sp, r7
 800701e:	bc80      	pop	{r7}
 8007020:	4770      	bx	lr
 8007022:	bf00      	nop
 8007024:	20000bd0 	.word	0x20000bd0

08007028 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007028:	b580      	push	{r7, lr}
 800702a:	b086      	sub	sp, #24
 800702c:	af00      	add	r7, sp, #0
 800702e:	60f8      	str	r0, [r7, #12]
 8007030:	60b9      	str	r1, [r7, #8]
 8007032:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007038:	f001 fc58 	bl	80088ec <vPortEnterCritical>
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007042:	b25b      	sxtb	r3, r3
 8007044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007048:	d103      	bne.n	8007052 <vQueueWaitForMessageRestricted+0x2a>
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	2200      	movs	r2, #0
 800704e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007058:	b25b      	sxtb	r3, r3
 800705a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800705e:	d103      	bne.n	8007068 <vQueueWaitForMessageRestricted+0x40>
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	2200      	movs	r2, #0
 8007064:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007068:	f001 fc70 	bl	800894c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007070:	2b00      	cmp	r3, #0
 8007072:	d106      	bne.n	8007082 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	3324      	adds	r3, #36	; 0x24
 8007078:	687a      	ldr	r2, [r7, #4]
 800707a:	68b9      	ldr	r1, [r7, #8]
 800707c:	4618      	mov	r0, r3
 800707e:	f000 fc5b 	bl	8007938 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007082:	6978      	ldr	r0, [r7, #20]
 8007084:	f7ff fefe 	bl	8006e84 <prvUnlockQueue>
	}
 8007088:	bf00      	nop
 800708a:	3718      	adds	r7, #24
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007090:	b580      	push	{r7, lr}
 8007092:	b08e      	sub	sp, #56	; 0x38
 8007094:	af04      	add	r7, sp, #16
 8007096:	60f8      	str	r0, [r7, #12]
 8007098:	60b9      	str	r1, [r7, #8]
 800709a:	607a      	str	r2, [r7, #4]
 800709c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800709e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d10a      	bne.n	80070ba <xTaskCreateStatic+0x2a>
	__asm volatile
 80070a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a8:	f383 8811 	msr	BASEPRI, r3
 80070ac:	f3bf 8f6f 	isb	sy
 80070b0:	f3bf 8f4f 	dsb	sy
 80070b4:	623b      	str	r3, [r7, #32]
}
 80070b6:	bf00      	nop
 80070b8:	e7fe      	b.n	80070b8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80070ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d10a      	bne.n	80070d6 <xTaskCreateStatic+0x46>
	__asm volatile
 80070c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c4:	f383 8811 	msr	BASEPRI, r3
 80070c8:	f3bf 8f6f 	isb	sy
 80070cc:	f3bf 8f4f 	dsb	sy
 80070d0:	61fb      	str	r3, [r7, #28]
}
 80070d2:	bf00      	nop
 80070d4:	e7fe      	b.n	80070d4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80070d6:	23bc      	movs	r3, #188	; 0xbc
 80070d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	2bbc      	cmp	r3, #188	; 0xbc
 80070de:	d00a      	beq.n	80070f6 <xTaskCreateStatic+0x66>
	__asm volatile
 80070e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e4:	f383 8811 	msr	BASEPRI, r3
 80070e8:	f3bf 8f6f 	isb	sy
 80070ec:	f3bf 8f4f 	dsb	sy
 80070f0:	61bb      	str	r3, [r7, #24]
}
 80070f2:	bf00      	nop
 80070f4:	e7fe      	b.n	80070f4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80070f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d01e      	beq.n	800713a <xTaskCreateStatic+0xaa>
 80070fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d01b      	beq.n	800713a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007104:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007108:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800710a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800710c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710e:	2202      	movs	r2, #2
 8007110:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007114:	2300      	movs	r3, #0
 8007116:	9303      	str	r3, [sp, #12]
 8007118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711a:	9302      	str	r3, [sp, #8]
 800711c:	f107 0314 	add.w	r3, r7, #20
 8007120:	9301      	str	r3, [sp, #4]
 8007122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007124:	9300      	str	r3, [sp, #0]
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	68b9      	ldr	r1, [r7, #8]
 800712c:	68f8      	ldr	r0, [r7, #12]
 800712e:	f000 f851 	bl	80071d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007132:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007134:	f000 f8ec 	bl	8007310 <prvAddNewTaskToReadyList>
 8007138:	e001      	b.n	800713e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800713a:	2300      	movs	r3, #0
 800713c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800713e:	697b      	ldr	r3, [r7, #20]
	}
 8007140:	4618      	mov	r0, r3
 8007142:	3728      	adds	r7, #40	; 0x28
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007148:	b580      	push	{r7, lr}
 800714a:	b08c      	sub	sp, #48	; 0x30
 800714c:	af04      	add	r7, sp, #16
 800714e:	60f8      	str	r0, [r7, #12]
 8007150:	60b9      	str	r1, [r7, #8]
 8007152:	603b      	str	r3, [r7, #0]
 8007154:	4613      	mov	r3, r2
 8007156:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007158:	88fb      	ldrh	r3, [r7, #6]
 800715a:	009b      	lsls	r3, r3, #2
 800715c:	4618      	mov	r0, r3
 800715e:	f001 fcc5 	bl	8008aec <pvPortMalloc>
 8007162:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d00e      	beq.n	8007188 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800716a:	20bc      	movs	r0, #188	; 0xbc
 800716c:	f001 fcbe 	bl	8008aec <pvPortMalloc>
 8007170:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007172:	69fb      	ldr	r3, [r7, #28]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d003      	beq.n	8007180 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007178:	69fb      	ldr	r3, [r7, #28]
 800717a:	697a      	ldr	r2, [r7, #20]
 800717c:	631a      	str	r2, [r3, #48]	; 0x30
 800717e:	e005      	b.n	800718c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007180:	6978      	ldr	r0, [r7, #20]
 8007182:	f001 fd77 	bl	8008c74 <vPortFree>
 8007186:	e001      	b.n	800718c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007188:	2300      	movs	r3, #0
 800718a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800718c:	69fb      	ldr	r3, [r7, #28]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d017      	beq.n	80071c2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007192:	69fb      	ldr	r3, [r7, #28]
 8007194:	2200      	movs	r2, #0
 8007196:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800719a:	88fa      	ldrh	r2, [r7, #6]
 800719c:	2300      	movs	r3, #0
 800719e:	9303      	str	r3, [sp, #12]
 80071a0:	69fb      	ldr	r3, [r7, #28]
 80071a2:	9302      	str	r3, [sp, #8]
 80071a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a6:	9301      	str	r3, [sp, #4]
 80071a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071aa:	9300      	str	r3, [sp, #0]
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	68b9      	ldr	r1, [r7, #8]
 80071b0:	68f8      	ldr	r0, [r7, #12]
 80071b2:	f000 f80f 	bl	80071d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80071b6:	69f8      	ldr	r0, [r7, #28]
 80071b8:	f000 f8aa 	bl	8007310 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80071bc:	2301      	movs	r3, #1
 80071be:	61bb      	str	r3, [r7, #24]
 80071c0:	e002      	b.n	80071c8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80071c2:	f04f 33ff 	mov.w	r3, #4294967295
 80071c6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80071c8:	69bb      	ldr	r3, [r7, #24]
	}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3720      	adds	r7, #32
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}
	...

080071d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b088      	sub	sp, #32
 80071d8:	af00      	add	r7, sp, #0
 80071da:	60f8      	str	r0, [r7, #12]
 80071dc:	60b9      	str	r1, [r7, #8]
 80071de:	607a      	str	r2, [r7, #4]
 80071e0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80071e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	009b      	lsls	r3, r3, #2
 80071ea:	461a      	mov	r2, r3
 80071ec:	21a5      	movs	r1, #165	; 0xa5
 80071ee:	f001 ff86 	bl	80090fe <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80071f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80071fc:	3b01      	subs	r3, #1
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	4413      	add	r3, r2
 8007202:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007204:	69bb      	ldr	r3, [r7, #24]
 8007206:	f023 0307 	bic.w	r3, r3, #7
 800720a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800720c:	69bb      	ldr	r3, [r7, #24]
 800720e:	f003 0307 	and.w	r3, r3, #7
 8007212:	2b00      	cmp	r3, #0
 8007214:	d00a      	beq.n	800722c <prvInitialiseNewTask+0x58>
	__asm volatile
 8007216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800721a:	f383 8811 	msr	BASEPRI, r3
 800721e:	f3bf 8f6f 	isb	sy
 8007222:	f3bf 8f4f 	dsb	sy
 8007226:	617b      	str	r3, [r7, #20]
}
 8007228:	bf00      	nop
 800722a:	e7fe      	b.n	800722a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800722c:	2300      	movs	r3, #0
 800722e:	61fb      	str	r3, [r7, #28]
 8007230:	e012      	b.n	8007258 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007232:	68ba      	ldr	r2, [r7, #8]
 8007234:	69fb      	ldr	r3, [r7, #28]
 8007236:	4413      	add	r3, r2
 8007238:	7819      	ldrb	r1, [r3, #0]
 800723a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800723c:	69fb      	ldr	r3, [r7, #28]
 800723e:	4413      	add	r3, r2
 8007240:	3334      	adds	r3, #52	; 0x34
 8007242:	460a      	mov	r2, r1
 8007244:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007246:	68ba      	ldr	r2, [r7, #8]
 8007248:	69fb      	ldr	r3, [r7, #28]
 800724a:	4413      	add	r3, r2
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d006      	beq.n	8007260 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007252:	69fb      	ldr	r3, [r7, #28]
 8007254:	3301      	adds	r3, #1
 8007256:	61fb      	str	r3, [r7, #28]
 8007258:	69fb      	ldr	r3, [r7, #28]
 800725a:	2b0f      	cmp	r3, #15
 800725c:	d9e9      	bls.n	8007232 <prvInitialiseNewTask+0x5e>
 800725e:	e000      	b.n	8007262 <prvInitialiseNewTask+0x8e>
		{
			break;
 8007260:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007264:	2200      	movs	r2, #0
 8007266:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800726a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800726c:	2b37      	cmp	r3, #55	; 0x37
 800726e:	d901      	bls.n	8007274 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007270:	2337      	movs	r3, #55	; 0x37
 8007272:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007276:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007278:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800727a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800727c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800727e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007282:	2200      	movs	r2, #0
 8007284:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007288:	3304      	adds	r3, #4
 800728a:	4618      	mov	r0, r3
 800728c:	f7fe fee5 	bl	800605a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007292:	3318      	adds	r3, #24
 8007294:	4618      	mov	r0, r3
 8007296:	f7fe fee0 	bl	800605a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800729a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800729c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800729e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072a2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80072a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80072aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072ae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80072b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b2:	2200      	movs	r2, #0
 80072b4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80072b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ba:	2200      	movs	r2, #0
 80072bc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80072c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c2:	3354      	adds	r3, #84	; 0x54
 80072c4:	2260      	movs	r2, #96	; 0x60
 80072c6:	2100      	movs	r1, #0
 80072c8:	4618      	mov	r0, r3
 80072ca:	f001 ff18 	bl	80090fe <memset>
 80072ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d0:	4a0c      	ldr	r2, [pc, #48]	; (8007304 <prvInitialiseNewTask+0x130>)
 80072d2:	659a      	str	r2, [r3, #88]	; 0x58
 80072d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d6:	4a0c      	ldr	r2, [pc, #48]	; (8007308 <prvInitialiseNewTask+0x134>)
 80072d8:	65da      	str	r2, [r3, #92]	; 0x5c
 80072da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072dc:	4a0b      	ldr	r2, [pc, #44]	; (800730c <prvInitialiseNewTask+0x138>)
 80072de:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80072e0:	683a      	ldr	r2, [r7, #0]
 80072e2:	68f9      	ldr	r1, [r7, #12]
 80072e4:	69b8      	ldr	r0, [r7, #24]
 80072e6:	f001 fa13 	bl	8008710 <pxPortInitialiseStack>
 80072ea:	4602      	mov	r2, r0
 80072ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ee:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80072f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d002      	beq.n	80072fc <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80072f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072fa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80072fc:	bf00      	nop
 80072fe:	3720      	adds	r7, #32
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}
 8007304:	0800db98 	.word	0x0800db98
 8007308:	0800dbb8 	.word	0x0800dbb8
 800730c:	0800db78 	.word	0x0800db78

08007310 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b082      	sub	sp, #8
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007318:	f001 fae8 	bl	80088ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800731c:	4b2d      	ldr	r3, [pc, #180]	; (80073d4 <prvAddNewTaskToReadyList+0xc4>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	3301      	adds	r3, #1
 8007322:	4a2c      	ldr	r2, [pc, #176]	; (80073d4 <prvAddNewTaskToReadyList+0xc4>)
 8007324:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007326:	4b2c      	ldr	r3, [pc, #176]	; (80073d8 <prvAddNewTaskToReadyList+0xc8>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d109      	bne.n	8007342 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800732e:	4a2a      	ldr	r2, [pc, #168]	; (80073d8 <prvAddNewTaskToReadyList+0xc8>)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007334:	4b27      	ldr	r3, [pc, #156]	; (80073d4 <prvAddNewTaskToReadyList+0xc4>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	2b01      	cmp	r3, #1
 800733a:	d110      	bne.n	800735e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800733c:	f000 fc28 	bl	8007b90 <prvInitialiseTaskLists>
 8007340:	e00d      	b.n	800735e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007342:	4b26      	ldr	r3, [pc, #152]	; (80073dc <prvAddNewTaskToReadyList+0xcc>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d109      	bne.n	800735e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800734a:	4b23      	ldr	r3, [pc, #140]	; (80073d8 <prvAddNewTaskToReadyList+0xc8>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007354:	429a      	cmp	r2, r3
 8007356:	d802      	bhi.n	800735e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007358:	4a1f      	ldr	r2, [pc, #124]	; (80073d8 <prvAddNewTaskToReadyList+0xc8>)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800735e:	4b20      	ldr	r3, [pc, #128]	; (80073e0 <prvAddNewTaskToReadyList+0xd0>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	3301      	adds	r3, #1
 8007364:	4a1e      	ldr	r2, [pc, #120]	; (80073e0 <prvAddNewTaskToReadyList+0xd0>)
 8007366:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007368:	4b1d      	ldr	r3, [pc, #116]	; (80073e0 <prvAddNewTaskToReadyList+0xd0>)
 800736a:	681a      	ldr	r2, [r3, #0]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007374:	4b1b      	ldr	r3, [pc, #108]	; (80073e4 <prvAddNewTaskToReadyList+0xd4>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	429a      	cmp	r2, r3
 800737a:	d903      	bls.n	8007384 <prvAddNewTaskToReadyList+0x74>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007380:	4a18      	ldr	r2, [pc, #96]	; (80073e4 <prvAddNewTaskToReadyList+0xd4>)
 8007382:	6013      	str	r3, [r2, #0]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007388:	4613      	mov	r3, r2
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	4413      	add	r3, r2
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	4a15      	ldr	r2, [pc, #84]	; (80073e8 <prvAddNewTaskToReadyList+0xd8>)
 8007392:	441a      	add	r2, r3
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	3304      	adds	r3, #4
 8007398:	4619      	mov	r1, r3
 800739a:	4610      	mov	r0, r2
 800739c:	f7fe fe69 	bl	8006072 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80073a0:	f001 fad4 	bl	800894c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80073a4:	4b0d      	ldr	r3, [pc, #52]	; (80073dc <prvAddNewTaskToReadyList+0xcc>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d00e      	beq.n	80073ca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80073ac:	4b0a      	ldr	r3, [pc, #40]	; (80073d8 <prvAddNewTaskToReadyList+0xc8>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d207      	bcs.n	80073ca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80073ba:	4b0c      	ldr	r3, [pc, #48]	; (80073ec <prvAddNewTaskToReadyList+0xdc>)
 80073bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073c0:	601a      	str	r2, [r3, #0]
 80073c2:	f3bf 8f4f 	dsb	sy
 80073c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80073ca:	bf00      	nop
 80073cc:	3708      	adds	r7, #8
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	bf00      	nop
 80073d4:	200010e4 	.word	0x200010e4
 80073d8:	20000c10 	.word	0x20000c10
 80073dc:	200010f0 	.word	0x200010f0
 80073e0:	20001100 	.word	0x20001100
 80073e4:	200010ec 	.word	0x200010ec
 80073e8:	20000c14 	.word	0x20000c14
 80073ec:	e000ed04 	.word	0xe000ed04

080073f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b084      	sub	sp, #16
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80073f8:	2300      	movs	r3, #0
 80073fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d017      	beq.n	8007432 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007402:	4b13      	ldr	r3, [pc, #76]	; (8007450 <vTaskDelay+0x60>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d00a      	beq.n	8007420 <vTaskDelay+0x30>
	__asm volatile
 800740a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800740e:	f383 8811 	msr	BASEPRI, r3
 8007412:	f3bf 8f6f 	isb	sy
 8007416:	f3bf 8f4f 	dsb	sy
 800741a:	60bb      	str	r3, [r7, #8]
}
 800741c:	bf00      	nop
 800741e:	e7fe      	b.n	800741e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007420:	f000 f88a 	bl	8007538 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007424:	2100      	movs	r1, #0
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 fe0c 	bl	8008044 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800742c:	f000 f892 	bl	8007554 <xTaskResumeAll>
 8007430:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d107      	bne.n	8007448 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007438:	4b06      	ldr	r3, [pc, #24]	; (8007454 <vTaskDelay+0x64>)
 800743a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800743e:	601a      	str	r2, [r3, #0]
 8007440:	f3bf 8f4f 	dsb	sy
 8007444:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007448:	bf00      	nop
 800744a:	3710      	adds	r7, #16
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}
 8007450:	2000110c 	.word	0x2000110c
 8007454:	e000ed04 	.word	0xe000ed04

08007458 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b08a      	sub	sp, #40	; 0x28
 800745c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800745e:	2300      	movs	r3, #0
 8007460:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007462:	2300      	movs	r3, #0
 8007464:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007466:	463a      	mov	r2, r7
 8007468:	1d39      	adds	r1, r7, #4
 800746a:	f107 0308 	add.w	r3, r7, #8
 800746e:	4618      	mov	r0, r3
 8007470:	f7fe fda2 	bl	8005fb8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007474:	6839      	ldr	r1, [r7, #0]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	68ba      	ldr	r2, [r7, #8]
 800747a:	9202      	str	r2, [sp, #8]
 800747c:	9301      	str	r3, [sp, #4]
 800747e:	2300      	movs	r3, #0
 8007480:	9300      	str	r3, [sp, #0]
 8007482:	2300      	movs	r3, #0
 8007484:	460a      	mov	r2, r1
 8007486:	4924      	ldr	r1, [pc, #144]	; (8007518 <vTaskStartScheduler+0xc0>)
 8007488:	4824      	ldr	r0, [pc, #144]	; (800751c <vTaskStartScheduler+0xc4>)
 800748a:	f7ff fe01 	bl	8007090 <xTaskCreateStatic>
 800748e:	4603      	mov	r3, r0
 8007490:	4a23      	ldr	r2, [pc, #140]	; (8007520 <vTaskStartScheduler+0xc8>)
 8007492:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007494:	4b22      	ldr	r3, [pc, #136]	; (8007520 <vTaskStartScheduler+0xc8>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d002      	beq.n	80074a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800749c:	2301      	movs	r3, #1
 800749e:	617b      	str	r3, [r7, #20]
 80074a0:	e001      	b.n	80074a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80074a2:	2300      	movs	r3, #0
 80074a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d102      	bne.n	80074b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80074ac:	f000 fe1e 	bl	80080ec <xTimerCreateTimerTask>
 80074b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d11b      	bne.n	80074f0 <vTaskStartScheduler+0x98>
	__asm volatile
 80074b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074bc:	f383 8811 	msr	BASEPRI, r3
 80074c0:	f3bf 8f6f 	isb	sy
 80074c4:	f3bf 8f4f 	dsb	sy
 80074c8:	613b      	str	r3, [r7, #16]
}
 80074ca:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80074cc:	4b15      	ldr	r3, [pc, #84]	; (8007524 <vTaskStartScheduler+0xcc>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	3354      	adds	r3, #84	; 0x54
 80074d2:	4a15      	ldr	r2, [pc, #84]	; (8007528 <vTaskStartScheduler+0xd0>)
 80074d4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80074d6:	4b15      	ldr	r3, [pc, #84]	; (800752c <vTaskStartScheduler+0xd4>)
 80074d8:	f04f 32ff 	mov.w	r2, #4294967295
 80074dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80074de:	4b14      	ldr	r3, [pc, #80]	; (8007530 <vTaskStartScheduler+0xd8>)
 80074e0:	2201      	movs	r2, #1
 80074e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80074e4:	4b13      	ldr	r3, [pc, #76]	; (8007534 <vTaskStartScheduler+0xdc>)
 80074e6:	2200      	movs	r2, #0
 80074e8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80074ea:	f001 f98d 	bl	8008808 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80074ee:	e00e      	b.n	800750e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074f6:	d10a      	bne.n	800750e <vTaskStartScheduler+0xb6>
	__asm volatile
 80074f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074fc:	f383 8811 	msr	BASEPRI, r3
 8007500:	f3bf 8f6f 	isb	sy
 8007504:	f3bf 8f4f 	dsb	sy
 8007508:	60fb      	str	r3, [r7, #12]
}
 800750a:	bf00      	nop
 800750c:	e7fe      	b.n	800750c <vTaskStartScheduler+0xb4>
}
 800750e:	bf00      	nop
 8007510:	3718      	adds	r7, #24
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}
 8007516:	bf00      	nop
 8007518:	0800d8ec 	.word	0x0800d8ec
 800751c:	08007b61 	.word	0x08007b61
 8007520:	20001108 	.word	0x20001108
 8007524:	20000c10 	.word	0x20000c10
 8007528:	20000010 	.word	0x20000010
 800752c:	20001104 	.word	0x20001104
 8007530:	200010f0 	.word	0x200010f0
 8007534:	200010e8 	.word	0x200010e8

08007538 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007538:	b480      	push	{r7}
 800753a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800753c:	4b04      	ldr	r3, [pc, #16]	; (8007550 <vTaskSuspendAll+0x18>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	3301      	adds	r3, #1
 8007542:	4a03      	ldr	r2, [pc, #12]	; (8007550 <vTaskSuspendAll+0x18>)
 8007544:	6013      	str	r3, [r2, #0]
}
 8007546:	bf00      	nop
 8007548:	46bd      	mov	sp, r7
 800754a:	bc80      	pop	{r7}
 800754c:	4770      	bx	lr
 800754e:	bf00      	nop
 8007550:	2000110c 	.word	0x2000110c

08007554 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800755a:	2300      	movs	r3, #0
 800755c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800755e:	2300      	movs	r3, #0
 8007560:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007562:	4b42      	ldr	r3, [pc, #264]	; (800766c <xTaskResumeAll+0x118>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d10a      	bne.n	8007580 <xTaskResumeAll+0x2c>
	__asm volatile
 800756a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800756e:	f383 8811 	msr	BASEPRI, r3
 8007572:	f3bf 8f6f 	isb	sy
 8007576:	f3bf 8f4f 	dsb	sy
 800757a:	603b      	str	r3, [r7, #0]
}
 800757c:	bf00      	nop
 800757e:	e7fe      	b.n	800757e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007580:	f001 f9b4 	bl	80088ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007584:	4b39      	ldr	r3, [pc, #228]	; (800766c <xTaskResumeAll+0x118>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	3b01      	subs	r3, #1
 800758a:	4a38      	ldr	r2, [pc, #224]	; (800766c <xTaskResumeAll+0x118>)
 800758c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800758e:	4b37      	ldr	r3, [pc, #220]	; (800766c <xTaskResumeAll+0x118>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d162      	bne.n	800765c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007596:	4b36      	ldr	r3, [pc, #216]	; (8007670 <xTaskResumeAll+0x11c>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d05e      	beq.n	800765c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800759e:	e02f      	b.n	8007600 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80075a0:	4b34      	ldr	r3, [pc, #208]	; (8007674 <xTaskResumeAll+0x120>)
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	68db      	ldr	r3, [r3, #12]
 80075a6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	3318      	adds	r3, #24
 80075ac:	4618      	mov	r0, r3
 80075ae:	f7fe fdbb 	bl	8006128 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	3304      	adds	r3, #4
 80075b6:	4618      	mov	r0, r3
 80075b8:	f7fe fdb6 	bl	8006128 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075c0:	4b2d      	ldr	r3, [pc, #180]	; (8007678 <xTaskResumeAll+0x124>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d903      	bls.n	80075d0 <xTaskResumeAll+0x7c>
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075cc:	4a2a      	ldr	r2, [pc, #168]	; (8007678 <xTaskResumeAll+0x124>)
 80075ce:	6013      	str	r3, [r2, #0]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075d4:	4613      	mov	r3, r2
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	4413      	add	r3, r2
 80075da:	009b      	lsls	r3, r3, #2
 80075dc:	4a27      	ldr	r2, [pc, #156]	; (800767c <xTaskResumeAll+0x128>)
 80075de:	441a      	add	r2, r3
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	3304      	adds	r3, #4
 80075e4:	4619      	mov	r1, r3
 80075e6:	4610      	mov	r0, r2
 80075e8:	f7fe fd43 	bl	8006072 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075f0:	4b23      	ldr	r3, [pc, #140]	; (8007680 <xTaskResumeAll+0x12c>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f6:	429a      	cmp	r2, r3
 80075f8:	d302      	bcc.n	8007600 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80075fa:	4b22      	ldr	r3, [pc, #136]	; (8007684 <xTaskResumeAll+0x130>)
 80075fc:	2201      	movs	r2, #1
 80075fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007600:	4b1c      	ldr	r3, [pc, #112]	; (8007674 <xTaskResumeAll+0x120>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d1cb      	bne.n	80075a0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d001      	beq.n	8007612 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800760e:	f000 fb61 	bl	8007cd4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007612:	4b1d      	ldr	r3, [pc, #116]	; (8007688 <xTaskResumeAll+0x134>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d010      	beq.n	8007640 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800761e:	f000 f845 	bl	80076ac <xTaskIncrementTick>
 8007622:	4603      	mov	r3, r0
 8007624:	2b00      	cmp	r3, #0
 8007626:	d002      	beq.n	800762e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007628:	4b16      	ldr	r3, [pc, #88]	; (8007684 <xTaskResumeAll+0x130>)
 800762a:	2201      	movs	r2, #1
 800762c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	3b01      	subs	r3, #1
 8007632:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d1f1      	bne.n	800761e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800763a:	4b13      	ldr	r3, [pc, #76]	; (8007688 <xTaskResumeAll+0x134>)
 800763c:	2200      	movs	r2, #0
 800763e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007640:	4b10      	ldr	r3, [pc, #64]	; (8007684 <xTaskResumeAll+0x130>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d009      	beq.n	800765c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007648:	2301      	movs	r3, #1
 800764a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800764c:	4b0f      	ldr	r3, [pc, #60]	; (800768c <xTaskResumeAll+0x138>)
 800764e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007652:	601a      	str	r2, [r3, #0]
 8007654:	f3bf 8f4f 	dsb	sy
 8007658:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800765c:	f001 f976 	bl	800894c <vPortExitCritical>

	return xAlreadyYielded;
 8007660:	68bb      	ldr	r3, [r7, #8]
}
 8007662:	4618      	mov	r0, r3
 8007664:	3710      	adds	r7, #16
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
 800766a:	bf00      	nop
 800766c:	2000110c 	.word	0x2000110c
 8007670:	200010e4 	.word	0x200010e4
 8007674:	200010a4 	.word	0x200010a4
 8007678:	200010ec 	.word	0x200010ec
 800767c:	20000c14 	.word	0x20000c14
 8007680:	20000c10 	.word	0x20000c10
 8007684:	200010f8 	.word	0x200010f8
 8007688:	200010f4 	.word	0x200010f4
 800768c:	e000ed04 	.word	0xe000ed04

08007690 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007690:	b480      	push	{r7}
 8007692:	b083      	sub	sp, #12
 8007694:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007696:	4b04      	ldr	r3, [pc, #16]	; (80076a8 <xTaskGetTickCount+0x18>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800769c:	687b      	ldr	r3, [r7, #4]
}
 800769e:	4618      	mov	r0, r3
 80076a0:	370c      	adds	r7, #12
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bc80      	pop	{r7}
 80076a6:	4770      	bx	lr
 80076a8:	200010e8 	.word	0x200010e8

080076ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b086      	sub	sp, #24
 80076b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80076b2:	2300      	movs	r3, #0
 80076b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076b6:	4b51      	ldr	r3, [pc, #324]	; (80077fc <xTaskIncrementTick+0x150>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	f040 808e 	bne.w	80077dc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80076c0:	4b4f      	ldr	r3, [pc, #316]	; (8007800 <xTaskIncrementTick+0x154>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	3301      	adds	r3, #1
 80076c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80076c8:	4a4d      	ldr	r2, [pc, #308]	; (8007800 <xTaskIncrementTick+0x154>)
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d120      	bne.n	8007716 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80076d4:	4b4b      	ldr	r3, [pc, #300]	; (8007804 <xTaskIncrementTick+0x158>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d00a      	beq.n	80076f4 <xTaskIncrementTick+0x48>
	__asm volatile
 80076de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e2:	f383 8811 	msr	BASEPRI, r3
 80076e6:	f3bf 8f6f 	isb	sy
 80076ea:	f3bf 8f4f 	dsb	sy
 80076ee:	603b      	str	r3, [r7, #0]
}
 80076f0:	bf00      	nop
 80076f2:	e7fe      	b.n	80076f2 <xTaskIncrementTick+0x46>
 80076f4:	4b43      	ldr	r3, [pc, #268]	; (8007804 <xTaskIncrementTick+0x158>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	60fb      	str	r3, [r7, #12]
 80076fa:	4b43      	ldr	r3, [pc, #268]	; (8007808 <xTaskIncrementTick+0x15c>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a41      	ldr	r2, [pc, #260]	; (8007804 <xTaskIncrementTick+0x158>)
 8007700:	6013      	str	r3, [r2, #0]
 8007702:	4a41      	ldr	r2, [pc, #260]	; (8007808 <xTaskIncrementTick+0x15c>)
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	6013      	str	r3, [r2, #0]
 8007708:	4b40      	ldr	r3, [pc, #256]	; (800780c <xTaskIncrementTick+0x160>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	3301      	adds	r3, #1
 800770e:	4a3f      	ldr	r2, [pc, #252]	; (800780c <xTaskIncrementTick+0x160>)
 8007710:	6013      	str	r3, [r2, #0]
 8007712:	f000 fadf 	bl	8007cd4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007716:	4b3e      	ldr	r3, [pc, #248]	; (8007810 <xTaskIncrementTick+0x164>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	693a      	ldr	r2, [r7, #16]
 800771c:	429a      	cmp	r2, r3
 800771e:	d34e      	bcc.n	80077be <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007720:	4b38      	ldr	r3, [pc, #224]	; (8007804 <xTaskIncrementTick+0x158>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d101      	bne.n	800772e <xTaskIncrementTick+0x82>
 800772a:	2301      	movs	r3, #1
 800772c:	e000      	b.n	8007730 <xTaskIncrementTick+0x84>
 800772e:	2300      	movs	r3, #0
 8007730:	2b00      	cmp	r3, #0
 8007732:	d004      	beq.n	800773e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007734:	4b36      	ldr	r3, [pc, #216]	; (8007810 <xTaskIncrementTick+0x164>)
 8007736:	f04f 32ff 	mov.w	r2, #4294967295
 800773a:	601a      	str	r2, [r3, #0]
					break;
 800773c:	e03f      	b.n	80077be <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800773e:	4b31      	ldr	r3, [pc, #196]	; (8007804 <xTaskIncrementTick+0x158>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	68db      	ldr	r3, [r3, #12]
 8007744:	68db      	ldr	r3, [r3, #12]
 8007746:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800774e:	693a      	ldr	r2, [r7, #16]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	429a      	cmp	r2, r3
 8007754:	d203      	bcs.n	800775e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007756:	4a2e      	ldr	r2, [pc, #184]	; (8007810 <xTaskIncrementTick+0x164>)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6013      	str	r3, [r2, #0]
						break;
 800775c:	e02f      	b.n	80077be <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	3304      	adds	r3, #4
 8007762:	4618      	mov	r0, r3
 8007764:	f7fe fce0 	bl	8006128 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800776c:	2b00      	cmp	r3, #0
 800776e:	d004      	beq.n	800777a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	3318      	adds	r3, #24
 8007774:	4618      	mov	r0, r3
 8007776:	f7fe fcd7 	bl	8006128 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800777e:	4b25      	ldr	r3, [pc, #148]	; (8007814 <xTaskIncrementTick+0x168>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	429a      	cmp	r2, r3
 8007784:	d903      	bls.n	800778e <xTaskIncrementTick+0xe2>
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800778a:	4a22      	ldr	r2, [pc, #136]	; (8007814 <xTaskIncrementTick+0x168>)
 800778c:	6013      	str	r3, [r2, #0]
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007792:	4613      	mov	r3, r2
 8007794:	009b      	lsls	r3, r3, #2
 8007796:	4413      	add	r3, r2
 8007798:	009b      	lsls	r3, r3, #2
 800779a:	4a1f      	ldr	r2, [pc, #124]	; (8007818 <xTaskIncrementTick+0x16c>)
 800779c:	441a      	add	r2, r3
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	3304      	adds	r3, #4
 80077a2:	4619      	mov	r1, r3
 80077a4:	4610      	mov	r0, r2
 80077a6:	f7fe fc64 	bl	8006072 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077ae:	4b1b      	ldr	r3, [pc, #108]	; (800781c <xTaskIncrementTick+0x170>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d3b3      	bcc.n	8007720 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80077b8:	2301      	movs	r3, #1
 80077ba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80077bc:	e7b0      	b.n	8007720 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80077be:	4b17      	ldr	r3, [pc, #92]	; (800781c <xTaskIncrementTick+0x170>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077c4:	4914      	ldr	r1, [pc, #80]	; (8007818 <xTaskIncrementTick+0x16c>)
 80077c6:	4613      	mov	r3, r2
 80077c8:	009b      	lsls	r3, r3, #2
 80077ca:	4413      	add	r3, r2
 80077cc:	009b      	lsls	r3, r3, #2
 80077ce:	440b      	add	r3, r1
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d907      	bls.n	80077e6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80077d6:	2301      	movs	r3, #1
 80077d8:	617b      	str	r3, [r7, #20]
 80077da:	e004      	b.n	80077e6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80077dc:	4b10      	ldr	r3, [pc, #64]	; (8007820 <xTaskIncrementTick+0x174>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	3301      	adds	r3, #1
 80077e2:	4a0f      	ldr	r2, [pc, #60]	; (8007820 <xTaskIncrementTick+0x174>)
 80077e4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80077e6:	4b0f      	ldr	r3, [pc, #60]	; (8007824 <xTaskIncrementTick+0x178>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d001      	beq.n	80077f2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80077ee:	2301      	movs	r3, #1
 80077f0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80077f2:	697b      	ldr	r3, [r7, #20]
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	3718      	adds	r7, #24
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}
 80077fc:	2000110c 	.word	0x2000110c
 8007800:	200010e8 	.word	0x200010e8
 8007804:	2000109c 	.word	0x2000109c
 8007808:	200010a0 	.word	0x200010a0
 800780c:	200010fc 	.word	0x200010fc
 8007810:	20001104 	.word	0x20001104
 8007814:	200010ec 	.word	0x200010ec
 8007818:	20000c14 	.word	0x20000c14
 800781c:	20000c10 	.word	0x20000c10
 8007820:	200010f4 	.word	0x200010f4
 8007824:	200010f8 	.word	0x200010f8

08007828 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007828:	b480      	push	{r7}
 800782a:	b085      	sub	sp, #20
 800782c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800782e:	4b2a      	ldr	r3, [pc, #168]	; (80078d8 <vTaskSwitchContext+0xb0>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d003      	beq.n	800783e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007836:	4b29      	ldr	r3, [pc, #164]	; (80078dc <vTaskSwitchContext+0xb4>)
 8007838:	2201      	movs	r2, #1
 800783a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800783c:	e046      	b.n	80078cc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800783e:	4b27      	ldr	r3, [pc, #156]	; (80078dc <vTaskSwitchContext+0xb4>)
 8007840:	2200      	movs	r2, #0
 8007842:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007844:	4b26      	ldr	r3, [pc, #152]	; (80078e0 <vTaskSwitchContext+0xb8>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	60fb      	str	r3, [r7, #12]
 800784a:	e010      	b.n	800786e <vTaskSwitchContext+0x46>
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d10a      	bne.n	8007868 <vTaskSwitchContext+0x40>
	__asm volatile
 8007852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007856:	f383 8811 	msr	BASEPRI, r3
 800785a:	f3bf 8f6f 	isb	sy
 800785e:	f3bf 8f4f 	dsb	sy
 8007862:	607b      	str	r3, [r7, #4]
}
 8007864:	bf00      	nop
 8007866:	e7fe      	b.n	8007866 <vTaskSwitchContext+0x3e>
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	3b01      	subs	r3, #1
 800786c:	60fb      	str	r3, [r7, #12]
 800786e:	491d      	ldr	r1, [pc, #116]	; (80078e4 <vTaskSwitchContext+0xbc>)
 8007870:	68fa      	ldr	r2, [r7, #12]
 8007872:	4613      	mov	r3, r2
 8007874:	009b      	lsls	r3, r3, #2
 8007876:	4413      	add	r3, r2
 8007878:	009b      	lsls	r3, r3, #2
 800787a:	440b      	add	r3, r1
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d0e4      	beq.n	800784c <vTaskSwitchContext+0x24>
 8007882:	68fa      	ldr	r2, [r7, #12]
 8007884:	4613      	mov	r3, r2
 8007886:	009b      	lsls	r3, r3, #2
 8007888:	4413      	add	r3, r2
 800788a:	009b      	lsls	r3, r3, #2
 800788c:	4a15      	ldr	r2, [pc, #84]	; (80078e4 <vTaskSwitchContext+0xbc>)
 800788e:	4413      	add	r3, r2
 8007890:	60bb      	str	r3, [r7, #8]
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	685a      	ldr	r2, [r3, #4]
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	605a      	str	r2, [r3, #4]
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	685a      	ldr	r2, [r3, #4]
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	3308      	adds	r3, #8
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d104      	bne.n	80078b2 <vTaskSwitchContext+0x8a>
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	685a      	ldr	r2, [r3, #4]
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	605a      	str	r2, [r3, #4]
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	68db      	ldr	r3, [r3, #12]
 80078b8:	4a0b      	ldr	r2, [pc, #44]	; (80078e8 <vTaskSwitchContext+0xc0>)
 80078ba:	6013      	str	r3, [r2, #0]
 80078bc:	4a08      	ldr	r2, [pc, #32]	; (80078e0 <vTaskSwitchContext+0xb8>)
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80078c2:	4b09      	ldr	r3, [pc, #36]	; (80078e8 <vTaskSwitchContext+0xc0>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	3354      	adds	r3, #84	; 0x54
 80078c8:	4a08      	ldr	r2, [pc, #32]	; (80078ec <vTaskSwitchContext+0xc4>)
 80078ca:	6013      	str	r3, [r2, #0]
}
 80078cc:	bf00      	nop
 80078ce:	3714      	adds	r7, #20
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bc80      	pop	{r7}
 80078d4:	4770      	bx	lr
 80078d6:	bf00      	nop
 80078d8:	2000110c 	.word	0x2000110c
 80078dc:	200010f8 	.word	0x200010f8
 80078e0:	200010ec 	.word	0x200010ec
 80078e4:	20000c14 	.word	0x20000c14
 80078e8:	20000c10 	.word	0x20000c10
 80078ec:	20000010 	.word	0x20000010

080078f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b084      	sub	sp, #16
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d10a      	bne.n	8007916 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007904:	f383 8811 	msr	BASEPRI, r3
 8007908:	f3bf 8f6f 	isb	sy
 800790c:	f3bf 8f4f 	dsb	sy
 8007910:	60fb      	str	r3, [r7, #12]
}
 8007912:	bf00      	nop
 8007914:	e7fe      	b.n	8007914 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007916:	4b07      	ldr	r3, [pc, #28]	; (8007934 <vTaskPlaceOnEventList+0x44>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	3318      	adds	r3, #24
 800791c:	4619      	mov	r1, r3
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f7fe fbca 	bl	80060b8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007924:	2101      	movs	r1, #1
 8007926:	6838      	ldr	r0, [r7, #0]
 8007928:	f000 fb8c 	bl	8008044 <prvAddCurrentTaskToDelayedList>
}
 800792c:	bf00      	nop
 800792e:	3710      	adds	r7, #16
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}
 8007934:	20000c10 	.word	0x20000c10

08007938 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007938:	b580      	push	{r7, lr}
 800793a:	b086      	sub	sp, #24
 800793c:	af00      	add	r7, sp, #0
 800793e:	60f8      	str	r0, [r7, #12]
 8007940:	60b9      	str	r1, [r7, #8]
 8007942:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d10a      	bne.n	8007960 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800794a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800794e:	f383 8811 	msr	BASEPRI, r3
 8007952:	f3bf 8f6f 	isb	sy
 8007956:	f3bf 8f4f 	dsb	sy
 800795a:	617b      	str	r3, [r7, #20]
}
 800795c:	bf00      	nop
 800795e:	e7fe      	b.n	800795e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007960:	4b0a      	ldr	r3, [pc, #40]	; (800798c <vTaskPlaceOnEventListRestricted+0x54>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	3318      	adds	r3, #24
 8007966:	4619      	mov	r1, r3
 8007968:	68f8      	ldr	r0, [r7, #12]
 800796a:	f7fe fb82 	bl	8006072 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d002      	beq.n	800797a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007974:	f04f 33ff 	mov.w	r3, #4294967295
 8007978:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800797a:	6879      	ldr	r1, [r7, #4]
 800797c:	68b8      	ldr	r0, [r7, #8]
 800797e:	f000 fb61 	bl	8008044 <prvAddCurrentTaskToDelayedList>
	}
 8007982:	bf00      	nop
 8007984:	3718      	adds	r7, #24
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
 800798a:	bf00      	nop
 800798c:	20000c10 	.word	0x20000c10

08007990 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b086      	sub	sp, #24
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	68db      	ldr	r3, [r3, #12]
 800799c:	68db      	ldr	r3, [r3, #12]
 800799e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80079a0:	693b      	ldr	r3, [r7, #16]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d10a      	bne.n	80079bc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80079a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079aa:	f383 8811 	msr	BASEPRI, r3
 80079ae:	f3bf 8f6f 	isb	sy
 80079b2:	f3bf 8f4f 	dsb	sy
 80079b6:	60fb      	str	r3, [r7, #12]
}
 80079b8:	bf00      	nop
 80079ba:	e7fe      	b.n	80079ba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	3318      	adds	r3, #24
 80079c0:	4618      	mov	r0, r3
 80079c2:	f7fe fbb1 	bl	8006128 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079c6:	4b1e      	ldr	r3, [pc, #120]	; (8007a40 <xTaskRemoveFromEventList+0xb0>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d11d      	bne.n	8007a0a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	3304      	adds	r3, #4
 80079d2:	4618      	mov	r0, r3
 80079d4:	f7fe fba8 	bl	8006128 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079dc:	4b19      	ldr	r3, [pc, #100]	; (8007a44 <xTaskRemoveFromEventList+0xb4>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	429a      	cmp	r2, r3
 80079e2:	d903      	bls.n	80079ec <xTaskRemoveFromEventList+0x5c>
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e8:	4a16      	ldr	r2, [pc, #88]	; (8007a44 <xTaskRemoveFromEventList+0xb4>)
 80079ea:	6013      	str	r3, [r2, #0]
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079f0:	4613      	mov	r3, r2
 80079f2:	009b      	lsls	r3, r3, #2
 80079f4:	4413      	add	r3, r2
 80079f6:	009b      	lsls	r3, r3, #2
 80079f8:	4a13      	ldr	r2, [pc, #76]	; (8007a48 <xTaskRemoveFromEventList+0xb8>)
 80079fa:	441a      	add	r2, r3
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	3304      	adds	r3, #4
 8007a00:	4619      	mov	r1, r3
 8007a02:	4610      	mov	r0, r2
 8007a04:	f7fe fb35 	bl	8006072 <vListInsertEnd>
 8007a08:	e005      	b.n	8007a16 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	3318      	adds	r3, #24
 8007a0e:	4619      	mov	r1, r3
 8007a10:	480e      	ldr	r0, [pc, #56]	; (8007a4c <xTaskRemoveFromEventList+0xbc>)
 8007a12:	f7fe fb2e 	bl	8006072 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a1a:	4b0d      	ldr	r3, [pc, #52]	; (8007a50 <xTaskRemoveFromEventList+0xc0>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a20:	429a      	cmp	r2, r3
 8007a22:	d905      	bls.n	8007a30 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007a24:	2301      	movs	r3, #1
 8007a26:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007a28:	4b0a      	ldr	r3, [pc, #40]	; (8007a54 <xTaskRemoveFromEventList+0xc4>)
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	601a      	str	r2, [r3, #0]
 8007a2e:	e001      	b.n	8007a34 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007a30:	2300      	movs	r3, #0
 8007a32:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007a34:	697b      	ldr	r3, [r7, #20]
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3718      	adds	r7, #24
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
 8007a3e:	bf00      	nop
 8007a40:	2000110c 	.word	0x2000110c
 8007a44:	200010ec 	.word	0x200010ec
 8007a48:	20000c14 	.word	0x20000c14
 8007a4c:	200010a4 	.word	0x200010a4
 8007a50:	20000c10 	.word	0x20000c10
 8007a54:	200010f8 	.word	0x200010f8

08007a58 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b083      	sub	sp, #12
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007a60:	4b06      	ldr	r3, [pc, #24]	; (8007a7c <vTaskInternalSetTimeOutState+0x24>)
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007a68:	4b05      	ldr	r3, [pc, #20]	; (8007a80 <vTaskInternalSetTimeOutState+0x28>)
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	605a      	str	r2, [r3, #4]
}
 8007a70:	bf00      	nop
 8007a72:	370c      	adds	r7, #12
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bc80      	pop	{r7}
 8007a78:	4770      	bx	lr
 8007a7a:	bf00      	nop
 8007a7c:	200010fc 	.word	0x200010fc
 8007a80:	200010e8 	.word	0x200010e8

08007a84 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b088      	sub	sp, #32
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d10a      	bne.n	8007aaa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a98:	f383 8811 	msr	BASEPRI, r3
 8007a9c:	f3bf 8f6f 	isb	sy
 8007aa0:	f3bf 8f4f 	dsb	sy
 8007aa4:	613b      	str	r3, [r7, #16]
}
 8007aa6:	bf00      	nop
 8007aa8:	e7fe      	b.n	8007aa8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d10a      	bne.n	8007ac6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab4:	f383 8811 	msr	BASEPRI, r3
 8007ab8:	f3bf 8f6f 	isb	sy
 8007abc:	f3bf 8f4f 	dsb	sy
 8007ac0:	60fb      	str	r3, [r7, #12]
}
 8007ac2:	bf00      	nop
 8007ac4:	e7fe      	b.n	8007ac4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007ac6:	f000 ff11 	bl	80088ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007aca:	4b1d      	ldr	r3, [pc, #116]	; (8007b40 <xTaskCheckForTimeOut+0xbc>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	69ba      	ldr	r2, [r7, #24]
 8007ad6:	1ad3      	subs	r3, r2, r3
 8007ad8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ae2:	d102      	bne.n	8007aea <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	61fb      	str	r3, [r7, #28]
 8007ae8:	e023      	b.n	8007b32 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681a      	ldr	r2, [r3, #0]
 8007aee:	4b15      	ldr	r3, [pc, #84]	; (8007b44 <xTaskCheckForTimeOut+0xc0>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	429a      	cmp	r2, r3
 8007af4:	d007      	beq.n	8007b06 <xTaskCheckForTimeOut+0x82>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	69ba      	ldr	r2, [r7, #24]
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d302      	bcc.n	8007b06 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007b00:	2301      	movs	r3, #1
 8007b02:	61fb      	str	r3, [r7, #28]
 8007b04:	e015      	b.n	8007b32 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	697a      	ldr	r2, [r7, #20]
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d20b      	bcs.n	8007b28 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	1ad2      	subs	r2, r2, r3
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f7ff ff9b 	bl	8007a58 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007b22:	2300      	movs	r3, #0
 8007b24:	61fb      	str	r3, [r7, #28]
 8007b26:	e004      	b.n	8007b32 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007b32:	f000 ff0b 	bl	800894c <vPortExitCritical>

	return xReturn;
 8007b36:	69fb      	ldr	r3, [r7, #28]
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3720      	adds	r7, #32
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}
 8007b40:	200010e8 	.word	0x200010e8
 8007b44:	200010fc 	.word	0x200010fc

08007b48 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007b48:	b480      	push	{r7}
 8007b4a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007b4c:	4b03      	ldr	r3, [pc, #12]	; (8007b5c <vTaskMissedYield+0x14>)
 8007b4e:	2201      	movs	r2, #1
 8007b50:	601a      	str	r2, [r3, #0]
}
 8007b52:	bf00      	nop
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bc80      	pop	{r7}
 8007b58:	4770      	bx	lr
 8007b5a:	bf00      	nop
 8007b5c:	200010f8 	.word	0x200010f8

08007b60 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b082      	sub	sp, #8
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007b68:	f000 f852 	bl	8007c10 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007b6c:	4b06      	ldr	r3, [pc, #24]	; (8007b88 <prvIdleTask+0x28>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d9f9      	bls.n	8007b68 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007b74:	4b05      	ldr	r3, [pc, #20]	; (8007b8c <prvIdleTask+0x2c>)
 8007b76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b7a:	601a      	str	r2, [r3, #0]
 8007b7c:	f3bf 8f4f 	dsb	sy
 8007b80:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007b84:	e7f0      	b.n	8007b68 <prvIdleTask+0x8>
 8007b86:	bf00      	nop
 8007b88:	20000c14 	.word	0x20000c14
 8007b8c:	e000ed04 	.word	0xe000ed04

08007b90 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b082      	sub	sp, #8
 8007b94:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007b96:	2300      	movs	r3, #0
 8007b98:	607b      	str	r3, [r7, #4]
 8007b9a:	e00c      	b.n	8007bb6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	4613      	mov	r3, r2
 8007ba0:	009b      	lsls	r3, r3, #2
 8007ba2:	4413      	add	r3, r2
 8007ba4:	009b      	lsls	r3, r3, #2
 8007ba6:	4a12      	ldr	r2, [pc, #72]	; (8007bf0 <prvInitialiseTaskLists+0x60>)
 8007ba8:	4413      	add	r3, r2
 8007baa:	4618      	mov	r0, r3
 8007bac:	f7fe fa36 	bl	800601c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	3301      	adds	r3, #1
 8007bb4:	607b      	str	r3, [r7, #4]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2b37      	cmp	r3, #55	; 0x37
 8007bba:	d9ef      	bls.n	8007b9c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007bbc:	480d      	ldr	r0, [pc, #52]	; (8007bf4 <prvInitialiseTaskLists+0x64>)
 8007bbe:	f7fe fa2d 	bl	800601c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007bc2:	480d      	ldr	r0, [pc, #52]	; (8007bf8 <prvInitialiseTaskLists+0x68>)
 8007bc4:	f7fe fa2a 	bl	800601c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007bc8:	480c      	ldr	r0, [pc, #48]	; (8007bfc <prvInitialiseTaskLists+0x6c>)
 8007bca:	f7fe fa27 	bl	800601c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007bce:	480c      	ldr	r0, [pc, #48]	; (8007c00 <prvInitialiseTaskLists+0x70>)
 8007bd0:	f7fe fa24 	bl	800601c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007bd4:	480b      	ldr	r0, [pc, #44]	; (8007c04 <prvInitialiseTaskLists+0x74>)
 8007bd6:	f7fe fa21 	bl	800601c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007bda:	4b0b      	ldr	r3, [pc, #44]	; (8007c08 <prvInitialiseTaskLists+0x78>)
 8007bdc:	4a05      	ldr	r2, [pc, #20]	; (8007bf4 <prvInitialiseTaskLists+0x64>)
 8007bde:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007be0:	4b0a      	ldr	r3, [pc, #40]	; (8007c0c <prvInitialiseTaskLists+0x7c>)
 8007be2:	4a05      	ldr	r2, [pc, #20]	; (8007bf8 <prvInitialiseTaskLists+0x68>)
 8007be4:	601a      	str	r2, [r3, #0]
}
 8007be6:	bf00      	nop
 8007be8:	3708      	adds	r7, #8
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}
 8007bee:	bf00      	nop
 8007bf0:	20000c14 	.word	0x20000c14
 8007bf4:	20001074 	.word	0x20001074
 8007bf8:	20001088 	.word	0x20001088
 8007bfc:	200010a4 	.word	0x200010a4
 8007c00:	200010b8 	.word	0x200010b8
 8007c04:	200010d0 	.word	0x200010d0
 8007c08:	2000109c 	.word	0x2000109c
 8007c0c:	200010a0 	.word	0x200010a0

08007c10 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b082      	sub	sp, #8
 8007c14:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007c16:	e019      	b.n	8007c4c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007c18:	f000 fe68 	bl	80088ec <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007c1c:	4b10      	ldr	r3, [pc, #64]	; (8007c60 <prvCheckTasksWaitingTermination+0x50>)
 8007c1e:	68db      	ldr	r3, [r3, #12]
 8007c20:	68db      	ldr	r3, [r3, #12]
 8007c22:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	3304      	adds	r3, #4
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f7fe fa7d 	bl	8006128 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007c2e:	4b0d      	ldr	r3, [pc, #52]	; (8007c64 <prvCheckTasksWaitingTermination+0x54>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	3b01      	subs	r3, #1
 8007c34:	4a0b      	ldr	r2, [pc, #44]	; (8007c64 <prvCheckTasksWaitingTermination+0x54>)
 8007c36:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007c38:	4b0b      	ldr	r3, [pc, #44]	; (8007c68 <prvCheckTasksWaitingTermination+0x58>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	3b01      	subs	r3, #1
 8007c3e:	4a0a      	ldr	r2, [pc, #40]	; (8007c68 <prvCheckTasksWaitingTermination+0x58>)
 8007c40:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007c42:	f000 fe83 	bl	800894c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 f810 	bl	8007c6c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007c4c:	4b06      	ldr	r3, [pc, #24]	; (8007c68 <prvCheckTasksWaitingTermination+0x58>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d1e1      	bne.n	8007c18 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007c54:	bf00      	nop
 8007c56:	bf00      	nop
 8007c58:	3708      	adds	r7, #8
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	bf00      	nop
 8007c60:	200010b8 	.word	0x200010b8
 8007c64:	200010e4 	.word	0x200010e4
 8007c68:	200010cc 	.word	0x200010cc

08007c6c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b084      	sub	sp, #16
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	3354      	adds	r3, #84	; 0x54
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f002 f959 	bl	8009f30 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d108      	bne.n	8007c9a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f000 fff1 	bl	8008c74 <vPortFree>
				vPortFree( pxTCB );
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 ffee 	bl	8008c74 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007c98:	e018      	b.n	8007ccc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	d103      	bne.n	8007cac <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f000 ffe5 	bl	8008c74 <vPortFree>
	}
 8007caa:	e00f      	b.n	8007ccc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007cb2:	2b02      	cmp	r3, #2
 8007cb4:	d00a      	beq.n	8007ccc <prvDeleteTCB+0x60>
	__asm volatile
 8007cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cba:	f383 8811 	msr	BASEPRI, r3
 8007cbe:	f3bf 8f6f 	isb	sy
 8007cc2:	f3bf 8f4f 	dsb	sy
 8007cc6:	60fb      	str	r3, [r7, #12]
}
 8007cc8:	bf00      	nop
 8007cca:	e7fe      	b.n	8007cca <prvDeleteTCB+0x5e>
	}
 8007ccc:	bf00      	nop
 8007cce:	3710      	adds	r7, #16
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}

08007cd4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b083      	sub	sp, #12
 8007cd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007cda:	4b0e      	ldr	r3, [pc, #56]	; (8007d14 <prvResetNextTaskUnblockTime+0x40>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d101      	bne.n	8007ce8 <prvResetNextTaskUnblockTime+0x14>
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	e000      	b.n	8007cea <prvResetNextTaskUnblockTime+0x16>
 8007ce8:	2300      	movs	r3, #0
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d004      	beq.n	8007cf8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007cee:	4b0a      	ldr	r3, [pc, #40]	; (8007d18 <prvResetNextTaskUnblockTime+0x44>)
 8007cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8007cf4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007cf6:	e008      	b.n	8007d0a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007cf8:	4b06      	ldr	r3, [pc, #24]	; (8007d14 <prvResetNextTaskUnblockTime+0x40>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	68db      	ldr	r3, [r3, #12]
 8007cfe:	68db      	ldr	r3, [r3, #12]
 8007d00:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	4a04      	ldr	r2, [pc, #16]	; (8007d18 <prvResetNextTaskUnblockTime+0x44>)
 8007d08:	6013      	str	r3, [r2, #0]
}
 8007d0a:	bf00      	nop
 8007d0c:	370c      	adds	r7, #12
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bc80      	pop	{r7}
 8007d12:	4770      	bx	lr
 8007d14:	2000109c 	.word	0x2000109c
 8007d18:	20001104 	.word	0x20001104

08007d1c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007d22:	4b0b      	ldr	r3, [pc, #44]	; (8007d50 <xTaskGetSchedulerState+0x34>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d102      	bne.n	8007d30 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	607b      	str	r3, [r7, #4]
 8007d2e:	e008      	b.n	8007d42 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d30:	4b08      	ldr	r3, [pc, #32]	; (8007d54 <xTaskGetSchedulerState+0x38>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d102      	bne.n	8007d3e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007d38:	2302      	movs	r3, #2
 8007d3a:	607b      	str	r3, [r7, #4]
 8007d3c:	e001      	b.n	8007d42 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007d42:	687b      	ldr	r3, [r7, #4]
	}
 8007d44:	4618      	mov	r0, r3
 8007d46:	370c      	adds	r7, #12
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bc80      	pop	{r7}
 8007d4c:	4770      	bx	lr
 8007d4e:	bf00      	nop
 8007d50:	200010f0 	.word	0x200010f0
 8007d54:	2000110c 	.word	0x2000110c

08007d58 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b084      	sub	sp, #16
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007d64:	2300      	movs	r3, #0
 8007d66:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d056      	beq.n	8007e1c <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d72:	4b2d      	ldr	r3, [pc, #180]	; (8007e28 <xTaskPriorityInherit+0xd0>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d246      	bcs.n	8007e0a <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	699b      	ldr	r3, [r3, #24]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	db06      	blt.n	8007d92 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d84:	4b28      	ldr	r3, [pc, #160]	; (8007e28 <xTaskPriorityInherit+0xd0>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d8a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	6959      	ldr	r1, [r3, #20]
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d9a:	4613      	mov	r3, r2
 8007d9c:	009b      	lsls	r3, r3, #2
 8007d9e:	4413      	add	r3, r2
 8007da0:	009b      	lsls	r3, r3, #2
 8007da2:	4a22      	ldr	r2, [pc, #136]	; (8007e2c <xTaskPriorityInherit+0xd4>)
 8007da4:	4413      	add	r3, r2
 8007da6:	4299      	cmp	r1, r3
 8007da8:	d101      	bne.n	8007dae <xTaskPriorityInherit+0x56>
 8007daa:	2301      	movs	r3, #1
 8007dac:	e000      	b.n	8007db0 <xTaskPriorityInherit+0x58>
 8007dae:	2300      	movs	r3, #0
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d022      	beq.n	8007dfa <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	3304      	adds	r3, #4
 8007db8:	4618      	mov	r0, r3
 8007dba:	f7fe f9b5 	bl	8006128 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007dbe:	4b1a      	ldr	r3, [pc, #104]	; (8007e28 <xTaskPriorityInherit+0xd0>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dcc:	4b18      	ldr	r3, [pc, #96]	; (8007e30 <xTaskPriorityInherit+0xd8>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d903      	bls.n	8007ddc <xTaskPriorityInherit+0x84>
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd8:	4a15      	ldr	r2, [pc, #84]	; (8007e30 <xTaskPriorityInherit+0xd8>)
 8007dda:	6013      	str	r3, [r2, #0]
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007de0:	4613      	mov	r3, r2
 8007de2:	009b      	lsls	r3, r3, #2
 8007de4:	4413      	add	r3, r2
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	4a10      	ldr	r2, [pc, #64]	; (8007e2c <xTaskPriorityInherit+0xd4>)
 8007dea:	441a      	add	r2, r3
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	3304      	adds	r3, #4
 8007df0:	4619      	mov	r1, r3
 8007df2:	4610      	mov	r0, r2
 8007df4:	f7fe f93d 	bl	8006072 <vListInsertEnd>
 8007df8:	e004      	b.n	8007e04 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007dfa:	4b0b      	ldr	r3, [pc, #44]	; (8007e28 <xTaskPriorityInherit+0xd0>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007e04:	2301      	movs	r3, #1
 8007e06:	60fb      	str	r3, [r7, #12]
 8007e08:	e008      	b.n	8007e1c <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007e0e:	4b06      	ldr	r3, [pc, #24]	; (8007e28 <xTaskPriorityInherit+0xd0>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e14:	429a      	cmp	r2, r3
 8007e16:	d201      	bcs.n	8007e1c <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007e18:	2301      	movs	r3, #1
 8007e1a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
	}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3710      	adds	r7, #16
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}
 8007e26:	bf00      	nop
 8007e28:	20000c10 	.word	0x20000c10
 8007e2c:	20000c14 	.word	0x20000c14
 8007e30:	200010ec 	.word	0x200010ec

08007e34 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b086      	sub	sp, #24
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007e40:	2300      	movs	r3, #0
 8007e42:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d056      	beq.n	8007ef8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007e4a:	4b2e      	ldr	r3, [pc, #184]	; (8007f04 <xTaskPriorityDisinherit+0xd0>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	693a      	ldr	r2, [r7, #16]
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d00a      	beq.n	8007e6a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e58:	f383 8811 	msr	BASEPRI, r3
 8007e5c:	f3bf 8f6f 	isb	sy
 8007e60:	f3bf 8f4f 	dsb	sy
 8007e64:	60fb      	str	r3, [r7, #12]
}
 8007e66:	bf00      	nop
 8007e68:	e7fe      	b.n	8007e68 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d10a      	bne.n	8007e88 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e76:	f383 8811 	msr	BASEPRI, r3
 8007e7a:	f3bf 8f6f 	isb	sy
 8007e7e:	f3bf 8f4f 	dsb	sy
 8007e82:	60bb      	str	r3, [r7, #8]
}
 8007e84:	bf00      	nop
 8007e86:	e7fe      	b.n	8007e86 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e8c:	1e5a      	subs	r2, r3, #1
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d02c      	beq.n	8007ef8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d128      	bne.n	8007ef8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	3304      	adds	r3, #4
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f7fe f93c 	bl	8006128 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ebc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ec8:	4b0f      	ldr	r3, [pc, #60]	; (8007f08 <xTaskPriorityDisinherit+0xd4>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d903      	bls.n	8007ed8 <xTaskPriorityDisinherit+0xa4>
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ed4:	4a0c      	ldr	r2, [pc, #48]	; (8007f08 <xTaskPriorityDisinherit+0xd4>)
 8007ed6:	6013      	str	r3, [r2, #0]
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007edc:	4613      	mov	r3, r2
 8007ede:	009b      	lsls	r3, r3, #2
 8007ee0:	4413      	add	r3, r2
 8007ee2:	009b      	lsls	r3, r3, #2
 8007ee4:	4a09      	ldr	r2, [pc, #36]	; (8007f0c <xTaskPriorityDisinherit+0xd8>)
 8007ee6:	441a      	add	r2, r3
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	3304      	adds	r3, #4
 8007eec:	4619      	mov	r1, r3
 8007eee:	4610      	mov	r0, r2
 8007ef0:	f7fe f8bf 	bl	8006072 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007ef8:	697b      	ldr	r3, [r7, #20]
	}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3718      	adds	r7, #24
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}
 8007f02:	bf00      	nop
 8007f04:	20000c10 	.word	0x20000c10
 8007f08:	200010ec 	.word	0x200010ec
 8007f0c:	20000c14 	.word	0x20000c14

08007f10 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b088      	sub	sp, #32
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007f1e:	2301      	movs	r3, #1
 8007f20:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d06f      	beq.n	8008008 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007f28:	69bb      	ldr	r3, [r7, #24]
 8007f2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d10a      	bne.n	8007f46 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f34:	f383 8811 	msr	BASEPRI, r3
 8007f38:	f3bf 8f6f 	isb	sy
 8007f3c:	f3bf 8f4f 	dsb	sy
 8007f40:	60fb      	str	r3, [r7, #12]
}
 8007f42:	bf00      	nop
 8007f44:	e7fe      	b.n	8007f44 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007f46:	69bb      	ldr	r3, [r7, #24]
 8007f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f4a:	683a      	ldr	r2, [r7, #0]
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d902      	bls.n	8007f56 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	61fb      	str	r3, [r7, #28]
 8007f54:	e002      	b.n	8007f5c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007f56:	69bb      	ldr	r3, [r7, #24]
 8007f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f5a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007f5c:	69bb      	ldr	r3, [r7, #24]
 8007f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f60:	69fa      	ldr	r2, [r7, #28]
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d050      	beq.n	8008008 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007f66:	69bb      	ldr	r3, [r7, #24]
 8007f68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f6a:	697a      	ldr	r2, [r7, #20]
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d14b      	bne.n	8008008 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007f70:	4b27      	ldr	r3, [pc, #156]	; (8008010 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	69ba      	ldr	r2, [r7, #24]
 8007f76:	429a      	cmp	r2, r3
 8007f78:	d10a      	bne.n	8007f90 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f7e:	f383 8811 	msr	BASEPRI, r3
 8007f82:	f3bf 8f6f 	isb	sy
 8007f86:	f3bf 8f4f 	dsb	sy
 8007f8a:	60bb      	str	r3, [r7, #8]
}
 8007f8c:	bf00      	nop
 8007f8e:	e7fe      	b.n	8007f8e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007f90:	69bb      	ldr	r3, [r7, #24]
 8007f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f94:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007f96:	69bb      	ldr	r3, [r7, #24]
 8007f98:	69fa      	ldr	r2, [r7, #28]
 8007f9a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007f9c:	69bb      	ldr	r3, [r7, #24]
 8007f9e:	699b      	ldr	r3, [r3, #24]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	db04      	blt.n	8007fae <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fa4:	69fb      	ldr	r3, [r7, #28]
 8007fa6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007faa:	69bb      	ldr	r3, [r7, #24]
 8007fac:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007fae:	69bb      	ldr	r3, [r7, #24]
 8007fb0:	6959      	ldr	r1, [r3, #20]
 8007fb2:	693a      	ldr	r2, [r7, #16]
 8007fb4:	4613      	mov	r3, r2
 8007fb6:	009b      	lsls	r3, r3, #2
 8007fb8:	4413      	add	r3, r2
 8007fba:	009b      	lsls	r3, r3, #2
 8007fbc:	4a15      	ldr	r2, [pc, #84]	; (8008014 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007fbe:	4413      	add	r3, r2
 8007fc0:	4299      	cmp	r1, r3
 8007fc2:	d101      	bne.n	8007fc8 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	e000      	b.n	8007fca <vTaskPriorityDisinheritAfterTimeout+0xba>
 8007fc8:	2300      	movs	r3, #0
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d01c      	beq.n	8008008 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007fce:	69bb      	ldr	r3, [r7, #24]
 8007fd0:	3304      	adds	r3, #4
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f7fe f8a8 	bl	8006128 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007fd8:	69bb      	ldr	r3, [r7, #24]
 8007fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fdc:	4b0e      	ldr	r3, [pc, #56]	; (8008018 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d903      	bls.n	8007fec <vTaskPriorityDisinheritAfterTimeout+0xdc>
 8007fe4:	69bb      	ldr	r3, [r7, #24]
 8007fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe8:	4a0b      	ldr	r2, [pc, #44]	; (8008018 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8007fea:	6013      	str	r3, [r2, #0]
 8007fec:	69bb      	ldr	r3, [r7, #24]
 8007fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ff0:	4613      	mov	r3, r2
 8007ff2:	009b      	lsls	r3, r3, #2
 8007ff4:	4413      	add	r3, r2
 8007ff6:	009b      	lsls	r3, r3, #2
 8007ff8:	4a06      	ldr	r2, [pc, #24]	; (8008014 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007ffa:	441a      	add	r2, r3
 8007ffc:	69bb      	ldr	r3, [r7, #24]
 8007ffe:	3304      	adds	r3, #4
 8008000:	4619      	mov	r1, r3
 8008002:	4610      	mov	r0, r2
 8008004:	f7fe f835 	bl	8006072 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008008:	bf00      	nop
 800800a:	3720      	adds	r7, #32
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}
 8008010:	20000c10 	.word	0x20000c10
 8008014:	20000c14 	.word	0x20000c14
 8008018:	200010ec 	.word	0x200010ec

0800801c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800801c:	b480      	push	{r7}
 800801e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008020:	4b07      	ldr	r3, [pc, #28]	; (8008040 <pvTaskIncrementMutexHeldCount+0x24>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d004      	beq.n	8008032 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008028:	4b05      	ldr	r3, [pc, #20]	; (8008040 <pvTaskIncrementMutexHeldCount+0x24>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800802e:	3201      	adds	r2, #1
 8008030:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8008032:	4b03      	ldr	r3, [pc, #12]	; (8008040 <pvTaskIncrementMutexHeldCount+0x24>)
 8008034:	681b      	ldr	r3, [r3, #0]
	}
 8008036:	4618      	mov	r0, r3
 8008038:	46bd      	mov	sp, r7
 800803a:	bc80      	pop	{r7}
 800803c:	4770      	bx	lr
 800803e:	bf00      	nop
 8008040:	20000c10 	.word	0x20000c10

08008044 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b084      	sub	sp, #16
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800804e:	4b21      	ldr	r3, [pc, #132]	; (80080d4 <prvAddCurrentTaskToDelayedList+0x90>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008054:	4b20      	ldr	r3, [pc, #128]	; (80080d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	3304      	adds	r3, #4
 800805a:	4618      	mov	r0, r3
 800805c:	f7fe f864 	bl	8006128 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008066:	d10a      	bne.n	800807e <prvAddCurrentTaskToDelayedList+0x3a>
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d007      	beq.n	800807e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800806e:	4b1a      	ldr	r3, [pc, #104]	; (80080d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	3304      	adds	r3, #4
 8008074:	4619      	mov	r1, r3
 8008076:	4819      	ldr	r0, [pc, #100]	; (80080dc <prvAddCurrentTaskToDelayedList+0x98>)
 8008078:	f7fd fffb 	bl	8006072 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800807c:	e026      	b.n	80080cc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800807e:	68fa      	ldr	r2, [r7, #12]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	4413      	add	r3, r2
 8008084:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008086:	4b14      	ldr	r3, [pc, #80]	; (80080d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	68ba      	ldr	r2, [r7, #8]
 800808c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800808e:	68ba      	ldr	r2, [r7, #8]
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	429a      	cmp	r2, r3
 8008094:	d209      	bcs.n	80080aa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008096:	4b12      	ldr	r3, [pc, #72]	; (80080e0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008098:	681a      	ldr	r2, [r3, #0]
 800809a:	4b0f      	ldr	r3, [pc, #60]	; (80080d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	3304      	adds	r3, #4
 80080a0:	4619      	mov	r1, r3
 80080a2:	4610      	mov	r0, r2
 80080a4:	f7fe f808 	bl	80060b8 <vListInsert>
}
 80080a8:	e010      	b.n	80080cc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080aa:	4b0e      	ldr	r3, [pc, #56]	; (80080e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	4b0a      	ldr	r3, [pc, #40]	; (80080d8 <prvAddCurrentTaskToDelayedList+0x94>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	3304      	adds	r3, #4
 80080b4:	4619      	mov	r1, r3
 80080b6:	4610      	mov	r0, r2
 80080b8:	f7fd fffe 	bl	80060b8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80080bc:	4b0a      	ldr	r3, [pc, #40]	; (80080e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	68ba      	ldr	r2, [r7, #8]
 80080c2:	429a      	cmp	r2, r3
 80080c4:	d202      	bcs.n	80080cc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80080c6:	4a08      	ldr	r2, [pc, #32]	; (80080e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	6013      	str	r3, [r2, #0]
}
 80080cc:	bf00      	nop
 80080ce:	3710      	adds	r7, #16
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}
 80080d4:	200010e8 	.word	0x200010e8
 80080d8:	20000c10 	.word	0x20000c10
 80080dc:	200010d0 	.word	0x200010d0
 80080e0:	200010a0 	.word	0x200010a0
 80080e4:	2000109c 	.word	0x2000109c
 80080e8:	20001104 	.word	0x20001104

080080ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b08a      	sub	sp, #40	; 0x28
 80080f0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80080f2:	2300      	movs	r3, #0
 80080f4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80080f6:	f000 facb 	bl	8008690 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80080fa:	4b1c      	ldr	r3, [pc, #112]	; (800816c <xTimerCreateTimerTask+0x80>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d021      	beq.n	8008146 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008102:	2300      	movs	r3, #0
 8008104:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008106:	2300      	movs	r3, #0
 8008108:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800810a:	1d3a      	adds	r2, r7, #4
 800810c:	f107 0108 	add.w	r1, r7, #8
 8008110:	f107 030c 	add.w	r3, r7, #12
 8008114:	4618      	mov	r0, r3
 8008116:	f7fd ff67 	bl	8005fe8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800811a:	6879      	ldr	r1, [r7, #4]
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	68fa      	ldr	r2, [r7, #12]
 8008120:	9202      	str	r2, [sp, #8]
 8008122:	9301      	str	r3, [sp, #4]
 8008124:	2302      	movs	r3, #2
 8008126:	9300      	str	r3, [sp, #0]
 8008128:	2300      	movs	r3, #0
 800812a:	460a      	mov	r2, r1
 800812c:	4910      	ldr	r1, [pc, #64]	; (8008170 <xTimerCreateTimerTask+0x84>)
 800812e:	4811      	ldr	r0, [pc, #68]	; (8008174 <xTimerCreateTimerTask+0x88>)
 8008130:	f7fe ffae 	bl	8007090 <xTaskCreateStatic>
 8008134:	4603      	mov	r3, r0
 8008136:	4a10      	ldr	r2, [pc, #64]	; (8008178 <xTimerCreateTimerTask+0x8c>)
 8008138:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800813a:	4b0f      	ldr	r3, [pc, #60]	; (8008178 <xTimerCreateTimerTask+0x8c>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d001      	beq.n	8008146 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008142:	2301      	movs	r3, #1
 8008144:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d10a      	bne.n	8008162 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800814c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008150:	f383 8811 	msr	BASEPRI, r3
 8008154:	f3bf 8f6f 	isb	sy
 8008158:	f3bf 8f4f 	dsb	sy
 800815c:	613b      	str	r3, [r7, #16]
}
 800815e:	bf00      	nop
 8008160:	e7fe      	b.n	8008160 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008162:	697b      	ldr	r3, [r7, #20]
}
 8008164:	4618      	mov	r0, r3
 8008166:	3718      	adds	r7, #24
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}
 800816c:	20001140 	.word	0x20001140
 8008170:	0800d8f4 	.word	0x0800d8f4
 8008174:	08008299 	.word	0x08008299
 8008178:	20001144 	.word	0x20001144

0800817c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b08a      	sub	sp, #40	; 0x28
 8008180:	af00      	add	r7, sp, #0
 8008182:	60f8      	str	r0, [r7, #12]
 8008184:	60b9      	str	r1, [r7, #8]
 8008186:	607a      	str	r2, [r7, #4]
 8008188:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800818a:	2300      	movs	r3, #0
 800818c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d10a      	bne.n	80081aa <xTimerGenericCommand+0x2e>
	__asm volatile
 8008194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008198:	f383 8811 	msr	BASEPRI, r3
 800819c:	f3bf 8f6f 	isb	sy
 80081a0:	f3bf 8f4f 	dsb	sy
 80081a4:	623b      	str	r3, [r7, #32]
}
 80081a6:	bf00      	nop
 80081a8:	e7fe      	b.n	80081a8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80081aa:	4b1a      	ldr	r3, [pc, #104]	; (8008214 <xTimerGenericCommand+0x98>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d02a      	beq.n	8008208 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	2b05      	cmp	r3, #5
 80081c2:	dc18      	bgt.n	80081f6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80081c4:	f7ff fdaa 	bl	8007d1c <xTaskGetSchedulerState>
 80081c8:	4603      	mov	r3, r0
 80081ca:	2b02      	cmp	r3, #2
 80081cc:	d109      	bne.n	80081e2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80081ce:	4b11      	ldr	r3, [pc, #68]	; (8008214 <xTimerGenericCommand+0x98>)
 80081d0:	6818      	ldr	r0, [r3, #0]
 80081d2:	f107 0110 	add.w	r1, r7, #16
 80081d6:	2300      	movs	r3, #0
 80081d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081da:	f7fe f979 	bl	80064d0 <xQueueGenericSend>
 80081de:	6278      	str	r0, [r7, #36]	; 0x24
 80081e0:	e012      	b.n	8008208 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80081e2:	4b0c      	ldr	r3, [pc, #48]	; (8008214 <xTimerGenericCommand+0x98>)
 80081e4:	6818      	ldr	r0, [r3, #0]
 80081e6:	f107 0110 	add.w	r1, r7, #16
 80081ea:	2300      	movs	r3, #0
 80081ec:	2200      	movs	r2, #0
 80081ee:	f7fe f96f 	bl	80064d0 <xQueueGenericSend>
 80081f2:	6278      	str	r0, [r7, #36]	; 0x24
 80081f4:	e008      	b.n	8008208 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80081f6:	4b07      	ldr	r3, [pc, #28]	; (8008214 <xTimerGenericCommand+0x98>)
 80081f8:	6818      	ldr	r0, [r3, #0]
 80081fa:	f107 0110 	add.w	r1, r7, #16
 80081fe:	2300      	movs	r3, #0
 8008200:	683a      	ldr	r2, [r7, #0]
 8008202:	f7fe fa63 	bl	80066cc <xQueueGenericSendFromISR>
 8008206:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800820a:	4618      	mov	r0, r3
 800820c:	3728      	adds	r7, #40	; 0x28
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
 8008212:	bf00      	nop
 8008214:	20001140 	.word	0x20001140

08008218 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b088      	sub	sp, #32
 800821c:	af02      	add	r7, sp, #8
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008222:	4b1c      	ldr	r3, [pc, #112]	; (8008294 <prvProcessExpiredTimer+0x7c>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	68db      	ldr	r3, [r3, #12]
 8008228:	68db      	ldr	r3, [r3, #12]
 800822a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	3304      	adds	r3, #4
 8008230:	4618      	mov	r0, r3
 8008232:	f7fd ff79 	bl	8006128 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	69db      	ldr	r3, [r3, #28]
 800823a:	2b01      	cmp	r3, #1
 800823c:	d122      	bne.n	8008284 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	699a      	ldr	r2, [r3, #24]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	18d1      	adds	r1, r2, r3
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	683a      	ldr	r2, [r7, #0]
 800824a:	6978      	ldr	r0, [r7, #20]
 800824c:	f000 f8c8 	bl	80083e0 <prvInsertTimerInActiveList>
 8008250:	4603      	mov	r3, r0
 8008252:	2b00      	cmp	r3, #0
 8008254:	d016      	beq.n	8008284 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008256:	2300      	movs	r3, #0
 8008258:	9300      	str	r3, [sp, #0]
 800825a:	2300      	movs	r3, #0
 800825c:	687a      	ldr	r2, [r7, #4]
 800825e:	2100      	movs	r1, #0
 8008260:	6978      	ldr	r0, [r7, #20]
 8008262:	f7ff ff8b 	bl	800817c <xTimerGenericCommand>
 8008266:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d10a      	bne.n	8008284 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800826e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008272:	f383 8811 	msr	BASEPRI, r3
 8008276:	f3bf 8f6f 	isb	sy
 800827a:	f3bf 8f4f 	dsb	sy
 800827e:	60fb      	str	r3, [r7, #12]
}
 8008280:	bf00      	nop
 8008282:	e7fe      	b.n	8008282 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008288:	6978      	ldr	r0, [r7, #20]
 800828a:	4798      	blx	r3
}
 800828c:	bf00      	nop
 800828e:	3718      	adds	r7, #24
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}
 8008294:	20001138 	.word	0x20001138

08008298 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b084      	sub	sp, #16
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80082a0:	f107 0308 	add.w	r3, r7, #8
 80082a4:	4618      	mov	r0, r3
 80082a6:	f000 f857 	bl	8008358 <prvGetNextExpireTime>
 80082aa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	4619      	mov	r1, r3
 80082b0:	68f8      	ldr	r0, [r7, #12]
 80082b2:	f000 f803 	bl	80082bc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80082b6:	f000 f8d5 	bl	8008464 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80082ba:	e7f1      	b.n	80082a0 <prvTimerTask+0x8>

080082bc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b084      	sub	sp, #16
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80082c6:	f7ff f937 	bl	8007538 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80082ca:	f107 0308 	add.w	r3, r7, #8
 80082ce:	4618      	mov	r0, r3
 80082d0:	f000 f866 	bl	80083a0 <prvSampleTimeNow>
 80082d4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d130      	bne.n	800833e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d10a      	bne.n	80082f8 <prvProcessTimerOrBlockTask+0x3c>
 80082e2:	687a      	ldr	r2, [r7, #4]
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	429a      	cmp	r2, r3
 80082e8:	d806      	bhi.n	80082f8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80082ea:	f7ff f933 	bl	8007554 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80082ee:	68f9      	ldr	r1, [r7, #12]
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f7ff ff91 	bl	8008218 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80082f6:	e024      	b.n	8008342 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d008      	beq.n	8008310 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80082fe:	4b13      	ldr	r3, [pc, #76]	; (800834c <prvProcessTimerOrBlockTask+0x90>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	2b00      	cmp	r3, #0
 8008306:	bf0c      	ite	eq
 8008308:	2301      	moveq	r3, #1
 800830a:	2300      	movne	r3, #0
 800830c:	b2db      	uxtb	r3, r3
 800830e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008310:	4b0f      	ldr	r3, [pc, #60]	; (8008350 <prvProcessTimerOrBlockTask+0x94>)
 8008312:	6818      	ldr	r0, [r3, #0]
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	1ad3      	subs	r3, r2, r3
 800831a:	683a      	ldr	r2, [r7, #0]
 800831c:	4619      	mov	r1, r3
 800831e:	f7fe fe83 	bl	8007028 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008322:	f7ff f917 	bl	8007554 <xTaskResumeAll>
 8008326:	4603      	mov	r3, r0
 8008328:	2b00      	cmp	r3, #0
 800832a:	d10a      	bne.n	8008342 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800832c:	4b09      	ldr	r3, [pc, #36]	; (8008354 <prvProcessTimerOrBlockTask+0x98>)
 800832e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008332:	601a      	str	r2, [r3, #0]
 8008334:	f3bf 8f4f 	dsb	sy
 8008338:	f3bf 8f6f 	isb	sy
}
 800833c:	e001      	b.n	8008342 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800833e:	f7ff f909 	bl	8007554 <xTaskResumeAll>
}
 8008342:	bf00      	nop
 8008344:	3710      	adds	r7, #16
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}
 800834a:	bf00      	nop
 800834c:	2000113c 	.word	0x2000113c
 8008350:	20001140 	.word	0x20001140
 8008354:	e000ed04 	.word	0xe000ed04

08008358 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008358:	b480      	push	{r7}
 800835a:	b085      	sub	sp, #20
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008360:	4b0e      	ldr	r3, [pc, #56]	; (800839c <prvGetNextExpireTime+0x44>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	2b00      	cmp	r3, #0
 8008368:	bf0c      	ite	eq
 800836a:	2301      	moveq	r3, #1
 800836c:	2300      	movne	r3, #0
 800836e:	b2db      	uxtb	r3, r3
 8008370:	461a      	mov	r2, r3
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d105      	bne.n	800838a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800837e:	4b07      	ldr	r3, [pc, #28]	; (800839c <prvGetNextExpireTime+0x44>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	68db      	ldr	r3, [r3, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	60fb      	str	r3, [r7, #12]
 8008388:	e001      	b.n	800838e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800838a:	2300      	movs	r3, #0
 800838c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800838e:	68fb      	ldr	r3, [r7, #12]
}
 8008390:	4618      	mov	r0, r3
 8008392:	3714      	adds	r7, #20
 8008394:	46bd      	mov	sp, r7
 8008396:	bc80      	pop	{r7}
 8008398:	4770      	bx	lr
 800839a:	bf00      	nop
 800839c:	20001138 	.word	0x20001138

080083a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b084      	sub	sp, #16
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80083a8:	f7ff f972 	bl	8007690 <xTaskGetTickCount>
 80083ac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80083ae:	4b0b      	ldr	r3, [pc, #44]	; (80083dc <prvSampleTimeNow+0x3c>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	68fa      	ldr	r2, [r7, #12]
 80083b4:	429a      	cmp	r2, r3
 80083b6:	d205      	bcs.n	80083c4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80083b8:	f000 f908 	bl	80085cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2201      	movs	r2, #1
 80083c0:	601a      	str	r2, [r3, #0]
 80083c2:	e002      	b.n	80083ca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2200      	movs	r2, #0
 80083c8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80083ca:	4a04      	ldr	r2, [pc, #16]	; (80083dc <prvSampleTimeNow+0x3c>)
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80083d0:	68fb      	ldr	r3, [r7, #12]
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3710      	adds	r7, #16
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}
 80083da:	bf00      	nop
 80083dc:	20001148 	.word	0x20001148

080083e0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b086      	sub	sp, #24
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	60f8      	str	r0, [r7, #12]
 80083e8:	60b9      	str	r1, [r7, #8]
 80083ea:	607a      	str	r2, [r7, #4]
 80083ec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80083ee:	2300      	movs	r3, #0
 80083f0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	68ba      	ldr	r2, [r7, #8]
 80083f6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	68fa      	ldr	r2, [r7, #12]
 80083fc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80083fe:	68ba      	ldr	r2, [r7, #8]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	429a      	cmp	r2, r3
 8008404:	d812      	bhi.n	800842c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008406:	687a      	ldr	r2, [r7, #4]
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	1ad2      	subs	r2, r2, r3
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	699b      	ldr	r3, [r3, #24]
 8008410:	429a      	cmp	r2, r3
 8008412:	d302      	bcc.n	800841a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008414:	2301      	movs	r3, #1
 8008416:	617b      	str	r3, [r7, #20]
 8008418:	e01b      	b.n	8008452 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800841a:	4b10      	ldr	r3, [pc, #64]	; (800845c <prvInsertTimerInActiveList+0x7c>)
 800841c:	681a      	ldr	r2, [r3, #0]
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	3304      	adds	r3, #4
 8008422:	4619      	mov	r1, r3
 8008424:	4610      	mov	r0, r2
 8008426:	f7fd fe47 	bl	80060b8 <vListInsert>
 800842a:	e012      	b.n	8008452 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	429a      	cmp	r2, r3
 8008432:	d206      	bcs.n	8008442 <prvInsertTimerInActiveList+0x62>
 8008434:	68ba      	ldr	r2, [r7, #8]
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	429a      	cmp	r2, r3
 800843a:	d302      	bcc.n	8008442 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800843c:	2301      	movs	r3, #1
 800843e:	617b      	str	r3, [r7, #20]
 8008440:	e007      	b.n	8008452 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008442:	4b07      	ldr	r3, [pc, #28]	; (8008460 <prvInsertTimerInActiveList+0x80>)
 8008444:	681a      	ldr	r2, [r3, #0]
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	3304      	adds	r3, #4
 800844a:	4619      	mov	r1, r3
 800844c:	4610      	mov	r0, r2
 800844e:	f7fd fe33 	bl	80060b8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008452:	697b      	ldr	r3, [r7, #20]
}
 8008454:	4618      	mov	r0, r3
 8008456:	3718      	adds	r7, #24
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}
 800845c:	2000113c 	.word	0x2000113c
 8008460:	20001138 	.word	0x20001138

08008464 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b08e      	sub	sp, #56	; 0x38
 8008468:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800846a:	e09d      	b.n	80085a8 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2b00      	cmp	r3, #0
 8008470:	da18      	bge.n	80084a4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008472:	1d3b      	adds	r3, r7, #4
 8008474:	3304      	adds	r3, #4
 8008476:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800847a:	2b00      	cmp	r3, #0
 800847c:	d10a      	bne.n	8008494 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800847e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008482:	f383 8811 	msr	BASEPRI, r3
 8008486:	f3bf 8f6f 	isb	sy
 800848a:	f3bf 8f4f 	dsb	sy
 800848e:	61fb      	str	r3, [r7, #28]
}
 8008490:	bf00      	nop
 8008492:	e7fe      	b.n	8008492 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800849a:	6850      	ldr	r0, [r2, #4]
 800849c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800849e:	6892      	ldr	r2, [r2, #8]
 80084a0:	4611      	mov	r1, r2
 80084a2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	db7d      	blt.n	80085a6 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80084ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084b0:	695b      	ldr	r3, [r3, #20]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d004      	beq.n	80084c0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80084b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084b8:	3304      	adds	r3, #4
 80084ba:	4618      	mov	r0, r3
 80084bc:	f7fd fe34 	bl	8006128 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80084c0:	463b      	mov	r3, r7
 80084c2:	4618      	mov	r0, r3
 80084c4:	f7ff ff6c 	bl	80083a0 <prvSampleTimeNow>
 80084c8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2b09      	cmp	r3, #9
 80084ce:	d86b      	bhi.n	80085a8 <prvProcessReceivedCommands+0x144>
 80084d0:	a201      	add	r2, pc, #4	; (adr r2, 80084d8 <prvProcessReceivedCommands+0x74>)
 80084d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084d6:	bf00      	nop
 80084d8:	08008501 	.word	0x08008501
 80084dc:	08008501 	.word	0x08008501
 80084e0:	08008501 	.word	0x08008501
 80084e4:	080085a9 	.word	0x080085a9
 80084e8:	0800855d 	.word	0x0800855d
 80084ec:	08008595 	.word	0x08008595
 80084f0:	08008501 	.word	0x08008501
 80084f4:	08008501 	.word	0x08008501
 80084f8:	080085a9 	.word	0x080085a9
 80084fc:	0800855d 	.word	0x0800855d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008500:	68ba      	ldr	r2, [r7, #8]
 8008502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008504:	699b      	ldr	r3, [r3, #24]
 8008506:	18d1      	adds	r1, r2, r3
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800850c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800850e:	f7ff ff67 	bl	80083e0 <prvInsertTimerInActiveList>
 8008512:	4603      	mov	r3, r0
 8008514:	2b00      	cmp	r3, #0
 8008516:	d047      	beq.n	80085a8 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800851a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800851c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800851e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008522:	69db      	ldr	r3, [r3, #28]
 8008524:	2b01      	cmp	r3, #1
 8008526:	d13f      	bne.n	80085a8 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008528:	68ba      	ldr	r2, [r7, #8]
 800852a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800852c:	699b      	ldr	r3, [r3, #24]
 800852e:	441a      	add	r2, r3
 8008530:	2300      	movs	r3, #0
 8008532:	9300      	str	r3, [sp, #0]
 8008534:	2300      	movs	r3, #0
 8008536:	2100      	movs	r1, #0
 8008538:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800853a:	f7ff fe1f 	bl	800817c <xTimerGenericCommand>
 800853e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008540:	6a3b      	ldr	r3, [r7, #32]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d130      	bne.n	80085a8 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8008546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800854a:	f383 8811 	msr	BASEPRI, r3
 800854e:	f3bf 8f6f 	isb	sy
 8008552:	f3bf 8f4f 	dsb	sy
 8008556:	61bb      	str	r3, [r7, #24]
}
 8008558:	bf00      	nop
 800855a:	e7fe      	b.n	800855a <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800855c:	68ba      	ldr	r2, [r7, #8]
 800855e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008560:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008564:	699b      	ldr	r3, [r3, #24]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d10a      	bne.n	8008580 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800856a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800856e:	f383 8811 	msr	BASEPRI, r3
 8008572:	f3bf 8f6f 	isb	sy
 8008576:	f3bf 8f4f 	dsb	sy
 800857a:	617b      	str	r3, [r7, #20]
}
 800857c:	bf00      	nop
 800857e:	e7fe      	b.n	800857e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008582:	699a      	ldr	r2, [r3, #24]
 8008584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008586:	18d1      	adds	r1, r2, r3
 8008588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800858c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800858e:	f7ff ff27 	bl	80083e0 <prvInsertTimerInActiveList>
					break;
 8008592:	e009      	b.n	80085a8 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008596:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800859a:	2b00      	cmp	r3, #0
 800859c:	d104      	bne.n	80085a8 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800859e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085a0:	f000 fb68 	bl	8008c74 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80085a4:	e000      	b.n	80085a8 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80085a6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80085a8:	4b07      	ldr	r3, [pc, #28]	; (80085c8 <prvProcessReceivedCommands+0x164>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	1d39      	adds	r1, r7, #4
 80085ae:	2200      	movs	r2, #0
 80085b0:	4618      	mov	r0, r3
 80085b2:	f7fe f9b1 	bl	8006918 <xQueueReceive>
 80085b6:	4603      	mov	r3, r0
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	f47f af57 	bne.w	800846c <prvProcessReceivedCommands+0x8>
	}
}
 80085be:	bf00      	nop
 80085c0:	bf00      	nop
 80085c2:	3730      	adds	r7, #48	; 0x30
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}
 80085c8:	20001140 	.word	0x20001140

080085cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b088      	sub	sp, #32
 80085d0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80085d2:	e045      	b.n	8008660 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80085d4:	4b2c      	ldr	r3, [pc, #176]	; (8008688 <prvSwitchTimerLists+0xbc>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	68db      	ldr	r3, [r3, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80085de:	4b2a      	ldr	r3, [pc, #168]	; (8008688 <prvSwitchTimerLists+0xbc>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	68db      	ldr	r3, [r3, #12]
 80085e4:	68db      	ldr	r3, [r3, #12]
 80085e6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	3304      	adds	r3, #4
 80085ec:	4618      	mov	r0, r3
 80085ee:	f7fd fd9b 	bl	8006128 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f6:	68f8      	ldr	r0, [r7, #12]
 80085f8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	69db      	ldr	r3, [r3, #28]
 80085fe:	2b01      	cmp	r3, #1
 8008600:	d12e      	bne.n	8008660 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	699b      	ldr	r3, [r3, #24]
 8008606:	693a      	ldr	r2, [r7, #16]
 8008608:	4413      	add	r3, r2
 800860a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800860c:	68ba      	ldr	r2, [r7, #8]
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	429a      	cmp	r2, r3
 8008612:	d90e      	bls.n	8008632 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	68ba      	ldr	r2, [r7, #8]
 8008618:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	68fa      	ldr	r2, [r7, #12]
 800861e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008620:	4b19      	ldr	r3, [pc, #100]	; (8008688 <prvSwitchTimerLists+0xbc>)
 8008622:	681a      	ldr	r2, [r3, #0]
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	3304      	adds	r3, #4
 8008628:	4619      	mov	r1, r3
 800862a:	4610      	mov	r0, r2
 800862c:	f7fd fd44 	bl	80060b8 <vListInsert>
 8008630:	e016      	b.n	8008660 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008632:	2300      	movs	r3, #0
 8008634:	9300      	str	r3, [sp, #0]
 8008636:	2300      	movs	r3, #0
 8008638:	693a      	ldr	r2, [r7, #16]
 800863a:	2100      	movs	r1, #0
 800863c:	68f8      	ldr	r0, [r7, #12]
 800863e:	f7ff fd9d 	bl	800817c <xTimerGenericCommand>
 8008642:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d10a      	bne.n	8008660 <prvSwitchTimerLists+0x94>
	__asm volatile
 800864a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800864e:	f383 8811 	msr	BASEPRI, r3
 8008652:	f3bf 8f6f 	isb	sy
 8008656:	f3bf 8f4f 	dsb	sy
 800865a:	603b      	str	r3, [r7, #0]
}
 800865c:	bf00      	nop
 800865e:	e7fe      	b.n	800865e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008660:	4b09      	ldr	r3, [pc, #36]	; (8008688 <prvSwitchTimerLists+0xbc>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d1b4      	bne.n	80085d4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800866a:	4b07      	ldr	r3, [pc, #28]	; (8008688 <prvSwitchTimerLists+0xbc>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008670:	4b06      	ldr	r3, [pc, #24]	; (800868c <prvSwitchTimerLists+0xc0>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4a04      	ldr	r2, [pc, #16]	; (8008688 <prvSwitchTimerLists+0xbc>)
 8008676:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008678:	4a04      	ldr	r2, [pc, #16]	; (800868c <prvSwitchTimerLists+0xc0>)
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	6013      	str	r3, [r2, #0]
}
 800867e:	bf00      	nop
 8008680:	3718      	adds	r7, #24
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}
 8008686:	bf00      	nop
 8008688:	20001138 	.word	0x20001138
 800868c:	2000113c 	.word	0x2000113c

08008690 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b082      	sub	sp, #8
 8008694:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008696:	f000 f929 	bl	80088ec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800869a:	4b15      	ldr	r3, [pc, #84]	; (80086f0 <prvCheckForValidListAndQueue+0x60>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d120      	bne.n	80086e4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80086a2:	4814      	ldr	r0, [pc, #80]	; (80086f4 <prvCheckForValidListAndQueue+0x64>)
 80086a4:	f7fd fcba 	bl	800601c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80086a8:	4813      	ldr	r0, [pc, #76]	; (80086f8 <prvCheckForValidListAndQueue+0x68>)
 80086aa:	f7fd fcb7 	bl	800601c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80086ae:	4b13      	ldr	r3, [pc, #76]	; (80086fc <prvCheckForValidListAndQueue+0x6c>)
 80086b0:	4a10      	ldr	r2, [pc, #64]	; (80086f4 <prvCheckForValidListAndQueue+0x64>)
 80086b2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80086b4:	4b12      	ldr	r3, [pc, #72]	; (8008700 <prvCheckForValidListAndQueue+0x70>)
 80086b6:	4a10      	ldr	r2, [pc, #64]	; (80086f8 <prvCheckForValidListAndQueue+0x68>)
 80086b8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80086ba:	2300      	movs	r3, #0
 80086bc:	9300      	str	r3, [sp, #0]
 80086be:	4b11      	ldr	r3, [pc, #68]	; (8008704 <prvCheckForValidListAndQueue+0x74>)
 80086c0:	4a11      	ldr	r2, [pc, #68]	; (8008708 <prvCheckForValidListAndQueue+0x78>)
 80086c2:	2110      	movs	r1, #16
 80086c4:	200a      	movs	r0, #10
 80086c6:	f7fd fdc1 	bl	800624c <xQueueGenericCreateStatic>
 80086ca:	4603      	mov	r3, r0
 80086cc:	4a08      	ldr	r2, [pc, #32]	; (80086f0 <prvCheckForValidListAndQueue+0x60>)
 80086ce:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80086d0:	4b07      	ldr	r3, [pc, #28]	; (80086f0 <prvCheckForValidListAndQueue+0x60>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d005      	beq.n	80086e4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80086d8:	4b05      	ldr	r3, [pc, #20]	; (80086f0 <prvCheckForValidListAndQueue+0x60>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	490b      	ldr	r1, [pc, #44]	; (800870c <prvCheckForValidListAndQueue+0x7c>)
 80086de:	4618      	mov	r0, r3
 80086e0:	f7fe fc50 	bl	8006f84 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80086e4:	f000 f932 	bl	800894c <vPortExitCritical>
}
 80086e8:	bf00      	nop
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
 80086ee:	bf00      	nop
 80086f0:	20001140 	.word	0x20001140
 80086f4:	20001110 	.word	0x20001110
 80086f8:	20001124 	.word	0x20001124
 80086fc:	20001138 	.word	0x20001138
 8008700:	2000113c 	.word	0x2000113c
 8008704:	200011ec 	.word	0x200011ec
 8008708:	2000114c 	.word	0x2000114c
 800870c:	0800d8fc 	.word	0x0800d8fc

08008710 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008710:	b480      	push	{r7}
 8008712:	b085      	sub	sp, #20
 8008714:	af00      	add	r7, sp, #0
 8008716:	60f8      	str	r0, [r7, #12]
 8008718:	60b9      	str	r1, [r7, #8]
 800871a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	3b04      	subs	r3, #4
 8008720:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008728:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	3b04      	subs	r3, #4
 800872e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	f023 0201 	bic.w	r2, r3, #1
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	3b04      	subs	r3, #4
 800873e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008740:	4a08      	ldr	r2, [pc, #32]	; (8008764 <pxPortInitialiseStack+0x54>)
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	3b14      	subs	r3, #20
 800874a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800874c:	687a      	ldr	r2, [r7, #4]
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	3b20      	subs	r3, #32
 8008756:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008758:	68fb      	ldr	r3, [r7, #12]
}
 800875a:	4618      	mov	r0, r3
 800875c:	3714      	adds	r7, #20
 800875e:	46bd      	mov	sp, r7
 8008760:	bc80      	pop	{r7}
 8008762:	4770      	bx	lr
 8008764:	08008769 	.word	0x08008769

08008768 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008768:	b480      	push	{r7}
 800876a:	b085      	sub	sp, #20
 800876c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800876e:	2300      	movs	r3, #0
 8008770:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008772:	4b12      	ldr	r3, [pc, #72]	; (80087bc <prvTaskExitError+0x54>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800877a:	d00a      	beq.n	8008792 <prvTaskExitError+0x2a>
	__asm volatile
 800877c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008780:	f383 8811 	msr	BASEPRI, r3
 8008784:	f3bf 8f6f 	isb	sy
 8008788:	f3bf 8f4f 	dsb	sy
 800878c:	60fb      	str	r3, [r7, #12]
}
 800878e:	bf00      	nop
 8008790:	e7fe      	b.n	8008790 <prvTaskExitError+0x28>
	__asm volatile
 8008792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008796:	f383 8811 	msr	BASEPRI, r3
 800879a:	f3bf 8f6f 	isb	sy
 800879e:	f3bf 8f4f 	dsb	sy
 80087a2:	60bb      	str	r3, [r7, #8]
}
 80087a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80087a6:	bf00      	nop
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d0fc      	beq.n	80087a8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80087ae:	bf00      	nop
 80087b0:	bf00      	nop
 80087b2:	3714      	adds	r7, #20
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bc80      	pop	{r7}
 80087b8:	4770      	bx	lr
 80087ba:	bf00      	nop
 80087bc:	2000000c 	.word	0x2000000c

080087c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80087c0:	4b07      	ldr	r3, [pc, #28]	; (80087e0 <pxCurrentTCBConst2>)
 80087c2:	6819      	ldr	r1, [r3, #0]
 80087c4:	6808      	ldr	r0, [r1, #0]
 80087c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80087ca:	f380 8809 	msr	PSP, r0
 80087ce:	f3bf 8f6f 	isb	sy
 80087d2:	f04f 0000 	mov.w	r0, #0
 80087d6:	f380 8811 	msr	BASEPRI, r0
 80087da:	f04e 0e0d 	orr.w	lr, lr, #13
 80087de:	4770      	bx	lr

080087e0 <pxCurrentTCBConst2>:
 80087e0:	20000c10 	.word	0x20000c10
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80087e4:	bf00      	nop
 80087e6:	bf00      	nop

080087e8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80087e8:	4806      	ldr	r0, [pc, #24]	; (8008804 <prvPortStartFirstTask+0x1c>)
 80087ea:	6800      	ldr	r0, [r0, #0]
 80087ec:	6800      	ldr	r0, [r0, #0]
 80087ee:	f380 8808 	msr	MSP, r0
 80087f2:	b662      	cpsie	i
 80087f4:	b661      	cpsie	f
 80087f6:	f3bf 8f4f 	dsb	sy
 80087fa:	f3bf 8f6f 	isb	sy
 80087fe:	df00      	svc	0
 8008800:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008802:	bf00      	nop
 8008804:	e000ed08 	.word	0xe000ed08

08008808 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b084      	sub	sp, #16
 800880c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800880e:	4b32      	ldr	r3, [pc, #200]	; (80088d8 <xPortStartScheduler+0xd0>)
 8008810:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	781b      	ldrb	r3, [r3, #0]
 8008816:	b2db      	uxtb	r3, r3
 8008818:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	22ff      	movs	r2, #255	; 0xff
 800881e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	781b      	ldrb	r3, [r3, #0]
 8008824:	b2db      	uxtb	r3, r3
 8008826:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008828:	78fb      	ldrb	r3, [r7, #3]
 800882a:	b2db      	uxtb	r3, r3
 800882c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008830:	b2da      	uxtb	r2, r3
 8008832:	4b2a      	ldr	r3, [pc, #168]	; (80088dc <xPortStartScheduler+0xd4>)
 8008834:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008836:	4b2a      	ldr	r3, [pc, #168]	; (80088e0 <xPortStartScheduler+0xd8>)
 8008838:	2207      	movs	r2, #7
 800883a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800883c:	e009      	b.n	8008852 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800883e:	4b28      	ldr	r3, [pc, #160]	; (80088e0 <xPortStartScheduler+0xd8>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	3b01      	subs	r3, #1
 8008844:	4a26      	ldr	r2, [pc, #152]	; (80088e0 <xPortStartScheduler+0xd8>)
 8008846:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008848:	78fb      	ldrb	r3, [r7, #3]
 800884a:	b2db      	uxtb	r3, r3
 800884c:	005b      	lsls	r3, r3, #1
 800884e:	b2db      	uxtb	r3, r3
 8008850:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008852:	78fb      	ldrb	r3, [r7, #3]
 8008854:	b2db      	uxtb	r3, r3
 8008856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800885a:	2b80      	cmp	r3, #128	; 0x80
 800885c:	d0ef      	beq.n	800883e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800885e:	4b20      	ldr	r3, [pc, #128]	; (80088e0 <xPortStartScheduler+0xd8>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f1c3 0307 	rsb	r3, r3, #7
 8008866:	2b04      	cmp	r3, #4
 8008868:	d00a      	beq.n	8008880 <xPortStartScheduler+0x78>
	__asm volatile
 800886a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800886e:	f383 8811 	msr	BASEPRI, r3
 8008872:	f3bf 8f6f 	isb	sy
 8008876:	f3bf 8f4f 	dsb	sy
 800887a:	60bb      	str	r3, [r7, #8]
}
 800887c:	bf00      	nop
 800887e:	e7fe      	b.n	800887e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008880:	4b17      	ldr	r3, [pc, #92]	; (80088e0 <xPortStartScheduler+0xd8>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	021b      	lsls	r3, r3, #8
 8008886:	4a16      	ldr	r2, [pc, #88]	; (80088e0 <xPortStartScheduler+0xd8>)
 8008888:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800888a:	4b15      	ldr	r3, [pc, #84]	; (80088e0 <xPortStartScheduler+0xd8>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008892:	4a13      	ldr	r2, [pc, #76]	; (80088e0 <xPortStartScheduler+0xd8>)
 8008894:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	b2da      	uxtb	r2, r3
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800889e:	4b11      	ldr	r3, [pc, #68]	; (80088e4 <xPortStartScheduler+0xdc>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a10      	ldr	r2, [pc, #64]	; (80088e4 <xPortStartScheduler+0xdc>)
 80088a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80088a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80088aa:	4b0e      	ldr	r3, [pc, #56]	; (80088e4 <xPortStartScheduler+0xdc>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4a0d      	ldr	r2, [pc, #52]	; (80088e4 <xPortStartScheduler+0xdc>)
 80088b0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80088b4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80088b6:	f000 f8b9 	bl	8008a2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80088ba:	4b0b      	ldr	r3, [pc, #44]	; (80088e8 <xPortStartScheduler+0xe0>)
 80088bc:	2200      	movs	r2, #0
 80088be:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80088c0:	f7ff ff92 	bl	80087e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80088c4:	f7fe ffb0 	bl	8007828 <vTaskSwitchContext>
	prvTaskExitError();
 80088c8:	f7ff ff4e 	bl	8008768 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80088cc:	2300      	movs	r3, #0
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3710      	adds	r7, #16
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}
 80088d6:	bf00      	nop
 80088d8:	e000e400 	.word	0xe000e400
 80088dc:	2000123c 	.word	0x2000123c
 80088e0:	20001240 	.word	0x20001240
 80088e4:	e000ed20 	.word	0xe000ed20
 80088e8:	2000000c 	.word	0x2000000c

080088ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80088ec:	b480      	push	{r7}
 80088ee:	b083      	sub	sp, #12
 80088f0:	af00      	add	r7, sp, #0
	__asm volatile
 80088f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f6:	f383 8811 	msr	BASEPRI, r3
 80088fa:	f3bf 8f6f 	isb	sy
 80088fe:	f3bf 8f4f 	dsb	sy
 8008902:	607b      	str	r3, [r7, #4]
}
 8008904:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008906:	4b0f      	ldr	r3, [pc, #60]	; (8008944 <vPortEnterCritical+0x58>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	3301      	adds	r3, #1
 800890c:	4a0d      	ldr	r2, [pc, #52]	; (8008944 <vPortEnterCritical+0x58>)
 800890e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008910:	4b0c      	ldr	r3, [pc, #48]	; (8008944 <vPortEnterCritical+0x58>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	2b01      	cmp	r3, #1
 8008916:	d10f      	bne.n	8008938 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008918:	4b0b      	ldr	r3, [pc, #44]	; (8008948 <vPortEnterCritical+0x5c>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	b2db      	uxtb	r3, r3
 800891e:	2b00      	cmp	r3, #0
 8008920:	d00a      	beq.n	8008938 <vPortEnterCritical+0x4c>
	__asm volatile
 8008922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008926:	f383 8811 	msr	BASEPRI, r3
 800892a:	f3bf 8f6f 	isb	sy
 800892e:	f3bf 8f4f 	dsb	sy
 8008932:	603b      	str	r3, [r7, #0]
}
 8008934:	bf00      	nop
 8008936:	e7fe      	b.n	8008936 <vPortEnterCritical+0x4a>
	}
}
 8008938:	bf00      	nop
 800893a:	370c      	adds	r7, #12
 800893c:	46bd      	mov	sp, r7
 800893e:	bc80      	pop	{r7}
 8008940:	4770      	bx	lr
 8008942:	bf00      	nop
 8008944:	2000000c 	.word	0x2000000c
 8008948:	e000ed04 	.word	0xe000ed04

0800894c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800894c:	b480      	push	{r7}
 800894e:	b083      	sub	sp, #12
 8008950:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008952:	4b11      	ldr	r3, [pc, #68]	; (8008998 <vPortExitCritical+0x4c>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d10a      	bne.n	8008970 <vPortExitCritical+0x24>
	__asm volatile
 800895a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800895e:	f383 8811 	msr	BASEPRI, r3
 8008962:	f3bf 8f6f 	isb	sy
 8008966:	f3bf 8f4f 	dsb	sy
 800896a:	607b      	str	r3, [r7, #4]
}
 800896c:	bf00      	nop
 800896e:	e7fe      	b.n	800896e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008970:	4b09      	ldr	r3, [pc, #36]	; (8008998 <vPortExitCritical+0x4c>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	3b01      	subs	r3, #1
 8008976:	4a08      	ldr	r2, [pc, #32]	; (8008998 <vPortExitCritical+0x4c>)
 8008978:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800897a:	4b07      	ldr	r3, [pc, #28]	; (8008998 <vPortExitCritical+0x4c>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d105      	bne.n	800898e <vPortExitCritical+0x42>
 8008982:	2300      	movs	r3, #0
 8008984:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	f383 8811 	msr	BASEPRI, r3
}
 800898c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800898e:	bf00      	nop
 8008990:	370c      	adds	r7, #12
 8008992:	46bd      	mov	sp, r7
 8008994:	bc80      	pop	{r7}
 8008996:	4770      	bx	lr
 8008998:	2000000c 	.word	0x2000000c
 800899c:	00000000 	.word	0x00000000

080089a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80089a0:	f3ef 8009 	mrs	r0, PSP
 80089a4:	f3bf 8f6f 	isb	sy
 80089a8:	4b0d      	ldr	r3, [pc, #52]	; (80089e0 <pxCurrentTCBConst>)
 80089aa:	681a      	ldr	r2, [r3, #0]
 80089ac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80089b0:	6010      	str	r0, [r2, #0]
 80089b2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80089b6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80089ba:	f380 8811 	msr	BASEPRI, r0
 80089be:	f7fe ff33 	bl	8007828 <vTaskSwitchContext>
 80089c2:	f04f 0000 	mov.w	r0, #0
 80089c6:	f380 8811 	msr	BASEPRI, r0
 80089ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80089ce:	6819      	ldr	r1, [r3, #0]
 80089d0:	6808      	ldr	r0, [r1, #0]
 80089d2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80089d6:	f380 8809 	msr	PSP, r0
 80089da:	f3bf 8f6f 	isb	sy
 80089de:	4770      	bx	lr

080089e0 <pxCurrentTCBConst>:
 80089e0:	20000c10 	.word	0x20000c10
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80089e4:	bf00      	nop
 80089e6:	bf00      	nop

080089e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b082      	sub	sp, #8
 80089ec:	af00      	add	r7, sp, #0
	__asm volatile
 80089ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f2:	f383 8811 	msr	BASEPRI, r3
 80089f6:	f3bf 8f6f 	isb	sy
 80089fa:	f3bf 8f4f 	dsb	sy
 80089fe:	607b      	str	r3, [r7, #4]
}
 8008a00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008a02:	f7fe fe53 	bl	80076ac <xTaskIncrementTick>
 8008a06:	4603      	mov	r3, r0
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d003      	beq.n	8008a14 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008a0c:	4b06      	ldr	r3, [pc, #24]	; (8008a28 <SysTick_Handler+0x40>)
 8008a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a12:	601a      	str	r2, [r3, #0]
 8008a14:	2300      	movs	r3, #0
 8008a16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	f383 8811 	msr	BASEPRI, r3
}
 8008a1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008a20:	bf00      	nop
 8008a22:	3708      	adds	r7, #8
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}
 8008a28:	e000ed04 	.word	0xe000ed04

08008a2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008a30:	4b0a      	ldr	r3, [pc, #40]	; (8008a5c <vPortSetupTimerInterrupt+0x30>)
 8008a32:	2200      	movs	r2, #0
 8008a34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008a36:	4b0a      	ldr	r3, [pc, #40]	; (8008a60 <vPortSetupTimerInterrupt+0x34>)
 8008a38:	2200      	movs	r2, #0
 8008a3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008a3c:	4b09      	ldr	r3, [pc, #36]	; (8008a64 <vPortSetupTimerInterrupt+0x38>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4a09      	ldr	r2, [pc, #36]	; (8008a68 <vPortSetupTimerInterrupt+0x3c>)
 8008a42:	fba2 2303 	umull	r2, r3, r2, r3
 8008a46:	099b      	lsrs	r3, r3, #6
 8008a48:	4a08      	ldr	r2, [pc, #32]	; (8008a6c <vPortSetupTimerInterrupt+0x40>)
 8008a4a:	3b01      	subs	r3, #1
 8008a4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008a4e:	4b03      	ldr	r3, [pc, #12]	; (8008a5c <vPortSetupTimerInterrupt+0x30>)
 8008a50:	2207      	movs	r2, #7
 8008a52:	601a      	str	r2, [r3, #0]
}
 8008a54:	bf00      	nop
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bc80      	pop	{r7}
 8008a5a:	4770      	bx	lr
 8008a5c:	e000e010 	.word	0xe000e010
 8008a60:	e000e018 	.word	0xe000e018
 8008a64:	20000000 	.word	0x20000000
 8008a68:	10624dd3 	.word	0x10624dd3
 8008a6c:	e000e014 	.word	0xe000e014

08008a70 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008a70:	b480      	push	{r7}
 8008a72:	b085      	sub	sp, #20
 8008a74:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008a76:	f3ef 8305 	mrs	r3, IPSR
 8008a7a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	2b0f      	cmp	r3, #15
 8008a80:	d914      	bls.n	8008aac <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008a82:	4a16      	ldr	r2, [pc, #88]	; (8008adc <vPortValidateInterruptPriority+0x6c>)
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	4413      	add	r3, r2
 8008a88:	781b      	ldrb	r3, [r3, #0]
 8008a8a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008a8c:	4b14      	ldr	r3, [pc, #80]	; (8008ae0 <vPortValidateInterruptPriority+0x70>)
 8008a8e:	781b      	ldrb	r3, [r3, #0]
 8008a90:	7afa      	ldrb	r2, [r7, #11]
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d20a      	bcs.n	8008aac <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a9a:	f383 8811 	msr	BASEPRI, r3
 8008a9e:	f3bf 8f6f 	isb	sy
 8008aa2:	f3bf 8f4f 	dsb	sy
 8008aa6:	607b      	str	r3, [r7, #4]
}
 8008aa8:	bf00      	nop
 8008aaa:	e7fe      	b.n	8008aaa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008aac:	4b0d      	ldr	r3, [pc, #52]	; (8008ae4 <vPortValidateInterruptPriority+0x74>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008ab4:	4b0c      	ldr	r3, [pc, #48]	; (8008ae8 <vPortValidateInterruptPriority+0x78>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d90a      	bls.n	8008ad2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac0:	f383 8811 	msr	BASEPRI, r3
 8008ac4:	f3bf 8f6f 	isb	sy
 8008ac8:	f3bf 8f4f 	dsb	sy
 8008acc:	603b      	str	r3, [r7, #0]
}
 8008ace:	bf00      	nop
 8008ad0:	e7fe      	b.n	8008ad0 <vPortValidateInterruptPriority+0x60>
	}
 8008ad2:	bf00      	nop
 8008ad4:	3714      	adds	r7, #20
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bc80      	pop	{r7}
 8008ada:	4770      	bx	lr
 8008adc:	e000e3f0 	.word	0xe000e3f0
 8008ae0:	2000123c 	.word	0x2000123c
 8008ae4:	e000ed0c 	.word	0xe000ed0c
 8008ae8:	20001240 	.word	0x20001240

08008aec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b08a      	sub	sp, #40	; 0x28
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008af4:	2300      	movs	r3, #0
 8008af6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008af8:	f7fe fd1e 	bl	8007538 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008afc:	4b58      	ldr	r3, [pc, #352]	; (8008c60 <pvPortMalloc+0x174>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d101      	bne.n	8008b08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008b04:	f000 f910 	bl	8008d28 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008b08:	4b56      	ldr	r3, [pc, #344]	; (8008c64 <pvPortMalloc+0x178>)
 8008b0a:	681a      	ldr	r2, [r3, #0]
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	4013      	ands	r3, r2
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	f040 808e 	bne.w	8008c32 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d01d      	beq.n	8008b58 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008b1c:	2208      	movs	r2, #8
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	4413      	add	r3, r2
 8008b22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f003 0307 	and.w	r3, r3, #7
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d014      	beq.n	8008b58 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f023 0307 	bic.w	r3, r3, #7
 8008b34:	3308      	adds	r3, #8
 8008b36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f003 0307 	and.w	r3, r3, #7
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d00a      	beq.n	8008b58 <pvPortMalloc+0x6c>
	__asm volatile
 8008b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b46:	f383 8811 	msr	BASEPRI, r3
 8008b4a:	f3bf 8f6f 	isb	sy
 8008b4e:	f3bf 8f4f 	dsb	sy
 8008b52:	617b      	str	r3, [r7, #20]
}
 8008b54:	bf00      	nop
 8008b56:	e7fe      	b.n	8008b56 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d069      	beq.n	8008c32 <pvPortMalloc+0x146>
 8008b5e:	4b42      	ldr	r3, [pc, #264]	; (8008c68 <pvPortMalloc+0x17c>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	687a      	ldr	r2, [r7, #4]
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d864      	bhi.n	8008c32 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008b68:	4b40      	ldr	r3, [pc, #256]	; (8008c6c <pvPortMalloc+0x180>)
 8008b6a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008b6c:	4b3f      	ldr	r3, [pc, #252]	; (8008c6c <pvPortMalloc+0x180>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008b72:	e004      	b.n	8008b7e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b76:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b80:	685b      	ldr	r3, [r3, #4]
 8008b82:	687a      	ldr	r2, [r7, #4]
 8008b84:	429a      	cmp	r2, r3
 8008b86:	d903      	bls.n	8008b90 <pvPortMalloc+0xa4>
 8008b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d1f1      	bne.n	8008b74 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008b90:	4b33      	ldr	r3, [pc, #204]	; (8008c60 <pvPortMalloc+0x174>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b96:	429a      	cmp	r2, r3
 8008b98:	d04b      	beq.n	8008c32 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008b9a:	6a3b      	ldr	r3, [r7, #32]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	2208      	movs	r2, #8
 8008ba0:	4413      	add	r3, r2
 8008ba2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba6:	681a      	ldr	r2, [r3, #0]
 8008ba8:	6a3b      	ldr	r3, [r7, #32]
 8008baa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bae:	685a      	ldr	r2, [r3, #4]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	1ad2      	subs	r2, r2, r3
 8008bb4:	2308      	movs	r3, #8
 8008bb6:	005b      	lsls	r3, r3, #1
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	d91f      	bls.n	8008bfc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008bbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	4413      	add	r3, r2
 8008bc2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008bc4:	69bb      	ldr	r3, [r7, #24]
 8008bc6:	f003 0307 	and.w	r3, r3, #7
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d00a      	beq.n	8008be4 <pvPortMalloc+0xf8>
	__asm volatile
 8008bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd2:	f383 8811 	msr	BASEPRI, r3
 8008bd6:	f3bf 8f6f 	isb	sy
 8008bda:	f3bf 8f4f 	dsb	sy
 8008bde:	613b      	str	r3, [r7, #16]
}
 8008be0:	bf00      	nop
 8008be2:	e7fe      	b.n	8008be2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be6:	685a      	ldr	r2, [r3, #4]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	1ad2      	subs	r2, r2, r3
 8008bec:	69bb      	ldr	r3, [r7, #24]
 8008bee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf2:	687a      	ldr	r2, [r7, #4]
 8008bf4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008bf6:	69b8      	ldr	r0, [r7, #24]
 8008bf8:	f000 f8f8 	bl	8008dec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008bfc:	4b1a      	ldr	r3, [pc, #104]	; (8008c68 <pvPortMalloc+0x17c>)
 8008bfe:	681a      	ldr	r2, [r3, #0]
 8008c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c02:	685b      	ldr	r3, [r3, #4]
 8008c04:	1ad3      	subs	r3, r2, r3
 8008c06:	4a18      	ldr	r2, [pc, #96]	; (8008c68 <pvPortMalloc+0x17c>)
 8008c08:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008c0a:	4b17      	ldr	r3, [pc, #92]	; (8008c68 <pvPortMalloc+0x17c>)
 8008c0c:	681a      	ldr	r2, [r3, #0]
 8008c0e:	4b18      	ldr	r3, [pc, #96]	; (8008c70 <pvPortMalloc+0x184>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d203      	bcs.n	8008c1e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008c16:	4b14      	ldr	r3, [pc, #80]	; (8008c68 <pvPortMalloc+0x17c>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4a15      	ldr	r2, [pc, #84]	; (8008c70 <pvPortMalloc+0x184>)
 8008c1c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c20:	685a      	ldr	r2, [r3, #4]
 8008c22:	4b10      	ldr	r3, [pc, #64]	; (8008c64 <pvPortMalloc+0x178>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	431a      	orrs	r2, r3
 8008c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c2a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c2e:	2200      	movs	r2, #0
 8008c30:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008c32:	f7fe fc8f 	bl	8007554 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c36:	69fb      	ldr	r3, [r7, #28]
 8008c38:	f003 0307 	and.w	r3, r3, #7
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d00a      	beq.n	8008c56 <pvPortMalloc+0x16a>
	__asm volatile
 8008c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c44:	f383 8811 	msr	BASEPRI, r3
 8008c48:	f3bf 8f6f 	isb	sy
 8008c4c:	f3bf 8f4f 	dsb	sy
 8008c50:	60fb      	str	r3, [r7, #12]
}
 8008c52:	bf00      	nop
 8008c54:	e7fe      	b.n	8008c54 <pvPortMalloc+0x168>
	return pvReturn;
 8008c56:	69fb      	ldr	r3, [r7, #28]
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3728      	adds	r7, #40	; 0x28
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}
 8008c60:	20003250 	.word	0x20003250
 8008c64:	2000325c 	.word	0x2000325c
 8008c68:	20003254 	.word	0x20003254
 8008c6c:	20003248 	.word	0x20003248
 8008c70:	20003258 	.word	0x20003258

08008c74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b086      	sub	sp, #24
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d048      	beq.n	8008d18 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008c86:	2308      	movs	r3, #8
 8008c88:	425b      	negs	r3, r3
 8008c8a:	697a      	ldr	r2, [r7, #20]
 8008c8c:	4413      	add	r3, r2
 8008c8e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	685a      	ldr	r2, [r3, #4]
 8008c98:	4b21      	ldr	r3, [pc, #132]	; (8008d20 <vPortFree+0xac>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4013      	ands	r3, r2
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d10a      	bne.n	8008cb8 <vPortFree+0x44>
	__asm volatile
 8008ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca6:	f383 8811 	msr	BASEPRI, r3
 8008caa:	f3bf 8f6f 	isb	sy
 8008cae:	f3bf 8f4f 	dsb	sy
 8008cb2:	60fb      	str	r3, [r7, #12]
}
 8008cb4:	bf00      	nop
 8008cb6:	e7fe      	b.n	8008cb6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d00a      	beq.n	8008cd6 <vPortFree+0x62>
	__asm volatile
 8008cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc4:	f383 8811 	msr	BASEPRI, r3
 8008cc8:	f3bf 8f6f 	isb	sy
 8008ccc:	f3bf 8f4f 	dsb	sy
 8008cd0:	60bb      	str	r3, [r7, #8]
}
 8008cd2:	bf00      	nop
 8008cd4:	e7fe      	b.n	8008cd4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	685a      	ldr	r2, [r3, #4]
 8008cda:	4b11      	ldr	r3, [pc, #68]	; (8008d20 <vPortFree+0xac>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	4013      	ands	r3, r2
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d019      	beq.n	8008d18 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d115      	bne.n	8008d18 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	685a      	ldr	r2, [r3, #4]
 8008cf0:	4b0b      	ldr	r3, [pc, #44]	; (8008d20 <vPortFree+0xac>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	43db      	mvns	r3, r3
 8008cf6:	401a      	ands	r2, r3
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008cfc:	f7fe fc1c 	bl	8007538 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	685a      	ldr	r2, [r3, #4]
 8008d04:	4b07      	ldr	r3, [pc, #28]	; (8008d24 <vPortFree+0xb0>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	4413      	add	r3, r2
 8008d0a:	4a06      	ldr	r2, [pc, #24]	; (8008d24 <vPortFree+0xb0>)
 8008d0c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008d0e:	6938      	ldr	r0, [r7, #16]
 8008d10:	f000 f86c 	bl	8008dec <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008d14:	f7fe fc1e 	bl	8007554 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008d18:	bf00      	nop
 8008d1a:	3718      	adds	r7, #24
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}
 8008d20:	2000325c 	.word	0x2000325c
 8008d24:	20003254 	.word	0x20003254

08008d28 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b085      	sub	sp, #20
 8008d2c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008d2e:	f242 0304 	movw	r3, #8196	; 0x2004
 8008d32:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008d34:	4b27      	ldr	r3, [pc, #156]	; (8008dd4 <prvHeapInit+0xac>)
 8008d36:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	f003 0307 	and.w	r3, r3, #7
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d00c      	beq.n	8008d5c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	3307      	adds	r3, #7
 8008d46:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	f023 0307 	bic.w	r3, r3, #7
 8008d4e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008d50:	68ba      	ldr	r2, [r7, #8]
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	1ad3      	subs	r3, r2, r3
 8008d56:	4a1f      	ldr	r2, [pc, #124]	; (8008dd4 <prvHeapInit+0xac>)
 8008d58:	4413      	add	r3, r2
 8008d5a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008d60:	4a1d      	ldr	r2, [pc, #116]	; (8008dd8 <prvHeapInit+0xb0>)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008d66:	4b1c      	ldr	r3, [pc, #112]	; (8008dd8 <prvHeapInit+0xb0>)
 8008d68:	2200      	movs	r2, #0
 8008d6a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	68ba      	ldr	r2, [r7, #8]
 8008d70:	4413      	add	r3, r2
 8008d72:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008d74:	2208      	movs	r2, #8
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	1a9b      	subs	r3, r3, r2
 8008d7a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	f023 0307 	bic.w	r3, r3, #7
 8008d82:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	4a15      	ldr	r2, [pc, #84]	; (8008ddc <prvHeapInit+0xb4>)
 8008d88:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008d8a:	4b14      	ldr	r3, [pc, #80]	; (8008ddc <prvHeapInit+0xb4>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008d92:	4b12      	ldr	r3, [pc, #72]	; (8008ddc <prvHeapInit+0xb4>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	2200      	movs	r2, #0
 8008d98:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	68fa      	ldr	r2, [r7, #12]
 8008da2:	1ad2      	subs	r2, r2, r3
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008da8:	4b0c      	ldr	r3, [pc, #48]	; (8008ddc <prvHeapInit+0xb4>)
 8008daa:	681a      	ldr	r2, [r3, #0]
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	4a0a      	ldr	r2, [pc, #40]	; (8008de0 <prvHeapInit+0xb8>)
 8008db6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	685b      	ldr	r3, [r3, #4]
 8008dbc:	4a09      	ldr	r2, [pc, #36]	; (8008de4 <prvHeapInit+0xbc>)
 8008dbe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008dc0:	4b09      	ldr	r3, [pc, #36]	; (8008de8 <prvHeapInit+0xc0>)
 8008dc2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008dc6:	601a      	str	r2, [r3, #0]
}
 8008dc8:	bf00      	nop
 8008dca:	3714      	adds	r7, #20
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bc80      	pop	{r7}
 8008dd0:	4770      	bx	lr
 8008dd2:	bf00      	nop
 8008dd4:	20001244 	.word	0x20001244
 8008dd8:	20003248 	.word	0x20003248
 8008ddc:	20003250 	.word	0x20003250
 8008de0:	20003258 	.word	0x20003258
 8008de4:	20003254 	.word	0x20003254
 8008de8:	2000325c 	.word	0x2000325c

08008dec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008dec:	b480      	push	{r7}
 8008dee:	b085      	sub	sp, #20
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008df4:	4b27      	ldr	r3, [pc, #156]	; (8008e94 <prvInsertBlockIntoFreeList+0xa8>)
 8008df6:	60fb      	str	r3, [r7, #12]
 8008df8:	e002      	b.n	8008e00 <prvInsertBlockIntoFreeList+0x14>
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	60fb      	str	r3, [r7, #12]
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	687a      	ldr	r2, [r7, #4]
 8008e06:	429a      	cmp	r2, r3
 8008e08:	d8f7      	bhi.n	8008dfa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	685b      	ldr	r3, [r3, #4]
 8008e12:	68ba      	ldr	r2, [r7, #8]
 8008e14:	4413      	add	r3, r2
 8008e16:	687a      	ldr	r2, [r7, #4]
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	d108      	bne.n	8008e2e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	685a      	ldr	r2, [r3, #4]
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	441a      	add	r2, r3
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	685b      	ldr	r3, [r3, #4]
 8008e36:	68ba      	ldr	r2, [r7, #8]
 8008e38:	441a      	add	r2, r3
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	429a      	cmp	r2, r3
 8008e40:	d118      	bne.n	8008e74 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681a      	ldr	r2, [r3, #0]
 8008e46:	4b14      	ldr	r3, [pc, #80]	; (8008e98 <prvInsertBlockIntoFreeList+0xac>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	429a      	cmp	r2, r3
 8008e4c:	d00d      	beq.n	8008e6a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	685a      	ldr	r2, [r3, #4]
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	441a      	add	r2, r3
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	681a      	ldr	r2, [r3, #0]
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	601a      	str	r2, [r3, #0]
 8008e68:	e008      	b.n	8008e7c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008e6a:	4b0b      	ldr	r3, [pc, #44]	; (8008e98 <prvInsertBlockIntoFreeList+0xac>)
 8008e6c:	681a      	ldr	r2, [r3, #0]
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	601a      	str	r2, [r3, #0]
 8008e72:	e003      	b.n	8008e7c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681a      	ldr	r2, [r3, #0]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008e7c:	68fa      	ldr	r2, [r7, #12]
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d002      	beq.n	8008e8a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	687a      	ldr	r2, [r7, #4]
 8008e88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e8a:	bf00      	nop
 8008e8c:	3714      	adds	r7, #20
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bc80      	pop	{r7}
 8008e92:	4770      	bx	lr
 8008e94:	20003248 	.word	0x20003248
 8008e98:	20003250 	.word	0x20003250

08008e9c <__errno>:
 8008e9c:	4b01      	ldr	r3, [pc, #4]	; (8008ea4 <__errno+0x8>)
 8008e9e:	6818      	ldr	r0, [r3, #0]
 8008ea0:	4770      	bx	lr
 8008ea2:	bf00      	nop
 8008ea4:	20000010 	.word	0x20000010

08008ea8 <std>:
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	b510      	push	{r4, lr}
 8008eac:	4604      	mov	r4, r0
 8008eae:	e9c0 3300 	strd	r3, r3, [r0]
 8008eb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008eb6:	6083      	str	r3, [r0, #8]
 8008eb8:	8181      	strh	r1, [r0, #12]
 8008eba:	6643      	str	r3, [r0, #100]	; 0x64
 8008ebc:	81c2      	strh	r2, [r0, #14]
 8008ebe:	6183      	str	r3, [r0, #24]
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	2208      	movs	r2, #8
 8008ec4:	305c      	adds	r0, #92	; 0x5c
 8008ec6:	f000 f91a 	bl	80090fe <memset>
 8008eca:	4b05      	ldr	r3, [pc, #20]	; (8008ee0 <std+0x38>)
 8008ecc:	6224      	str	r4, [r4, #32]
 8008ece:	6263      	str	r3, [r4, #36]	; 0x24
 8008ed0:	4b04      	ldr	r3, [pc, #16]	; (8008ee4 <std+0x3c>)
 8008ed2:	62a3      	str	r3, [r4, #40]	; 0x28
 8008ed4:	4b04      	ldr	r3, [pc, #16]	; (8008ee8 <std+0x40>)
 8008ed6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008ed8:	4b04      	ldr	r3, [pc, #16]	; (8008eec <std+0x44>)
 8008eda:	6323      	str	r3, [r4, #48]	; 0x30
 8008edc:	bd10      	pop	{r4, pc}
 8008ede:	bf00      	nop
 8008ee0:	0800a051 	.word	0x0800a051
 8008ee4:	0800a073 	.word	0x0800a073
 8008ee8:	0800a0ab 	.word	0x0800a0ab
 8008eec:	0800a0cf 	.word	0x0800a0cf

08008ef0 <_cleanup_r>:
 8008ef0:	4901      	ldr	r1, [pc, #4]	; (8008ef8 <_cleanup_r+0x8>)
 8008ef2:	f000 b8af 	b.w	8009054 <_fwalk_reent>
 8008ef6:	bf00      	nop
 8008ef8:	0800bc31 	.word	0x0800bc31

08008efc <__sfmoreglue>:
 8008efc:	2268      	movs	r2, #104	; 0x68
 8008efe:	b570      	push	{r4, r5, r6, lr}
 8008f00:	1e4d      	subs	r5, r1, #1
 8008f02:	4355      	muls	r5, r2
 8008f04:	460e      	mov	r6, r1
 8008f06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008f0a:	f000 f921 	bl	8009150 <_malloc_r>
 8008f0e:	4604      	mov	r4, r0
 8008f10:	b140      	cbz	r0, 8008f24 <__sfmoreglue+0x28>
 8008f12:	2100      	movs	r1, #0
 8008f14:	e9c0 1600 	strd	r1, r6, [r0]
 8008f18:	300c      	adds	r0, #12
 8008f1a:	60a0      	str	r0, [r4, #8]
 8008f1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008f20:	f000 f8ed 	bl	80090fe <memset>
 8008f24:	4620      	mov	r0, r4
 8008f26:	bd70      	pop	{r4, r5, r6, pc}

08008f28 <__sfp_lock_acquire>:
 8008f28:	4801      	ldr	r0, [pc, #4]	; (8008f30 <__sfp_lock_acquire+0x8>)
 8008f2a:	f000 b8d8 	b.w	80090de <__retarget_lock_acquire_recursive>
 8008f2e:	bf00      	nop
 8008f30:	20003261 	.word	0x20003261

08008f34 <__sfp_lock_release>:
 8008f34:	4801      	ldr	r0, [pc, #4]	; (8008f3c <__sfp_lock_release+0x8>)
 8008f36:	f000 b8d3 	b.w	80090e0 <__retarget_lock_release_recursive>
 8008f3a:	bf00      	nop
 8008f3c:	20003261 	.word	0x20003261

08008f40 <__sinit_lock_acquire>:
 8008f40:	4801      	ldr	r0, [pc, #4]	; (8008f48 <__sinit_lock_acquire+0x8>)
 8008f42:	f000 b8cc 	b.w	80090de <__retarget_lock_acquire_recursive>
 8008f46:	bf00      	nop
 8008f48:	20003262 	.word	0x20003262

08008f4c <__sinit_lock_release>:
 8008f4c:	4801      	ldr	r0, [pc, #4]	; (8008f54 <__sinit_lock_release+0x8>)
 8008f4e:	f000 b8c7 	b.w	80090e0 <__retarget_lock_release_recursive>
 8008f52:	bf00      	nop
 8008f54:	20003262 	.word	0x20003262

08008f58 <__sinit>:
 8008f58:	b510      	push	{r4, lr}
 8008f5a:	4604      	mov	r4, r0
 8008f5c:	f7ff fff0 	bl	8008f40 <__sinit_lock_acquire>
 8008f60:	69a3      	ldr	r3, [r4, #24]
 8008f62:	b11b      	cbz	r3, 8008f6c <__sinit+0x14>
 8008f64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f68:	f7ff bff0 	b.w	8008f4c <__sinit_lock_release>
 8008f6c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008f70:	6523      	str	r3, [r4, #80]	; 0x50
 8008f72:	4b13      	ldr	r3, [pc, #76]	; (8008fc0 <__sinit+0x68>)
 8008f74:	4a13      	ldr	r2, [pc, #76]	; (8008fc4 <__sinit+0x6c>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	62a2      	str	r2, [r4, #40]	; 0x28
 8008f7a:	42a3      	cmp	r3, r4
 8008f7c:	bf08      	it	eq
 8008f7e:	2301      	moveq	r3, #1
 8008f80:	4620      	mov	r0, r4
 8008f82:	bf08      	it	eq
 8008f84:	61a3      	streq	r3, [r4, #24]
 8008f86:	f000 f81f 	bl	8008fc8 <__sfp>
 8008f8a:	6060      	str	r0, [r4, #4]
 8008f8c:	4620      	mov	r0, r4
 8008f8e:	f000 f81b 	bl	8008fc8 <__sfp>
 8008f92:	60a0      	str	r0, [r4, #8]
 8008f94:	4620      	mov	r0, r4
 8008f96:	f000 f817 	bl	8008fc8 <__sfp>
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	2104      	movs	r1, #4
 8008f9e:	60e0      	str	r0, [r4, #12]
 8008fa0:	6860      	ldr	r0, [r4, #4]
 8008fa2:	f7ff ff81 	bl	8008ea8 <std>
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	2109      	movs	r1, #9
 8008faa:	68a0      	ldr	r0, [r4, #8]
 8008fac:	f7ff ff7c 	bl	8008ea8 <std>
 8008fb0:	2202      	movs	r2, #2
 8008fb2:	2112      	movs	r1, #18
 8008fb4:	68e0      	ldr	r0, [r4, #12]
 8008fb6:	f7ff ff77 	bl	8008ea8 <std>
 8008fba:	2301      	movs	r3, #1
 8008fbc:	61a3      	str	r3, [r4, #24]
 8008fbe:	e7d1      	b.n	8008f64 <__sinit+0xc>
 8008fc0:	0800dbd8 	.word	0x0800dbd8
 8008fc4:	08008ef1 	.word	0x08008ef1

08008fc8 <__sfp>:
 8008fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fca:	4607      	mov	r7, r0
 8008fcc:	f7ff ffac 	bl	8008f28 <__sfp_lock_acquire>
 8008fd0:	4b1e      	ldr	r3, [pc, #120]	; (800904c <__sfp+0x84>)
 8008fd2:	681e      	ldr	r6, [r3, #0]
 8008fd4:	69b3      	ldr	r3, [r6, #24]
 8008fd6:	b913      	cbnz	r3, 8008fde <__sfp+0x16>
 8008fd8:	4630      	mov	r0, r6
 8008fda:	f7ff ffbd 	bl	8008f58 <__sinit>
 8008fde:	3648      	adds	r6, #72	; 0x48
 8008fe0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008fe4:	3b01      	subs	r3, #1
 8008fe6:	d503      	bpl.n	8008ff0 <__sfp+0x28>
 8008fe8:	6833      	ldr	r3, [r6, #0]
 8008fea:	b30b      	cbz	r3, 8009030 <__sfp+0x68>
 8008fec:	6836      	ldr	r6, [r6, #0]
 8008fee:	e7f7      	b.n	8008fe0 <__sfp+0x18>
 8008ff0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008ff4:	b9d5      	cbnz	r5, 800902c <__sfp+0x64>
 8008ff6:	4b16      	ldr	r3, [pc, #88]	; (8009050 <__sfp+0x88>)
 8008ff8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008ffc:	60e3      	str	r3, [r4, #12]
 8008ffe:	6665      	str	r5, [r4, #100]	; 0x64
 8009000:	f000 f86c 	bl	80090dc <__retarget_lock_init_recursive>
 8009004:	f7ff ff96 	bl	8008f34 <__sfp_lock_release>
 8009008:	2208      	movs	r2, #8
 800900a:	4629      	mov	r1, r5
 800900c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009010:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009014:	6025      	str	r5, [r4, #0]
 8009016:	61a5      	str	r5, [r4, #24]
 8009018:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800901c:	f000 f86f 	bl	80090fe <memset>
 8009020:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009024:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009028:	4620      	mov	r0, r4
 800902a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800902c:	3468      	adds	r4, #104	; 0x68
 800902e:	e7d9      	b.n	8008fe4 <__sfp+0x1c>
 8009030:	2104      	movs	r1, #4
 8009032:	4638      	mov	r0, r7
 8009034:	f7ff ff62 	bl	8008efc <__sfmoreglue>
 8009038:	4604      	mov	r4, r0
 800903a:	6030      	str	r0, [r6, #0]
 800903c:	2800      	cmp	r0, #0
 800903e:	d1d5      	bne.n	8008fec <__sfp+0x24>
 8009040:	f7ff ff78 	bl	8008f34 <__sfp_lock_release>
 8009044:	230c      	movs	r3, #12
 8009046:	603b      	str	r3, [r7, #0]
 8009048:	e7ee      	b.n	8009028 <__sfp+0x60>
 800904a:	bf00      	nop
 800904c:	0800dbd8 	.word	0x0800dbd8
 8009050:	ffff0001 	.word	0xffff0001

08009054 <_fwalk_reent>:
 8009054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009058:	4606      	mov	r6, r0
 800905a:	4688      	mov	r8, r1
 800905c:	2700      	movs	r7, #0
 800905e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009062:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009066:	f1b9 0901 	subs.w	r9, r9, #1
 800906a:	d505      	bpl.n	8009078 <_fwalk_reent+0x24>
 800906c:	6824      	ldr	r4, [r4, #0]
 800906e:	2c00      	cmp	r4, #0
 8009070:	d1f7      	bne.n	8009062 <_fwalk_reent+0xe>
 8009072:	4638      	mov	r0, r7
 8009074:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009078:	89ab      	ldrh	r3, [r5, #12]
 800907a:	2b01      	cmp	r3, #1
 800907c:	d907      	bls.n	800908e <_fwalk_reent+0x3a>
 800907e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009082:	3301      	adds	r3, #1
 8009084:	d003      	beq.n	800908e <_fwalk_reent+0x3a>
 8009086:	4629      	mov	r1, r5
 8009088:	4630      	mov	r0, r6
 800908a:	47c0      	blx	r8
 800908c:	4307      	orrs	r7, r0
 800908e:	3568      	adds	r5, #104	; 0x68
 8009090:	e7e9      	b.n	8009066 <_fwalk_reent+0x12>
	...

08009094 <__libc_init_array>:
 8009094:	b570      	push	{r4, r5, r6, lr}
 8009096:	2600      	movs	r6, #0
 8009098:	4d0c      	ldr	r5, [pc, #48]	; (80090cc <__libc_init_array+0x38>)
 800909a:	4c0d      	ldr	r4, [pc, #52]	; (80090d0 <__libc_init_array+0x3c>)
 800909c:	1b64      	subs	r4, r4, r5
 800909e:	10a4      	asrs	r4, r4, #2
 80090a0:	42a6      	cmp	r6, r4
 80090a2:	d109      	bne.n	80090b8 <__libc_init_array+0x24>
 80090a4:	f004 fbc4 	bl	800d830 <_init>
 80090a8:	2600      	movs	r6, #0
 80090aa:	4d0a      	ldr	r5, [pc, #40]	; (80090d4 <__libc_init_array+0x40>)
 80090ac:	4c0a      	ldr	r4, [pc, #40]	; (80090d8 <__libc_init_array+0x44>)
 80090ae:	1b64      	subs	r4, r4, r5
 80090b0:	10a4      	asrs	r4, r4, #2
 80090b2:	42a6      	cmp	r6, r4
 80090b4:	d105      	bne.n	80090c2 <__libc_init_array+0x2e>
 80090b6:	bd70      	pop	{r4, r5, r6, pc}
 80090b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80090bc:	4798      	blx	r3
 80090be:	3601      	adds	r6, #1
 80090c0:	e7ee      	b.n	80090a0 <__libc_init_array+0xc>
 80090c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80090c6:	4798      	blx	r3
 80090c8:	3601      	adds	r6, #1
 80090ca:	e7f2      	b.n	80090b2 <__libc_init_array+0x1e>
 80090cc:	0800e01c 	.word	0x0800e01c
 80090d0:	0800e01c 	.word	0x0800e01c
 80090d4:	0800e01c 	.word	0x0800e01c
 80090d8:	0800e020 	.word	0x0800e020

080090dc <__retarget_lock_init_recursive>:
 80090dc:	4770      	bx	lr

080090de <__retarget_lock_acquire_recursive>:
 80090de:	4770      	bx	lr

080090e0 <__retarget_lock_release_recursive>:
 80090e0:	4770      	bx	lr

080090e2 <memcpy>:
 80090e2:	440a      	add	r2, r1
 80090e4:	4291      	cmp	r1, r2
 80090e6:	f100 33ff 	add.w	r3, r0, #4294967295
 80090ea:	d100      	bne.n	80090ee <memcpy+0xc>
 80090ec:	4770      	bx	lr
 80090ee:	b510      	push	{r4, lr}
 80090f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090f4:	4291      	cmp	r1, r2
 80090f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80090fa:	d1f9      	bne.n	80090f0 <memcpy+0xe>
 80090fc:	bd10      	pop	{r4, pc}

080090fe <memset>:
 80090fe:	4603      	mov	r3, r0
 8009100:	4402      	add	r2, r0
 8009102:	4293      	cmp	r3, r2
 8009104:	d100      	bne.n	8009108 <memset+0xa>
 8009106:	4770      	bx	lr
 8009108:	f803 1b01 	strb.w	r1, [r3], #1
 800910c:	e7f9      	b.n	8009102 <memset+0x4>
	...

08009110 <sbrk_aligned>:
 8009110:	b570      	push	{r4, r5, r6, lr}
 8009112:	4e0e      	ldr	r6, [pc, #56]	; (800914c <sbrk_aligned+0x3c>)
 8009114:	460c      	mov	r4, r1
 8009116:	6831      	ldr	r1, [r6, #0]
 8009118:	4605      	mov	r5, r0
 800911a:	b911      	cbnz	r1, 8009122 <sbrk_aligned+0x12>
 800911c:	f000 ff64 	bl	8009fe8 <_sbrk_r>
 8009120:	6030      	str	r0, [r6, #0]
 8009122:	4621      	mov	r1, r4
 8009124:	4628      	mov	r0, r5
 8009126:	f000 ff5f 	bl	8009fe8 <_sbrk_r>
 800912a:	1c43      	adds	r3, r0, #1
 800912c:	d00a      	beq.n	8009144 <sbrk_aligned+0x34>
 800912e:	1cc4      	adds	r4, r0, #3
 8009130:	f024 0403 	bic.w	r4, r4, #3
 8009134:	42a0      	cmp	r0, r4
 8009136:	d007      	beq.n	8009148 <sbrk_aligned+0x38>
 8009138:	1a21      	subs	r1, r4, r0
 800913a:	4628      	mov	r0, r5
 800913c:	f000 ff54 	bl	8009fe8 <_sbrk_r>
 8009140:	3001      	adds	r0, #1
 8009142:	d101      	bne.n	8009148 <sbrk_aligned+0x38>
 8009144:	f04f 34ff 	mov.w	r4, #4294967295
 8009148:	4620      	mov	r0, r4
 800914a:	bd70      	pop	{r4, r5, r6, pc}
 800914c:	20003268 	.word	0x20003268

08009150 <_malloc_r>:
 8009150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009154:	1ccd      	adds	r5, r1, #3
 8009156:	f025 0503 	bic.w	r5, r5, #3
 800915a:	3508      	adds	r5, #8
 800915c:	2d0c      	cmp	r5, #12
 800915e:	bf38      	it	cc
 8009160:	250c      	movcc	r5, #12
 8009162:	2d00      	cmp	r5, #0
 8009164:	4607      	mov	r7, r0
 8009166:	db01      	blt.n	800916c <_malloc_r+0x1c>
 8009168:	42a9      	cmp	r1, r5
 800916a:	d905      	bls.n	8009178 <_malloc_r+0x28>
 800916c:	230c      	movs	r3, #12
 800916e:	2600      	movs	r6, #0
 8009170:	603b      	str	r3, [r7, #0]
 8009172:	4630      	mov	r0, r6
 8009174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009178:	4e2e      	ldr	r6, [pc, #184]	; (8009234 <_malloc_r+0xe4>)
 800917a:	f003 f939 	bl	800c3f0 <__malloc_lock>
 800917e:	6833      	ldr	r3, [r6, #0]
 8009180:	461c      	mov	r4, r3
 8009182:	bb34      	cbnz	r4, 80091d2 <_malloc_r+0x82>
 8009184:	4629      	mov	r1, r5
 8009186:	4638      	mov	r0, r7
 8009188:	f7ff ffc2 	bl	8009110 <sbrk_aligned>
 800918c:	1c43      	adds	r3, r0, #1
 800918e:	4604      	mov	r4, r0
 8009190:	d14d      	bne.n	800922e <_malloc_r+0xde>
 8009192:	6834      	ldr	r4, [r6, #0]
 8009194:	4626      	mov	r6, r4
 8009196:	2e00      	cmp	r6, #0
 8009198:	d140      	bne.n	800921c <_malloc_r+0xcc>
 800919a:	6823      	ldr	r3, [r4, #0]
 800919c:	4631      	mov	r1, r6
 800919e:	4638      	mov	r0, r7
 80091a0:	eb04 0803 	add.w	r8, r4, r3
 80091a4:	f000 ff20 	bl	8009fe8 <_sbrk_r>
 80091a8:	4580      	cmp	r8, r0
 80091aa:	d13a      	bne.n	8009222 <_malloc_r+0xd2>
 80091ac:	6821      	ldr	r1, [r4, #0]
 80091ae:	3503      	adds	r5, #3
 80091b0:	1a6d      	subs	r5, r5, r1
 80091b2:	f025 0503 	bic.w	r5, r5, #3
 80091b6:	3508      	adds	r5, #8
 80091b8:	2d0c      	cmp	r5, #12
 80091ba:	bf38      	it	cc
 80091bc:	250c      	movcc	r5, #12
 80091be:	4638      	mov	r0, r7
 80091c0:	4629      	mov	r1, r5
 80091c2:	f7ff ffa5 	bl	8009110 <sbrk_aligned>
 80091c6:	3001      	adds	r0, #1
 80091c8:	d02b      	beq.n	8009222 <_malloc_r+0xd2>
 80091ca:	6823      	ldr	r3, [r4, #0]
 80091cc:	442b      	add	r3, r5
 80091ce:	6023      	str	r3, [r4, #0]
 80091d0:	e00e      	b.n	80091f0 <_malloc_r+0xa0>
 80091d2:	6822      	ldr	r2, [r4, #0]
 80091d4:	1b52      	subs	r2, r2, r5
 80091d6:	d41e      	bmi.n	8009216 <_malloc_r+0xc6>
 80091d8:	2a0b      	cmp	r2, #11
 80091da:	d916      	bls.n	800920a <_malloc_r+0xba>
 80091dc:	1961      	adds	r1, r4, r5
 80091de:	42a3      	cmp	r3, r4
 80091e0:	6025      	str	r5, [r4, #0]
 80091e2:	bf18      	it	ne
 80091e4:	6059      	strne	r1, [r3, #4]
 80091e6:	6863      	ldr	r3, [r4, #4]
 80091e8:	bf08      	it	eq
 80091ea:	6031      	streq	r1, [r6, #0]
 80091ec:	5162      	str	r2, [r4, r5]
 80091ee:	604b      	str	r3, [r1, #4]
 80091f0:	4638      	mov	r0, r7
 80091f2:	f104 060b 	add.w	r6, r4, #11
 80091f6:	f003 f901 	bl	800c3fc <__malloc_unlock>
 80091fa:	f026 0607 	bic.w	r6, r6, #7
 80091fe:	1d23      	adds	r3, r4, #4
 8009200:	1af2      	subs	r2, r6, r3
 8009202:	d0b6      	beq.n	8009172 <_malloc_r+0x22>
 8009204:	1b9b      	subs	r3, r3, r6
 8009206:	50a3      	str	r3, [r4, r2]
 8009208:	e7b3      	b.n	8009172 <_malloc_r+0x22>
 800920a:	6862      	ldr	r2, [r4, #4]
 800920c:	42a3      	cmp	r3, r4
 800920e:	bf0c      	ite	eq
 8009210:	6032      	streq	r2, [r6, #0]
 8009212:	605a      	strne	r2, [r3, #4]
 8009214:	e7ec      	b.n	80091f0 <_malloc_r+0xa0>
 8009216:	4623      	mov	r3, r4
 8009218:	6864      	ldr	r4, [r4, #4]
 800921a:	e7b2      	b.n	8009182 <_malloc_r+0x32>
 800921c:	4634      	mov	r4, r6
 800921e:	6876      	ldr	r6, [r6, #4]
 8009220:	e7b9      	b.n	8009196 <_malloc_r+0x46>
 8009222:	230c      	movs	r3, #12
 8009224:	4638      	mov	r0, r7
 8009226:	603b      	str	r3, [r7, #0]
 8009228:	f003 f8e8 	bl	800c3fc <__malloc_unlock>
 800922c:	e7a1      	b.n	8009172 <_malloc_r+0x22>
 800922e:	6025      	str	r5, [r4, #0]
 8009230:	e7de      	b.n	80091f0 <_malloc_r+0xa0>
 8009232:	bf00      	nop
 8009234:	20003264 	.word	0x20003264

08009238 <__cvt>:
 8009238:	2b00      	cmp	r3, #0
 800923a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800923e:	461f      	mov	r7, r3
 8009240:	bfbb      	ittet	lt
 8009242:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8009246:	461f      	movlt	r7, r3
 8009248:	2300      	movge	r3, #0
 800924a:	232d      	movlt	r3, #45	; 0x2d
 800924c:	b088      	sub	sp, #32
 800924e:	4614      	mov	r4, r2
 8009250:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009252:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009254:	7013      	strb	r3, [r2, #0]
 8009256:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009258:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800925c:	f023 0820 	bic.w	r8, r3, #32
 8009260:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009264:	d005      	beq.n	8009272 <__cvt+0x3a>
 8009266:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800926a:	d100      	bne.n	800926e <__cvt+0x36>
 800926c:	3501      	adds	r5, #1
 800926e:	2302      	movs	r3, #2
 8009270:	e000      	b.n	8009274 <__cvt+0x3c>
 8009272:	2303      	movs	r3, #3
 8009274:	aa07      	add	r2, sp, #28
 8009276:	9204      	str	r2, [sp, #16]
 8009278:	aa06      	add	r2, sp, #24
 800927a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800927e:	e9cd 3500 	strd	r3, r5, [sp]
 8009282:	4622      	mov	r2, r4
 8009284:	463b      	mov	r3, r7
 8009286:	f001 fe63 	bl	800af50 <_dtoa_r>
 800928a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800928e:	4606      	mov	r6, r0
 8009290:	d102      	bne.n	8009298 <__cvt+0x60>
 8009292:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009294:	07db      	lsls	r3, r3, #31
 8009296:	d522      	bpl.n	80092de <__cvt+0xa6>
 8009298:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800929c:	eb06 0905 	add.w	r9, r6, r5
 80092a0:	d110      	bne.n	80092c4 <__cvt+0x8c>
 80092a2:	7833      	ldrb	r3, [r6, #0]
 80092a4:	2b30      	cmp	r3, #48	; 0x30
 80092a6:	d10a      	bne.n	80092be <__cvt+0x86>
 80092a8:	2200      	movs	r2, #0
 80092aa:	2300      	movs	r3, #0
 80092ac:	4620      	mov	r0, r4
 80092ae:	4639      	mov	r1, r7
 80092b0:	f7f7 fb7a 	bl	80009a8 <__aeabi_dcmpeq>
 80092b4:	b918      	cbnz	r0, 80092be <__cvt+0x86>
 80092b6:	f1c5 0501 	rsb	r5, r5, #1
 80092ba:	f8ca 5000 	str.w	r5, [sl]
 80092be:	f8da 3000 	ldr.w	r3, [sl]
 80092c2:	4499      	add	r9, r3
 80092c4:	2200      	movs	r2, #0
 80092c6:	2300      	movs	r3, #0
 80092c8:	4620      	mov	r0, r4
 80092ca:	4639      	mov	r1, r7
 80092cc:	f7f7 fb6c 	bl	80009a8 <__aeabi_dcmpeq>
 80092d0:	b108      	cbz	r0, 80092d6 <__cvt+0x9e>
 80092d2:	f8cd 901c 	str.w	r9, [sp, #28]
 80092d6:	2230      	movs	r2, #48	; 0x30
 80092d8:	9b07      	ldr	r3, [sp, #28]
 80092da:	454b      	cmp	r3, r9
 80092dc:	d307      	bcc.n	80092ee <__cvt+0xb6>
 80092de:	4630      	mov	r0, r6
 80092e0:	9b07      	ldr	r3, [sp, #28]
 80092e2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80092e4:	1b9b      	subs	r3, r3, r6
 80092e6:	6013      	str	r3, [r2, #0]
 80092e8:	b008      	add	sp, #32
 80092ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092ee:	1c59      	adds	r1, r3, #1
 80092f0:	9107      	str	r1, [sp, #28]
 80092f2:	701a      	strb	r2, [r3, #0]
 80092f4:	e7f0      	b.n	80092d8 <__cvt+0xa0>

080092f6 <__exponent>:
 80092f6:	4603      	mov	r3, r0
 80092f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80092fa:	2900      	cmp	r1, #0
 80092fc:	f803 2b02 	strb.w	r2, [r3], #2
 8009300:	bfb6      	itet	lt
 8009302:	222d      	movlt	r2, #45	; 0x2d
 8009304:	222b      	movge	r2, #43	; 0x2b
 8009306:	4249      	neglt	r1, r1
 8009308:	2909      	cmp	r1, #9
 800930a:	7042      	strb	r2, [r0, #1]
 800930c:	dd2b      	ble.n	8009366 <__exponent+0x70>
 800930e:	f10d 0407 	add.w	r4, sp, #7
 8009312:	46a4      	mov	ip, r4
 8009314:	270a      	movs	r7, #10
 8009316:	fb91 f6f7 	sdiv	r6, r1, r7
 800931a:	460a      	mov	r2, r1
 800931c:	46a6      	mov	lr, r4
 800931e:	fb07 1516 	mls	r5, r7, r6, r1
 8009322:	2a63      	cmp	r2, #99	; 0x63
 8009324:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8009328:	4631      	mov	r1, r6
 800932a:	f104 34ff 	add.w	r4, r4, #4294967295
 800932e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009332:	dcf0      	bgt.n	8009316 <__exponent+0x20>
 8009334:	3130      	adds	r1, #48	; 0x30
 8009336:	f1ae 0502 	sub.w	r5, lr, #2
 800933a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800933e:	4629      	mov	r1, r5
 8009340:	1c44      	adds	r4, r0, #1
 8009342:	4561      	cmp	r1, ip
 8009344:	d30a      	bcc.n	800935c <__exponent+0x66>
 8009346:	f10d 0209 	add.w	r2, sp, #9
 800934a:	eba2 020e 	sub.w	r2, r2, lr
 800934e:	4565      	cmp	r5, ip
 8009350:	bf88      	it	hi
 8009352:	2200      	movhi	r2, #0
 8009354:	4413      	add	r3, r2
 8009356:	1a18      	subs	r0, r3, r0
 8009358:	b003      	add	sp, #12
 800935a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800935c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009360:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009364:	e7ed      	b.n	8009342 <__exponent+0x4c>
 8009366:	2330      	movs	r3, #48	; 0x30
 8009368:	3130      	adds	r1, #48	; 0x30
 800936a:	7083      	strb	r3, [r0, #2]
 800936c:	70c1      	strb	r1, [r0, #3]
 800936e:	1d03      	adds	r3, r0, #4
 8009370:	e7f1      	b.n	8009356 <__exponent+0x60>
	...

08009374 <_printf_float>:
 8009374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009378:	b091      	sub	sp, #68	; 0x44
 800937a:	460c      	mov	r4, r1
 800937c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8009380:	4616      	mov	r6, r2
 8009382:	461f      	mov	r7, r3
 8009384:	4605      	mov	r5, r0
 8009386:	f002 fff5 	bl	800c374 <_localeconv_r>
 800938a:	6803      	ldr	r3, [r0, #0]
 800938c:	4618      	mov	r0, r3
 800938e:	9309      	str	r3, [sp, #36]	; 0x24
 8009390:	f7f6 fede 	bl	8000150 <strlen>
 8009394:	2300      	movs	r3, #0
 8009396:	930e      	str	r3, [sp, #56]	; 0x38
 8009398:	f8d8 3000 	ldr.w	r3, [r8]
 800939c:	900a      	str	r0, [sp, #40]	; 0x28
 800939e:	3307      	adds	r3, #7
 80093a0:	f023 0307 	bic.w	r3, r3, #7
 80093a4:	f103 0208 	add.w	r2, r3, #8
 80093a8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80093ac:	f8d4 b000 	ldr.w	fp, [r4]
 80093b0:	f8c8 2000 	str.w	r2, [r8]
 80093b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80093bc:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80093c0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80093c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80093c6:	f04f 32ff 	mov.w	r2, #4294967295
 80093ca:	4640      	mov	r0, r8
 80093cc:	4b9c      	ldr	r3, [pc, #624]	; (8009640 <_printf_float+0x2cc>)
 80093ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80093d0:	f7f7 fb1c 	bl	8000a0c <__aeabi_dcmpun>
 80093d4:	bb70      	cbnz	r0, 8009434 <_printf_float+0xc0>
 80093d6:	f04f 32ff 	mov.w	r2, #4294967295
 80093da:	4640      	mov	r0, r8
 80093dc:	4b98      	ldr	r3, [pc, #608]	; (8009640 <_printf_float+0x2cc>)
 80093de:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80093e0:	f7f7 faf6 	bl	80009d0 <__aeabi_dcmple>
 80093e4:	bb30      	cbnz	r0, 8009434 <_printf_float+0xc0>
 80093e6:	2200      	movs	r2, #0
 80093e8:	2300      	movs	r3, #0
 80093ea:	4640      	mov	r0, r8
 80093ec:	4651      	mov	r1, sl
 80093ee:	f7f7 fae5 	bl	80009bc <__aeabi_dcmplt>
 80093f2:	b110      	cbz	r0, 80093fa <_printf_float+0x86>
 80093f4:	232d      	movs	r3, #45	; 0x2d
 80093f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093fa:	4b92      	ldr	r3, [pc, #584]	; (8009644 <_printf_float+0x2d0>)
 80093fc:	4892      	ldr	r0, [pc, #584]	; (8009648 <_printf_float+0x2d4>)
 80093fe:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009402:	bf94      	ite	ls
 8009404:	4698      	movls	r8, r3
 8009406:	4680      	movhi	r8, r0
 8009408:	2303      	movs	r3, #3
 800940a:	f04f 0a00 	mov.w	sl, #0
 800940e:	6123      	str	r3, [r4, #16]
 8009410:	f02b 0304 	bic.w	r3, fp, #4
 8009414:	6023      	str	r3, [r4, #0]
 8009416:	4633      	mov	r3, r6
 8009418:	4621      	mov	r1, r4
 800941a:	4628      	mov	r0, r5
 800941c:	9700      	str	r7, [sp, #0]
 800941e:	aa0f      	add	r2, sp, #60	; 0x3c
 8009420:	f000 f9d4 	bl	80097cc <_printf_common>
 8009424:	3001      	adds	r0, #1
 8009426:	f040 8090 	bne.w	800954a <_printf_float+0x1d6>
 800942a:	f04f 30ff 	mov.w	r0, #4294967295
 800942e:	b011      	add	sp, #68	; 0x44
 8009430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009434:	4642      	mov	r2, r8
 8009436:	4653      	mov	r3, sl
 8009438:	4640      	mov	r0, r8
 800943a:	4651      	mov	r1, sl
 800943c:	f7f7 fae6 	bl	8000a0c <__aeabi_dcmpun>
 8009440:	b148      	cbz	r0, 8009456 <_printf_float+0xe2>
 8009442:	f1ba 0f00 	cmp.w	sl, #0
 8009446:	bfb8      	it	lt
 8009448:	232d      	movlt	r3, #45	; 0x2d
 800944a:	4880      	ldr	r0, [pc, #512]	; (800964c <_printf_float+0x2d8>)
 800944c:	bfb8      	it	lt
 800944e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009452:	4b7f      	ldr	r3, [pc, #508]	; (8009650 <_printf_float+0x2dc>)
 8009454:	e7d3      	b.n	80093fe <_printf_float+0x8a>
 8009456:	6863      	ldr	r3, [r4, #4]
 8009458:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800945c:	1c5a      	adds	r2, r3, #1
 800945e:	d142      	bne.n	80094e6 <_printf_float+0x172>
 8009460:	2306      	movs	r3, #6
 8009462:	6063      	str	r3, [r4, #4]
 8009464:	2200      	movs	r2, #0
 8009466:	9206      	str	r2, [sp, #24]
 8009468:	aa0e      	add	r2, sp, #56	; 0x38
 800946a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800946e:	aa0d      	add	r2, sp, #52	; 0x34
 8009470:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8009474:	9203      	str	r2, [sp, #12]
 8009476:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800947a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800947e:	6023      	str	r3, [r4, #0]
 8009480:	6863      	ldr	r3, [r4, #4]
 8009482:	4642      	mov	r2, r8
 8009484:	9300      	str	r3, [sp, #0]
 8009486:	4628      	mov	r0, r5
 8009488:	4653      	mov	r3, sl
 800948a:	910b      	str	r1, [sp, #44]	; 0x2c
 800948c:	f7ff fed4 	bl	8009238 <__cvt>
 8009490:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009492:	4680      	mov	r8, r0
 8009494:	2947      	cmp	r1, #71	; 0x47
 8009496:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009498:	d108      	bne.n	80094ac <_printf_float+0x138>
 800949a:	1cc8      	adds	r0, r1, #3
 800949c:	db02      	blt.n	80094a4 <_printf_float+0x130>
 800949e:	6863      	ldr	r3, [r4, #4]
 80094a0:	4299      	cmp	r1, r3
 80094a2:	dd40      	ble.n	8009526 <_printf_float+0x1b2>
 80094a4:	f1a9 0902 	sub.w	r9, r9, #2
 80094a8:	fa5f f989 	uxtb.w	r9, r9
 80094ac:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80094b0:	d81f      	bhi.n	80094f2 <_printf_float+0x17e>
 80094b2:	464a      	mov	r2, r9
 80094b4:	3901      	subs	r1, #1
 80094b6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80094ba:	910d      	str	r1, [sp, #52]	; 0x34
 80094bc:	f7ff ff1b 	bl	80092f6 <__exponent>
 80094c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80094c2:	4682      	mov	sl, r0
 80094c4:	1813      	adds	r3, r2, r0
 80094c6:	2a01      	cmp	r2, #1
 80094c8:	6123      	str	r3, [r4, #16]
 80094ca:	dc02      	bgt.n	80094d2 <_printf_float+0x15e>
 80094cc:	6822      	ldr	r2, [r4, #0]
 80094ce:	07d2      	lsls	r2, r2, #31
 80094d0:	d501      	bpl.n	80094d6 <_printf_float+0x162>
 80094d2:	3301      	adds	r3, #1
 80094d4:	6123      	str	r3, [r4, #16]
 80094d6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d09b      	beq.n	8009416 <_printf_float+0xa2>
 80094de:	232d      	movs	r3, #45	; 0x2d
 80094e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094e4:	e797      	b.n	8009416 <_printf_float+0xa2>
 80094e6:	2947      	cmp	r1, #71	; 0x47
 80094e8:	d1bc      	bne.n	8009464 <_printf_float+0xf0>
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d1ba      	bne.n	8009464 <_printf_float+0xf0>
 80094ee:	2301      	movs	r3, #1
 80094f0:	e7b7      	b.n	8009462 <_printf_float+0xee>
 80094f2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80094f6:	d118      	bne.n	800952a <_printf_float+0x1b6>
 80094f8:	2900      	cmp	r1, #0
 80094fa:	6863      	ldr	r3, [r4, #4]
 80094fc:	dd0b      	ble.n	8009516 <_printf_float+0x1a2>
 80094fe:	6121      	str	r1, [r4, #16]
 8009500:	b913      	cbnz	r3, 8009508 <_printf_float+0x194>
 8009502:	6822      	ldr	r2, [r4, #0]
 8009504:	07d0      	lsls	r0, r2, #31
 8009506:	d502      	bpl.n	800950e <_printf_float+0x19a>
 8009508:	3301      	adds	r3, #1
 800950a:	440b      	add	r3, r1
 800950c:	6123      	str	r3, [r4, #16]
 800950e:	f04f 0a00 	mov.w	sl, #0
 8009512:	65a1      	str	r1, [r4, #88]	; 0x58
 8009514:	e7df      	b.n	80094d6 <_printf_float+0x162>
 8009516:	b913      	cbnz	r3, 800951e <_printf_float+0x1aa>
 8009518:	6822      	ldr	r2, [r4, #0]
 800951a:	07d2      	lsls	r2, r2, #31
 800951c:	d501      	bpl.n	8009522 <_printf_float+0x1ae>
 800951e:	3302      	adds	r3, #2
 8009520:	e7f4      	b.n	800950c <_printf_float+0x198>
 8009522:	2301      	movs	r3, #1
 8009524:	e7f2      	b.n	800950c <_printf_float+0x198>
 8009526:	f04f 0967 	mov.w	r9, #103	; 0x67
 800952a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800952c:	4299      	cmp	r1, r3
 800952e:	db05      	blt.n	800953c <_printf_float+0x1c8>
 8009530:	6823      	ldr	r3, [r4, #0]
 8009532:	6121      	str	r1, [r4, #16]
 8009534:	07d8      	lsls	r0, r3, #31
 8009536:	d5ea      	bpl.n	800950e <_printf_float+0x19a>
 8009538:	1c4b      	adds	r3, r1, #1
 800953a:	e7e7      	b.n	800950c <_printf_float+0x198>
 800953c:	2900      	cmp	r1, #0
 800953e:	bfcc      	ite	gt
 8009540:	2201      	movgt	r2, #1
 8009542:	f1c1 0202 	rsble	r2, r1, #2
 8009546:	4413      	add	r3, r2
 8009548:	e7e0      	b.n	800950c <_printf_float+0x198>
 800954a:	6823      	ldr	r3, [r4, #0]
 800954c:	055a      	lsls	r2, r3, #21
 800954e:	d407      	bmi.n	8009560 <_printf_float+0x1ec>
 8009550:	6923      	ldr	r3, [r4, #16]
 8009552:	4642      	mov	r2, r8
 8009554:	4631      	mov	r1, r6
 8009556:	4628      	mov	r0, r5
 8009558:	47b8      	blx	r7
 800955a:	3001      	adds	r0, #1
 800955c:	d12b      	bne.n	80095b6 <_printf_float+0x242>
 800955e:	e764      	b.n	800942a <_printf_float+0xb6>
 8009560:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009564:	f240 80dd 	bls.w	8009722 <_printf_float+0x3ae>
 8009568:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800956c:	2200      	movs	r2, #0
 800956e:	2300      	movs	r3, #0
 8009570:	f7f7 fa1a 	bl	80009a8 <__aeabi_dcmpeq>
 8009574:	2800      	cmp	r0, #0
 8009576:	d033      	beq.n	80095e0 <_printf_float+0x26c>
 8009578:	2301      	movs	r3, #1
 800957a:	4631      	mov	r1, r6
 800957c:	4628      	mov	r0, r5
 800957e:	4a35      	ldr	r2, [pc, #212]	; (8009654 <_printf_float+0x2e0>)
 8009580:	47b8      	blx	r7
 8009582:	3001      	adds	r0, #1
 8009584:	f43f af51 	beq.w	800942a <_printf_float+0xb6>
 8009588:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800958c:	429a      	cmp	r2, r3
 800958e:	db02      	blt.n	8009596 <_printf_float+0x222>
 8009590:	6823      	ldr	r3, [r4, #0]
 8009592:	07d8      	lsls	r0, r3, #31
 8009594:	d50f      	bpl.n	80095b6 <_printf_float+0x242>
 8009596:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800959a:	4631      	mov	r1, r6
 800959c:	4628      	mov	r0, r5
 800959e:	47b8      	blx	r7
 80095a0:	3001      	adds	r0, #1
 80095a2:	f43f af42 	beq.w	800942a <_printf_float+0xb6>
 80095a6:	f04f 0800 	mov.w	r8, #0
 80095aa:	f104 091a 	add.w	r9, r4, #26
 80095ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80095b0:	3b01      	subs	r3, #1
 80095b2:	4543      	cmp	r3, r8
 80095b4:	dc09      	bgt.n	80095ca <_printf_float+0x256>
 80095b6:	6823      	ldr	r3, [r4, #0]
 80095b8:	079b      	lsls	r3, r3, #30
 80095ba:	f100 8102 	bmi.w	80097c2 <_printf_float+0x44e>
 80095be:	68e0      	ldr	r0, [r4, #12]
 80095c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80095c2:	4298      	cmp	r0, r3
 80095c4:	bfb8      	it	lt
 80095c6:	4618      	movlt	r0, r3
 80095c8:	e731      	b.n	800942e <_printf_float+0xba>
 80095ca:	2301      	movs	r3, #1
 80095cc:	464a      	mov	r2, r9
 80095ce:	4631      	mov	r1, r6
 80095d0:	4628      	mov	r0, r5
 80095d2:	47b8      	blx	r7
 80095d4:	3001      	adds	r0, #1
 80095d6:	f43f af28 	beq.w	800942a <_printf_float+0xb6>
 80095da:	f108 0801 	add.w	r8, r8, #1
 80095de:	e7e6      	b.n	80095ae <_printf_float+0x23a>
 80095e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	dc38      	bgt.n	8009658 <_printf_float+0x2e4>
 80095e6:	2301      	movs	r3, #1
 80095e8:	4631      	mov	r1, r6
 80095ea:	4628      	mov	r0, r5
 80095ec:	4a19      	ldr	r2, [pc, #100]	; (8009654 <_printf_float+0x2e0>)
 80095ee:	47b8      	blx	r7
 80095f0:	3001      	adds	r0, #1
 80095f2:	f43f af1a 	beq.w	800942a <_printf_float+0xb6>
 80095f6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80095fa:	4313      	orrs	r3, r2
 80095fc:	d102      	bne.n	8009604 <_printf_float+0x290>
 80095fe:	6823      	ldr	r3, [r4, #0]
 8009600:	07d9      	lsls	r1, r3, #31
 8009602:	d5d8      	bpl.n	80095b6 <_printf_float+0x242>
 8009604:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009608:	4631      	mov	r1, r6
 800960a:	4628      	mov	r0, r5
 800960c:	47b8      	blx	r7
 800960e:	3001      	adds	r0, #1
 8009610:	f43f af0b 	beq.w	800942a <_printf_float+0xb6>
 8009614:	f04f 0900 	mov.w	r9, #0
 8009618:	f104 0a1a 	add.w	sl, r4, #26
 800961c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800961e:	425b      	negs	r3, r3
 8009620:	454b      	cmp	r3, r9
 8009622:	dc01      	bgt.n	8009628 <_printf_float+0x2b4>
 8009624:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009626:	e794      	b.n	8009552 <_printf_float+0x1de>
 8009628:	2301      	movs	r3, #1
 800962a:	4652      	mov	r2, sl
 800962c:	4631      	mov	r1, r6
 800962e:	4628      	mov	r0, r5
 8009630:	47b8      	blx	r7
 8009632:	3001      	adds	r0, #1
 8009634:	f43f aef9 	beq.w	800942a <_printf_float+0xb6>
 8009638:	f109 0901 	add.w	r9, r9, #1
 800963c:	e7ee      	b.n	800961c <_printf_float+0x2a8>
 800963e:	bf00      	nop
 8009640:	7fefffff 	.word	0x7fefffff
 8009644:	0800dbdc 	.word	0x0800dbdc
 8009648:	0800dbe0 	.word	0x0800dbe0
 800964c:	0800dbe8 	.word	0x0800dbe8
 8009650:	0800dbe4 	.word	0x0800dbe4
 8009654:	0800dbec 	.word	0x0800dbec
 8009658:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800965a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800965c:	429a      	cmp	r2, r3
 800965e:	bfa8      	it	ge
 8009660:	461a      	movge	r2, r3
 8009662:	2a00      	cmp	r2, #0
 8009664:	4691      	mov	r9, r2
 8009666:	dc37      	bgt.n	80096d8 <_printf_float+0x364>
 8009668:	f04f 0b00 	mov.w	fp, #0
 800966c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009670:	f104 021a 	add.w	r2, r4, #26
 8009674:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009678:	ebaa 0309 	sub.w	r3, sl, r9
 800967c:	455b      	cmp	r3, fp
 800967e:	dc33      	bgt.n	80096e8 <_printf_float+0x374>
 8009680:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009684:	429a      	cmp	r2, r3
 8009686:	db3b      	blt.n	8009700 <_printf_float+0x38c>
 8009688:	6823      	ldr	r3, [r4, #0]
 800968a:	07da      	lsls	r2, r3, #31
 800968c:	d438      	bmi.n	8009700 <_printf_float+0x38c>
 800968e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009690:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009692:	eba3 020a 	sub.w	r2, r3, sl
 8009696:	eba3 0901 	sub.w	r9, r3, r1
 800969a:	4591      	cmp	r9, r2
 800969c:	bfa8      	it	ge
 800969e:	4691      	movge	r9, r2
 80096a0:	f1b9 0f00 	cmp.w	r9, #0
 80096a4:	dc34      	bgt.n	8009710 <_printf_float+0x39c>
 80096a6:	f04f 0800 	mov.w	r8, #0
 80096aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80096ae:	f104 0a1a 	add.w	sl, r4, #26
 80096b2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80096b6:	1a9b      	subs	r3, r3, r2
 80096b8:	eba3 0309 	sub.w	r3, r3, r9
 80096bc:	4543      	cmp	r3, r8
 80096be:	f77f af7a 	ble.w	80095b6 <_printf_float+0x242>
 80096c2:	2301      	movs	r3, #1
 80096c4:	4652      	mov	r2, sl
 80096c6:	4631      	mov	r1, r6
 80096c8:	4628      	mov	r0, r5
 80096ca:	47b8      	blx	r7
 80096cc:	3001      	adds	r0, #1
 80096ce:	f43f aeac 	beq.w	800942a <_printf_float+0xb6>
 80096d2:	f108 0801 	add.w	r8, r8, #1
 80096d6:	e7ec      	b.n	80096b2 <_printf_float+0x33e>
 80096d8:	4613      	mov	r3, r2
 80096da:	4631      	mov	r1, r6
 80096dc:	4642      	mov	r2, r8
 80096de:	4628      	mov	r0, r5
 80096e0:	47b8      	blx	r7
 80096e2:	3001      	adds	r0, #1
 80096e4:	d1c0      	bne.n	8009668 <_printf_float+0x2f4>
 80096e6:	e6a0      	b.n	800942a <_printf_float+0xb6>
 80096e8:	2301      	movs	r3, #1
 80096ea:	4631      	mov	r1, r6
 80096ec:	4628      	mov	r0, r5
 80096ee:	920b      	str	r2, [sp, #44]	; 0x2c
 80096f0:	47b8      	blx	r7
 80096f2:	3001      	adds	r0, #1
 80096f4:	f43f ae99 	beq.w	800942a <_printf_float+0xb6>
 80096f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80096fa:	f10b 0b01 	add.w	fp, fp, #1
 80096fe:	e7b9      	b.n	8009674 <_printf_float+0x300>
 8009700:	4631      	mov	r1, r6
 8009702:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009706:	4628      	mov	r0, r5
 8009708:	47b8      	blx	r7
 800970a:	3001      	adds	r0, #1
 800970c:	d1bf      	bne.n	800968e <_printf_float+0x31a>
 800970e:	e68c      	b.n	800942a <_printf_float+0xb6>
 8009710:	464b      	mov	r3, r9
 8009712:	4631      	mov	r1, r6
 8009714:	4628      	mov	r0, r5
 8009716:	eb08 020a 	add.w	r2, r8, sl
 800971a:	47b8      	blx	r7
 800971c:	3001      	adds	r0, #1
 800971e:	d1c2      	bne.n	80096a6 <_printf_float+0x332>
 8009720:	e683      	b.n	800942a <_printf_float+0xb6>
 8009722:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009724:	2a01      	cmp	r2, #1
 8009726:	dc01      	bgt.n	800972c <_printf_float+0x3b8>
 8009728:	07db      	lsls	r3, r3, #31
 800972a:	d537      	bpl.n	800979c <_printf_float+0x428>
 800972c:	2301      	movs	r3, #1
 800972e:	4642      	mov	r2, r8
 8009730:	4631      	mov	r1, r6
 8009732:	4628      	mov	r0, r5
 8009734:	47b8      	blx	r7
 8009736:	3001      	adds	r0, #1
 8009738:	f43f ae77 	beq.w	800942a <_printf_float+0xb6>
 800973c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009740:	4631      	mov	r1, r6
 8009742:	4628      	mov	r0, r5
 8009744:	47b8      	blx	r7
 8009746:	3001      	adds	r0, #1
 8009748:	f43f ae6f 	beq.w	800942a <_printf_float+0xb6>
 800974c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009750:	2200      	movs	r2, #0
 8009752:	2300      	movs	r3, #0
 8009754:	f7f7 f928 	bl	80009a8 <__aeabi_dcmpeq>
 8009758:	b9d8      	cbnz	r0, 8009792 <_printf_float+0x41e>
 800975a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800975c:	f108 0201 	add.w	r2, r8, #1
 8009760:	3b01      	subs	r3, #1
 8009762:	4631      	mov	r1, r6
 8009764:	4628      	mov	r0, r5
 8009766:	47b8      	blx	r7
 8009768:	3001      	adds	r0, #1
 800976a:	d10e      	bne.n	800978a <_printf_float+0x416>
 800976c:	e65d      	b.n	800942a <_printf_float+0xb6>
 800976e:	2301      	movs	r3, #1
 8009770:	464a      	mov	r2, r9
 8009772:	4631      	mov	r1, r6
 8009774:	4628      	mov	r0, r5
 8009776:	47b8      	blx	r7
 8009778:	3001      	adds	r0, #1
 800977a:	f43f ae56 	beq.w	800942a <_printf_float+0xb6>
 800977e:	f108 0801 	add.w	r8, r8, #1
 8009782:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009784:	3b01      	subs	r3, #1
 8009786:	4543      	cmp	r3, r8
 8009788:	dcf1      	bgt.n	800976e <_printf_float+0x3fa>
 800978a:	4653      	mov	r3, sl
 800978c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009790:	e6e0      	b.n	8009554 <_printf_float+0x1e0>
 8009792:	f04f 0800 	mov.w	r8, #0
 8009796:	f104 091a 	add.w	r9, r4, #26
 800979a:	e7f2      	b.n	8009782 <_printf_float+0x40e>
 800979c:	2301      	movs	r3, #1
 800979e:	4642      	mov	r2, r8
 80097a0:	e7df      	b.n	8009762 <_printf_float+0x3ee>
 80097a2:	2301      	movs	r3, #1
 80097a4:	464a      	mov	r2, r9
 80097a6:	4631      	mov	r1, r6
 80097a8:	4628      	mov	r0, r5
 80097aa:	47b8      	blx	r7
 80097ac:	3001      	adds	r0, #1
 80097ae:	f43f ae3c 	beq.w	800942a <_printf_float+0xb6>
 80097b2:	f108 0801 	add.w	r8, r8, #1
 80097b6:	68e3      	ldr	r3, [r4, #12]
 80097b8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80097ba:	1a5b      	subs	r3, r3, r1
 80097bc:	4543      	cmp	r3, r8
 80097be:	dcf0      	bgt.n	80097a2 <_printf_float+0x42e>
 80097c0:	e6fd      	b.n	80095be <_printf_float+0x24a>
 80097c2:	f04f 0800 	mov.w	r8, #0
 80097c6:	f104 0919 	add.w	r9, r4, #25
 80097ca:	e7f4      	b.n	80097b6 <_printf_float+0x442>

080097cc <_printf_common>:
 80097cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097d0:	4616      	mov	r6, r2
 80097d2:	4699      	mov	r9, r3
 80097d4:	688a      	ldr	r2, [r1, #8]
 80097d6:	690b      	ldr	r3, [r1, #16]
 80097d8:	4607      	mov	r7, r0
 80097da:	4293      	cmp	r3, r2
 80097dc:	bfb8      	it	lt
 80097de:	4613      	movlt	r3, r2
 80097e0:	6033      	str	r3, [r6, #0]
 80097e2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80097e6:	460c      	mov	r4, r1
 80097e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80097ec:	b10a      	cbz	r2, 80097f2 <_printf_common+0x26>
 80097ee:	3301      	adds	r3, #1
 80097f0:	6033      	str	r3, [r6, #0]
 80097f2:	6823      	ldr	r3, [r4, #0]
 80097f4:	0699      	lsls	r1, r3, #26
 80097f6:	bf42      	ittt	mi
 80097f8:	6833      	ldrmi	r3, [r6, #0]
 80097fa:	3302      	addmi	r3, #2
 80097fc:	6033      	strmi	r3, [r6, #0]
 80097fe:	6825      	ldr	r5, [r4, #0]
 8009800:	f015 0506 	ands.w	r5, r5, #6
 8009804:	d106      	bne.n	8009814 <_printf_common+0x48>
 8009806:	f104 0a19 	add.w	sl, r4, #25
 800980a:	68e3      	ldr	r3, [r4, #12]
 800980c:	6832      	ldr	r2, [r6, #0]
 800980e:	1a9b      	subs	r3, r3, r2
 8009810:	42ab      	cmp	r3, r5
 8009812:	dc28      	bgt.n	8009866 <_printf_common+0x9a>
 8009814:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009818:	1e13      	subs	r3, r2, #0
 800981a:	6822      	ldr	r2, [r4, #0]
 800981c:	bf18      	it	ne
 800981e:	2301      	movne	r3, #1
 8009820:	0692      	lsls	r2, r2, #26
 8009822:	d42d      	bmi.n	8009880 <_printf_common+0xb4>
 8009824:	4649      	mov	r1, r9
 8009826:	4638      	mov	r0, r7
 8009828:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800982c:	47c0      	blx	r8
 800982e:	3001      	adds	r0, #1
 8009830:	d020      	beq.n	8009874 <_printf_common+0xa8>
 8009832:	6823      	ldr	r3, [r4, #0]
 8009834:	68e5      	ldr	r5, [r4, #12]
 8009836:	f003 0306 	and.w	r3, r3, #6
 800983a:	2b04      	cmp	r3, #4
 800983c:	bf18      	it	ne
 800983e:	2500      	movne	r5, #0
 8009840:	6832      	ldr	r2, [r6, #0]
 8009842:	f04f 0600 	mov.w	r6, #0
 8009846:	68a3      	ldr	r3, [r4, #8]
 8009848:	bf08      	it	eq
 800984a:	1aad      	subeq	r5, r5, r2
 800984c:	6922      	ldr	r2, [r4, #16]
 800984e:	bf08      	it	eq
 8009850:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009854:	4293      	cmp	r3, r2
 8009856:	bfc4      	itt	gt
 8009858:	1a9b      	subgt	r3, r3, r2
 800985a:	18ed      	addgt	r5, r5, r3
 800985c:	341a      	adds	r4, #26
 800985e:	42b5      	cmp	r5, r6
 8009860:	d11a      	bne.n	8009898 <_printf_common+0xcc>
 8009862:	2000      	movs	r0, #0
 8009864:	e008      	b.n	8009878 <_printf_common+0xac>
 8009866:	2301      	movs	r3, #1
 8009868:	4652      	mov	r2, sl
 800986a:	4649      	mov	r1, r9
 800986c:	4638      	mov	r0, r7
 800986e:	47c0      	blx	r8
 8009870:	3001      	adds	r0, #1
 8009872:	d103      	bne.n	800987c <_printf_common+0xb0>
 8009874:	f04f 30ff 	mov.w	r0, #4294967295
 8009878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800987c:	3501      	adds	r5, #1
 800987e:	e7c4      	b.n	800980a <_printf_common+0x3e>
 8009880:	2030      	movs	r0, #48	; 0x30
 8009882:	18e1      	adds	r1, r4, r3
 8009884:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009888:	1c5a      	adds	r2, r3, #1
 800988a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800988e:	4422      	add	r2, r4
 8009890:	3302      	adds	r3, #2
 8009892:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009896:	e7c5      	b.n	8009824 <_printf_common+0x58>
 8009898:	2301      	movs	r3, #1
 800989a:	4622      	mov	r2, r4
 800989c:	4649      	mov	r1, r9
 800989e:	4638      	mov	r0, r7
 80098a0:	47c0      	blx	r8
 80098a2:	3001      	adds	r0, #1
 80098a4:	d0e6      	beq.n	8009874 <_printf_common+0xa8>
 80098a6:	3601      	adds	r6, #1
 80098a8:	e7d9      	b.n	800985e <_printf_common+0x92>
	...

080098ac <_printf_i>:
 80098ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80098b0:	7e0f      	ldrb	r7, [r1, #24]
 80098b2:	4691      	mov	r9, r2
 80098b4:	2f78      	cmp	r7, #120	; 0x78
 80098b6:	4680      	mov	r8, r0
 80098b8:	460c      	mov	r4, r1
 80098ba:	469a      	mov	sl, r3
 80098bc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80098be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80098c2:	d807      	bhi.n	80098d4 <_printf_i+0x28>
 80098c4:	2f62      	cmp	r7, #98	; 0x62
 80098c6:	d80a      	bhi.n	80098de <_printf_i+0x32>
 80098c8:	2f00      	cmp	r7, #0
 80098ca:	f000 80d9 	beq.w	8009a80 <_printf_i+0x1d4>
 80098ce:	2f58      	cmp	r7, #88	; 0x58
 80098d0:	f000 80a4 	beq.w	8009a1c <_printf_i+0x170>
 80098d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80098d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80098dc:	e03a      	b.n	8009954 <_printf_i+0xa8>
 80098de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80098e2:	2b15      	cmp	r3, #21
 80098e4:	d8f6      	bhi.n	80098d4 <_printf_i+0x28>
 80098e6:	a101      	add	r1, pc, #4	; (adr r1, 80098ec <_printf_i+0x40>)
 80098e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80098ec:	08009945 	.word	0x08009945
 80098f0:	08009959 	.word	0x08009959
 80098f4:	080098d5 	.word	0x080098d5
 80098f8:	080098d5 	.word	0x080098d5
 80098fc:	080098d5 	.word	0x080098d5
 8009900:	080098d5 	.word	0x080098d5
 8009904:	08009959 	.word	0x08009959
 8009908:	080098d5 	.word	0x080098d5
 800990c:	080098d5 	.word	0x080098d5
 8009910:	080098d5 	.word	0x080098d5
 8009914:	080098d5 	.word	0x080098d5
 8009918:	08009a67 	.word	0x08009a67
 800991c:	08009989 	.word	0x08009989
 8009920:	08009a49 	.word	0x08009a49
 8009924:	080098d5 	.word	0x080098d5
 8009928:	080098d5 	.word	0x080098d5
 800992c:	08009a89 	.word	0x08009a89
 8009930:	080098d5 	.word	0x080098d5
 8009934:	08009989 	.word	0x08009989
 8009938:	080098d5 	.word	0x080098d5
 800993c:	080098d5 	.word	0x080098d5
 8009940:	08009a51 	.word	0x08009a51
 8009944:	682b      	ldr	r3, [r5, #0]
 8009946:	1d1a      	adds	r2, r3, #4
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	602a      	str	r2, [r5, #0]
 800994c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009950:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009954:	2301      	movs	r3, #1
 8009956:	e0a4      	b.n	8009aa2 <_printf_i+0x1f6>
 8009958:	6820      	ldr	r0, [r4, #0]
 800995a:	6829      	ldr	r1, [r5, #0]
 800995c:	0606      	lsls	r6, r0, #24
 800995e:	f101 0304 	add.w	r3, r1, #4
 8009962:	d50a      	bpl.n	800997a <_printf_i+0xce>
 8009964:	680e      	ldr	r6, [r1, #0]
 8009966:	602b      	str	r3, [r5, #0]
 8009968:	2e00      	cmp	r6, #0
 800996a:	da03      	bge.n	8009974 <_printf_i+0xc8>
 800996c:	232d      	movs	r3, #45	; 0x2d
 800996e:	4276      	negs	r6, r6
 8009970:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009974:	230a      	movs	r3, #10
 8009976:	485e      	ldr	r0, [pc, #376]	; (8009af0 <_printf_i+0x244>)
 8009978:	e019      	b.n	80099ae <_printf_i+0x102>
 800997a:	680e      	ldr	r6, [r1, #0]
 800997c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009980:	602b      	str	r3, [r5, #0]
 8009982:	bf18      	it	ne
 8009984:	b236      	sxthne	r6, r6
 8009986:	e7ef      	b.n	8009968 <_printf_i+0xbc>
 8009988:	682b      	ldr	r3, [r5, #0]
 800998a:	6820      	ldr	r0, [r4, #0]
 800998c:	1d19      	adds	r1, r3, #4
 800998e:	6029      	str	r1, [r5, #0]
 8009990:	0601      	lsls	r1, r0, #24
 8009992:	d501      	bpl.n	8009998 <_printf_i+0xec>
 8009994:	681e      	ldr	r6, [r3, #0]
 8009996:	e002      	b.n	800999e <_printf_i+0xf2>
 8009998:	0646      	lsls	r6, r0, #25
 800999a:	d5fb      	bpl.n	8009994 <_printf_i+0xe8>
 800999c:	881e      	ldrh	r6, [r3, #0]
 800999e:	2f6f      	cmp	r7, #111	; 0x6f
 80099a0:	bf0c      	ite	eq
 80099a2:	2308      	moveq	r3, #8
 80099a4:	230a      	movne	r3, #10
 80099a6:	4852      	ldr	r0, [pc, #328]	; (8009af0 <_printf_i+0x244>)
 80099a8:	2100      	movs	r1, #0
 80099aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80099ae:	6865      	ldr	r5, [r4, #4]
 80099b0:	2d00      	cmp	r5, #0
 80099b2:	bfa8      	it	ge
 80099b4:	6821      	ldrge	r1, [r4, #0]
 80099b6:	60a5      	str	r5, [r4, #8]
 80099b8:	bfa4      	itt	ge
 80099ba:	f021 0104 	bicge.w	r1, r1, #4
 80099be:	6021      	strge	r1, [r4, #0]
 80099c0:	b90e      	cbnz	r6, 80099c6 <_printf_i+0x11a>
 80099c2:	2d00      	cmp	r5, #0
 80099c4:	d04d      	beq.n	8009a62 <_printf_i+0x1b6>
 80099c6:	4615      	mov	r5, r2
 80099c8:	fbb6 f1f3 	udiv	r1, r6, r3
 80099cc:	fb03 6711 	mls	r7, r3, r1, r6
 80099d0:	5dc7      	ldrb	r7, [r0, r7]
 80099d2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80099d6:	4637      	mov	r7, r6
 80099d8:	42bb      	cmp	r3, r7
 80099da:	460e      	mov	r6, r1
 80099dc:	d9f4      	bls.n	80099c8 <_printf_i+0x11c>
 80099de:	2b08      	cmp	r3, #8
 80099e0:	d10b      	bne.n	80099fa <_printf_i+0x14e>
 80099e2:	6823      	ldr	r3, [r4, #0]
 80099e4:	07de      	lsls	r6, r3, #31
 80099e6:	d508      	bpl.n	80099fa <_printf_i+0x14e>
 80099e8:	6923      	ldr	r3, [r4, #16]
 80099ea:	6861      	ldr	r1, [r4, #4]
 80099ec:	4299      	cmp	r1, r3
 80099ee:	bfde      	ittt	le
 80099f0:	2330      	movle	r3, #48	; 0x30
 80099f2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80099f6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80099fa:	1b52      	subs	r2, r2, r5
 80099fc:	6122      	str	r2, [r4, #16]
 80099fe:	464b      	mov	r3, r9
 8009a00:	4621      	mov	r1, r4
 8009a02:	4640      	mov	r0, r8
 8009a04:	f8cd a000 	str.w	sl, [sp]
 8009a08:	aa03      	add	r2, sp, #12
 8009a0a:	f7ff fedf 	bl	80097cc <_printf_common>
 8009a0e:	3001      	adds	r0, #1
 8009a10:	d14c      	bne.n	8009aac <_printf_i+0x200>
 8009a12:	f04f 30ff 	mov.w	r0, #4294967295
 8009a16:	b004      	add	sp, #16
 8009a18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a1c:	4834      	ldr	r0, [pc, #208]	; (8009af0 <_printf_i+0x244>)
 8009a1e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009a22:	6829      	ldr	r1, [r5, #0]
 8009a24:	6823      	ldr	r3, [r4, #0]
 8009a26:	f851 6b04 	ldr.w	r6, [r1], #4
 8009a2a:	6029      	str	r1, [r5, #0]
 8009a2c:	061d      	lsls	r5, r3, #24
 8009a2e:	d514      	bpl.n	8009a5a <_printf_i+0x1ae>
 8009a30:	07df      	lsls	r7, r3, #31
 8009a32:	bf44      	itt	mi
 8009a34:	f043 0320 	orrmi.w	r3, r3, #32
 8009a38:	6023      	strmi	r3, [r4, #0]
 8009a3a:	b91e      	cbnz	r6, 8009a44 <_printf_i+0x198>
 8009a3c:	6823      	ldr	r3, [r4, #0]
 8009a3e:	f023 0320 	bic.w	r3, r3, #32
 8009a42:	6023      	str	r3, [r4, #0]
 8009a44:	2310      	movs	r3, #16
 8009a46:	e7af      	b.n	80099a8 <_printf_i+0xfc>
 8009a48:	6823      	ldr	r3, [r4, #0]
 8009a4a:	f043 0320 	orr.w	r3, r3, #32
 8009a4e:	6023      	str	r3, [r4, #0]
 8009a50:	2378      	movs	r3, #120	; 0x78
 8009a52:	4828      	ldr	r0, [pc, #160]	; (8009af4 <_printf_i+0x248>)
 8009a54:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009a58:	e7e3      	b.n	8009a22 <_printf_i+0x176>
 8009a5a:	0659      	lsls	r1, r3, #25
 8009a5c:	bf48      	it	mi
 8009a5e:	b2b6      	uxthmi	r6, r6
 8009a60:	e7e6      	b.n	8009a30 <_printf_i+0x184>
 8009a62:	4615      	mov	r5, r2
 8009a64:	e7bb      	b.n	80099de <_printf_i+0x132>
 8009a66:	682b      	ldr	r3, [r5, #0]
 8009a68:	6826      	ldr	r6, [r4, #0]
 8009a6a:	1d18      	adds	r0, r3, #4
 8009a6c:	6961      	ldr	r1, [r4, #20]
 8009a6e:	6028      	str	r0, [r5, #0]
 8009a70:	0635      	lsls	r5, r6, #24
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	d501      	bpl.n	8009a7a <_printf_i+0x1ce>
 8009a76:	6019      	str	r1, [r3, #0]
 8009a78:	e002      	b.n	8009a80 <_printf_i+0x1d4>
 8009a7a:	0670      	lsls	r0, r6, #25
 8009a7c:	d5fb      	bpl.n	8009a76 <_printf_i+0x1ca>
 8009a7e:	8019      	strh	r1, [r3, #0]
 8009a80:	2300      	movs	r3, #0
 8009a82:	4615      	mov	r5, r2
 8009a84:	6123      	str	r3, [r4, #16]
 8009a86:	e7ba      	b.n	80099fe <_printf_i+0x152>
 8009a88:	682b      	ldr	r3, [r5, #0]
 8009a8a:	2100      	movs	r1, #0
 8009a8c:	1d1a      	adds	r2, r3, #4
 8009a8e:	602a      	str	r2, [r5, #0]
 8009a90:	681d      	ldr	r5, [r3, #0]
 8009a92:	6862      	ldr	r2, [r4, #4]
 8009a94:	4628      	mov	r0, r5
 8009a96:	f002 fc9d 	bl	800c3d4 <memchr>
 8009a9a:	b108      	cbz	r0, 8009aa0 <_printf_i+0x1f4>
 8009a9c:	1b40      	subs	r0, r0, r5
 8009a9e:	6060      	str	r0, [r4, #4]
 8009aa0:	6863      	ldr	r3, [r4, #4]
 8009aa2:	6123      	str	r3, [r4, #16]
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009aaa:	e7a8      	b.n	80099fe <_printf_i+0x152>
 8009aac:	462a      	mov	r2, r5
 8009aae:	4649      	mov	r1, r9
 8009ab0:	4640      	mov	r0, r8
 8009ab2:	6923      	ldr	r3, [r4, #16]
 8009ab4:	47d0      	blx	sl
 8009ab6:	3001      	adds	r0, #1
 8009ab8:	d0ab      	beq.n	8009a12 <_printf_i+0x166>
 8009aba:	6823      	ldr	r3, [r4, #0]
 8009abc:	079b      	lsls	r3, r3, #30
 8009abe:	d413      	bmi.n	8009ae8 <_printf_i+0x23c>
 8009ac0:	68e0      	ldr	r0, [r4, #12]
 8009ac2:	9b03      	ldr	r3, [sp, #12]
 8009ac4:	4298      	cmp	r0, r3
 8009ac6:	bfb8      	it	lt
 8009ac8:	4618      	movlt	r0, r3
 8009aca:	e7a4      	b.n	8009a16 <_printf_i+0x16a>
 8009acc:	2301      	movs	r3, #1
 8009ace:	4632      	mov	r2, r6
 8009ad0:	4649      	mov	r1, r9
 8009ad2:	4640      	mov	r0, r8
 8009ad4:	47d0      	blx	sl
 8009ad6:	3001      	adds	r0, #1
 8009ad8:	d09b      	beq.n	8009a12 <_printf_i+0x166>
 8009ada:	3501      	adds	r5, #1
 8009adc:	68e3      	ldr	r3, [r4, #12]
 8009ade:	9903      	ldr	r1, [sp, #12]
 8009ae0:	1a5b      	subs	r3, r3, r1
 8009ae2:	42ab      	cmp	r3, r5
 8009ae4:	dcf2      	bgt.n	8009acc <_printf_i+0x220>
 8009ae6:	e7eb      	b.n	8009ac0 <_printf_i+0x214>
 8009ae8:	2500      	movs	r5, #0
 8009aea:	f104 0619 	add.w	r6, r4, #25
 8009aee:	e7f5      	b.n	8009adc <_printf_i+0x230>
 8009af0:	0800dbee 	.word	0x0800dbee
 8009af4:	0800dbff 	.word	0x0800dbff

08009af8 <_scanf_float>:
 8009af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009afc:	b087      	sub	sp, #28
 8009afe:	9303      	str	r3, [sp, #12]
 8009b00:	688b      	ldr	r3, [r1, #8]
 8009b02:	4617      	mov	r7, r2
 8009b04:	1e5a      	subs	r2, r3, #1
 8009b06:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009b0a:	bf85      	ittet	hi
 8009b0c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009b10:	195b      	addhi	r3, r3, r5
 8009b12:	2300      	movls	r3, #0
 8009b14:	9302      	strhi	r3, [sp, #8]
 8009b16:	bf88      	it	hi
 8009b18:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009b1c:	468b      	mov	fp, r1
 8009b1e:	f04f 0500 	mov.w	r5, #0
 8009b22:	bf8c      	ite	hi
 8009b24:	608b      	strhi	r3, [r1, #8]
 8009b26:	9302      	strls	r3, [sp, #8]
 8009b28:	680b      	ldr	r3, [r1, #0]
 8009b2a:	4680      	mov	r8, r0
 8009b2c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009b30:	f84b 3b1c 	str.w	r3, [fp], #28
 8009b34:	460c      	mov	r4, r1
 8009b36:	465e      	mov	r6, fp
 8009b38:	46aa      	mov	sl, r5
 8009b3a:	46a9      	mov	r9, r5
 8009b3c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009b40:	9501      	str	r5, [sp, #4]
 8009b42:	68a2      	ldr	r2, [r4, #8]
 8009b44:	b152      	cbz	r2, 8009b5c <_scanf_float+0x64>
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	781b      	ldrb	r3, [r3, #0]
 8009b4a:	2b4e      	cmp	r3, #78	; 0x4e
 8009b4c:	d864      	bhi.n	8009c18 <_scanf_float+0x120>
 8009b4e:	2b40      	cmp	r3, #64	; 0x40
 8009b50:	d83c      	bhi.n	8009bcc <_scanf_float+0xd4>
 8009b52:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009b56:	b2c8      	uxtb	r0, r1
 8009b58:	280e      	cmp	r0, #14
 8009b5a:	d93a      	bls.n	8009bd2 <_scanf_float+0xda>
 8009b5c:	f1b9 0f00 	cmp.w	r9, #0
 8009b60:	d003      	beq.n	8009b6a <_scanf_float+0x72>
 8009b62:	6823      	ldr	r3, [r4, #0]
 8009b64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b68:	6023      	str	r3, [r4, #0]
 8009b6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009b6e:	f1ba 0f01 	cmp.w	sl, #1
 8009b72:	f200 8113 	bhi.w	8009d9c <_scanf_float+0x2a4>
 8009b76:	455e      	cmp	r6, fp
 8009b78:	f200 8105 	bhi.w	8009d86 <_scanf_float+0x28e>
 8009b7c:	2501      	movs	r5, #1
 8009b7e:	4628      	mov	r0, r5
 8009b80:	b007      	add	sp, #28
 8009b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b86:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009b8a:	2a0d      	cmp	r2, #13
 8009b8c:	d8e6      	bhi.n	8009b5c <_scanf_float+0x64>
 8009b8e:	a101      	add	r1, pc, #4	; (adr r1, 8009b94 <_scanf_float+0x9c>)
 8009b90:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009b94:	08009cd3 	.word	0x08009cd3
 8009b98:	08009b5d 	.word	0x08009b5d
 8009b9c:	08009b5d 	.word	0x08009b5d
 8009ba0:	08009b5d 	.word	0x08009b5d
 8009ba4:	08009d33 	.word	0x08009d33
 8009ba8:	08009d0b 	.word	0x08009d0b
 8009bac:	08009b5d 	.word	0x08009b5d
 8009bb0:	08009b5d 	.word	0x08009b5d
 8009bb4:	08009ce1 	.word	0x08009ce1
 8009bb8:	08009b5d 	.word	0x08009b5d
 8009bbc:	08009b5d 	.word	0x08009b5d
 8009bc0:	08009b5d 	.word	0x08009b5d
 8009bc4:	08009b5d 	.word	0x08009b5d
 8009bc8:	08009c99 	.word	0x08009c99
 8009bcc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009bd0:	e7db      	b.n	8009b8a <_scanf_float+0x92>
 8009bd2:	290e      	cmp	r1, #14
 8009bd4:	d8c2      	bhi.n	8009b5c <_scanf_float+0x64>
 8009bd6:	a001      	add	r0, pc, #4	; (adr r0, 8009bdc <_scanf_float+0xe4>)
 8009bd8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009bdc:	08009c8b 	.word	0x08009c8b
 8009be0:	08009b5d 	.word	0x08009b5d
 8009be4:	08009c8b 	.word	0x08009c8b
 8009be8:	08009d1f 	.word	0x08009d1f
 8009bec:	08009b5d 	.word	0x08009b5d
 8009bf0:	08009c39 	.word	0x08009c39
 8009bf4:	08009c75 	.word	0x08009c75
 8009bf8:	08009c75 	.word	0x08009c75
 8009bfc:	08009c75 	.word	0x08009c75
 8009c00:	08009c75 	.word	0x08009c75
 8009c04:	08009c75 	.word	0x08009c75
 8009c08:	08009c75 	.word	0x08009c75
 8009c0c:	08009c75 	.word	0x08009c75
 8009c10:	08009c75 	.word	0x08009c75
 8009c14:	08009c75 	.word	0x08009c75
 8009c18:	2b6e      	cmp	r3, #110	; 0x6e
 8009c1a:	d809      	bhi.n	8009c30 <_scanf_float+0x138>
 8009c1c:	2b60      	cmp	r3, #96	; 0x60
 8009c1e:	d8b2      	bhi.n	8009b86 <_scanf_float+0x8e>
 8009c20:	2b54      	cmp	r3, #84	; 0x54
 8009c22:	d077      	beq.n	8009d14 <_scanf_float+0x21c>
 8009c24:	2b59      	cmp	r3, #89	; 0x59
 8009c26:	d199      	bne.n	8009b5c <_scanf_float+0x64>
 8009c28:	2d07      	cmp	r5, #7
 8009c2a:	d197      	bne.n	8009b5c <_scanf_float+0x64>
 8009c2c:	2508      	movs	r5, #8
 8009c2e:	e029      	b.n	8009c84 <_scanf_float+0x18c>
 8009c30:	2b74      	cmp	r3, #116	; 0x74
 8009c32:	d06f      	beq.n	8009d14 <_scanf_float+0x21c>
 8009c34:	2b79      	cmp	r3, #121	; 0x79
 8009c36:	e7f6      	b.n	8009c26 <_scanf_float+0x12e>
 8009c38:	6821      	ldr	r1, [r4, #0]
 8009c3a:	05c8      	lsls	r0, r1, #23
 8009c3c:	d51a      	bpl.n	8009c74 <_scanf_float+0x17c>
 8009c3e:	9b02      	ldr	r3, [sp, #8]
 8009c40:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009c44:	6021      	str	r1, [r4, #0]
 8009c46:	f109 0901 	add.w	r9, r9, #1
 8009c4a:	b11b      	cbz	r3, 8009c54 <_scanf_float+0x15c>
 8009c4c:	3b01      	subs	r3, #1
 8009c4e:	3201      	adds	r2, #1
 8009c50:	9302      	str	r3, [sp, #8]
 8009c52:	60a2      	str	r2, [r4, #8]
 8009c54:	68a3      	ldr	r3, [r4, #8]
 8009c56:	3b01      	subs	r3, #1
 8009c58:	60a3      	str	r3, [r4, #8]
 8009c5a:	6923      	ldr	r3, [r4, #16]
 8009c5c:	3301      	adds	r3, #1
 8009c5e:	6123      	str	r3, [r4, #16]
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	3b01      	subs	r3, #1
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	607b      	str	r3, [r7, #4]
 8009c68:	f340 8084 	ble.w	8009d74 <_scanf_float+0x27c>
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	3301      	adds	r3, #1
 8009c70:	603b      	str	r3, [r7, #0]
 8009c72:	e766      	b.n	8009b42 <_scanf_float+0x4a>
 8009c74:	eb1a 0f05 	cmn.w	sl, r5
 8009c78:	f47f af70 	bne.w	8009b5c <_scanf_float+0x64>
 8009c7c:	6822      	ldr	r2, [r4, #0]
 8009c7e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009c82:	6022      	str	r2, [r4, #0]
 8009c84:	f806 3b01 	strb.w	r3, [r6], #1
 8009c88:	e7e4      	b.n	8009c54 <_scanf_float+0x15c>
 8009c8a:	6822      	ldr	r2, [r4, #0]
 8009c8c:	0610      	lsls	r0, r2, #24
 8009c8e:	f57f af65 	bpl.w	8009b5c <_scanf_float+0x64>
 8009c92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009c96:	e7f4      	b.n	8009c82 <_scanf_float+0x18a>
 8009c98:	f1ba 0f00 	cmp.w	sl, #0
 8009c9c:	d10e      	bne.n	8009cbc <_scanf_float+0x1c4>
 8009c9e:	f1b9 0f00 	cmp.w	r9, #0
 8009ca2:	d10e      	bne.n	8009cc2 <_scanf_float+0x1ca>
 8009ca4:	6822      	ldr	r2, [r4, #0]
 8009ca6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009caa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009cae:	d108      	bne.n	8009cc2 <_scanf_float+0x1ca>
 8009cb0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009cb4:	f04f 0a01 	mov.w	sl, #1
 8009cb8:	6022      	str	r2, [r4, #0]
 8009cba:	e7e3      	b.n	8009c84 <_scanf_float+0x18c>
 8009cbc:	f1ba 0f02 	cmp.w	sl, #2
 8009cc0:	d055      	beq.n	8009d6e <_scanf_float+0x276>
 8009cc2:	2d01      	cmp	r5, #1
 8009cc4:	d002      	beq.n	8009ccc <_scanf_float+0x1d4>
 8009cc6:	2d04      	cmp	r5, #4
 8009cc8:	f47f af48 	bne.w	8009b5c <_scanf_float+0x64>
 8009ccc:	3501      	adds	r5, #1
 8009cce:	b2ed      	uxtb	r5, r5
 8009cd0:	e7d8      	b.n	8009c84 <_scanf_float+0x18c>
 8009cd2:	f1ba 0f01 	cmp.w	sl, #1
 8009cd6:	f47f af41 	bne.w	8009b5c <_scanf_float+0x64>
 8009cda:	f04f 0a02 	mov.w	sl, #2
 8009cde:	e7d1      	b.n	8009c84 <_scanf_float+0x18c>
 8009ce0:	b97d      	cbnz	r5, 8009d02 <_scanf_float+0x20a>
 8009ce2:	f1b9 0f00 	cmp.w	r9, #0
 8009ce6:	f47f af3c 	bne.w	8009b62 <_scanf_float+0x6a>
 8009cea:	6822      	ldr	r2, [r4, #0]
 8009cec:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009cf0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009cf4:	f47f af39 	bne.w	8009b6a <_scanf_float+0x72>
 8009cf8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009cfc:	2501      	movs	r5, #1
 8009cfe:	6022      	str	r2, [r4, #0]
 8009d00:	e7c0      	b.n	8009c84 <_scanf_float+0x18c>
 8009d02:	2d03      	cmp	r5, #3
 8009d04:	d0e2      	beq.n	8009ccc <_scanf_float+0x1d4>
 8009d06:	2d05      	cmp	r5, #5
 8009d08:	e7de      	b.n	8009cc8 <_scanf_float+0x1d0>
 8009d0a:	2d02      	cmp	r5, #2
 8009d0c:	f47f af26 	bne.w	8009b5c <_scanf_float+0x64>
 8009d10:	2503      	movs	r5, #3
 8009d12:	e7b7      	b.n	8009c84 <_scanf_float+0x18c>
 8009d14:	2d06      	cmp	r5, #6
 8009d16:	f47f af21 	bne.w	8009b5c <_scanf_float+0x64>
 8009d1a:	2507      	movs	r5, #7
 8009d1c:	e7b2      	b.n	8009c84 <_scanf_float+0x18c>
 8009d1e:	6822      	ldr	r2, [r4, #0]
 8009d20:	0591      	lsls	r1, r2, #22
 8009d22:	f57f af1b 	bpl.w	8009b5c <_scanf_float+0x64>
 8009d26:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009d2a:	6022      	str	r2, [r4, #0]
 8009d2c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009d30:	e7a8      	b.n	8009c84 <_scanf_float+0x18c>
 8009d32:	6822      	ldr	r2, [r4, #0]
 8009d34:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009d38:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009d3c:	d006      	beq.n	8009d4c <_scanf_float+0x254>
 8009d3e:	0550      	lsls	r0, r2, #21
 8009d40:	f57f af0c 	bpl.w	8009b5c <_scanf_float+0x64>
 8009d44:	f1b9 0f00 	cmp.w	r9, #0
 8009d48:	f43f af0f 	beq.w	8009b6a <_scanf_float+0x72>
 8009d4c:	0591      	lsls	r1, r2, #22
 8009d4e:	bf58      	it	pl
 8009d50:	9901      	ldrpl	r1, [sp, #4]
 8009d52:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009d56:	bf58      	it	pl
 8009d58:	eba9 0101 	subpl.w	r1, r9, r1
 8009d5c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009d60:	f04f 0900 	mov.w	r9, #0
 8009d64:	bf58      	it	pl
 8009d66:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009d6a:	6022      	str	r2, [r4, #0]
 8009d6c:	e78a      	b.n	8009c84 <_scanf_float+0x18c>
 8009d6e:	f04f 0a03 	mov.w	sl, #3
 8009d72:	e787      	b.n	8009c84 <_scanf_float+0x18c>
 8009d74:	4639      	mov	r1, r7
 8009d76:	4640      	mov	r0, r8
 8009d78:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009d7c:	4798      	blx	r3
 8009d7e:	2800      	cmp	r0, #0
 8009d80:	f43f aedf 	beq.w	8009b42 <_scanf_float+0x4a>
 8009d84:	e6ea      	b.n	8009b5c <_scanf_float+0x64>
 8009d86:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009d8a:	463a      	mov	r2, r7
 8009d8c:	4640      	mov	r0, r8
 8009d8e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009d92:	4798      	blx	r3
 8009d94:	6923      	ldr	r3, [r4, #16]
 8009d96:	3b01      	subs	r3, #1
 8009d98:	6123      	str	r3, [r4, #16]
 8009d9a:	e6ec      	b.n	8009b76 <_scanf_float+0x7e>
 8009d9c:	1e6b      	subs	r3, r5, #1
 8009d9e:	2b06      	cmp	r3, #6
 8009da0:	d825      	bhi.n	8009dee <_scanf_float+0x2f6>
 8009da2:	2d02      	cmp	r5, #2
 8009da4:	d836      	bhi.n	8009e14 <_scanf_float+0x31c>
 8009da6:	455e      	cmp	r6, fp
 8009da8:	f67f aee8 	bls.w	8009b7c <_scanf_float+0x84>
 8009dac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009db0:	463a      	mov	r2, r7
 8009db2:	4640      	mov	r0, r8
 8009db4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009db8:	4798      	blx	r3
 8009dba:	6923      	ldr	r3, [r4, #16]
 8009dbc:	3b01      	subs	r3, #1
 8009dbe:	6123      	str	r3, [r4, #16]
 8009dc0:	e7f1      	b.n	8009da6 <_scanf_float+0x2ae>
 8009dc2:	9802      	ldr	r0, [sp, #8]
 8009dc4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009dc8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009dcc:	463a      	mov	r2, r7
 8009dce:	9002      	str	r0, [sp, #8]
 8009dd0:	4640      	mov	r0, r8
 8009dd2:	4798      	blx	r3
 8009dd4:	6923      	ldr	r3, [r4, #16]
 8009dd6:	3b01      	subs	r3, #1
 8009dd8:	6123      	str	r3, [r4, #16]
 8009dda:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009dde:	fa5f fa8a 	uxtb.w	sl, sl
 8009de2:	f1ba 0f02 	cmp.w	sl, #2
 8009de6:	d1ec      	bne.n	8009dc2 <_scanf_float+0x2ca>
 8009de8:	3d03      	subs	r5, #3
 8009dea:	b2ed      	uxtb	r5, r5
 8009dec:	1b76      	subs	r6, r6, r5
 8009dee:	6823      	ldr	r3, [r4, #0]
 8009df0:	05da      	lsls	r2, r3, #23
 8009df2:	d52f      	bpl.n	8009e54 <_scanf_float+0x35c>
 8009df4:	055b      	lsls	r3, r3, #21
 8009df6:	d510      	bpl.n	8009e1a <_scanf_float+0x322>
 8009df8:	455e      	cmp	r6, fp
 8009dfa:	f67f aebf 	bls.w	8009b7c <_scanf_float+0x84>
 8009dfe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009e02:	463a      	mov	r2, r7
 8009e04:	4640      	mov	r0, r8
 8009e06:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009e0a:	4798      	blx	r3
 8009e0c:	6923      	ldr	r3, [r4, #16]
 8009e0e:	3b01      	subs	r3, #1
 8009e10:	6123      	str	r3, [r4, #16]
 8009e12:	e7f1      	b.n	8009df8 <_scanf_float+0x300>
 8009e14:	46aa      	mov	sl, r5
 8009e16:	9602      	str	r6, [sp, #8]
 8009e18:	e7df      	b.n	8009dda <_scanf_float+0x2e2>
 8009e1a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009e1e:	6923      	ldr	r3, [r4, #16]
 8009e20:	2965      	cmp	r1, #101	; 0x65
 8009e22:	f103 33ff 	add.w	r3, r3, #4294967295
 8009e26:	f106 35ff 	add.w	r5, r6, #4294967295
 8009e2a:	6123      	str	r3, [r4, #16]
 8009e2c:	d00c      	beq.n	8009e48 <_scanf_float+0x350>
 8009e2e:	2945      	cmp	r1, #69	; 0x45
 8009e30:	d00a      	beq.n	8009e48 <_scanf_float+0x350>
 8009e32:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009e36:	463a      	mov	r2, r7
 8009e38:	4640      	mov	r0, r8
 8009e3a:	4798      	blx	r3
 8009e3c:	6923      	ldr	r3, [r4, #16]
 8009e3e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009e42:	3b01      	subs	r3, #1
 8009e44:	1eb5      	subs	r5, r6, #2
 8009e46:	6123      	str	r3, [r4, #16]
 8009e48:	463a      	mov	r2, r7
 8009e4a:	4640      	mov	r0, r8
 8009e4c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009e50:	4798      	blx	r3
 8009e52:	462e      	mov	r6, r5
 8009e54:	6825      	ldr	r5, [r4, #0]
 8009e56:	f015 0510 	ands.w	r5, r5, #16
 8009e5a:	d155      	bne.n	8009f08 <_scanf_float+0x410>
 8009e5c:	7035      	strb	r5, [r6, #0]
 8009e5e:	6823      	ldr	r3, [r4, #0]
 8009e60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009e64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e68:	d11b      	bne.n	8009ea2 <_scanf_float+0x3aa>
 8009e6a:	9b01      	ldr	r3, [sp, #4]
 8009e6c:	454b      	cmp	r3, r9
 8009e6e:	eba3 0209 	sub.w	r2, r3, r9
 8009e72:	d123      	bne.n	8009ebc <_scanf_float+0x3c4>
 8009e74:	2200      	movs	r2, #0
 8009e76:	4659      	mov	r1, fp
 8009e78:	4640      	mov	r0, r8
 8009e7a:	f000 ff35 	bl	800ace8 <_strtod_r>
 8009e7e:	6822      	ldr	r2, [r4, #0]
 8009e80:	9b03      	ldr	r3, [sp, #12]
 8009e82:	f012 0f02 	tst.w	r2, #2
 8009e86:	4606      	mov	r6, r0
 8009e88:	460f      	mov	r7, r1
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	d021      	beq.n	8009ed2 <_scanf_float+0x3da>
 8009e8e:	1d1a      	adds	r2, r3, #4
 8009e90:	9903      	ldr	r1, [sp, #12]
 8009e92:	600a      	str	r2, [r1, #0]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	e9c3 6700 	strd	r6, r7, [r3]
 8009e9a:	68e3      	ldr	r3, [r4, #12]
 8009e9c:	3301      	adds	r3, #1
 8009e9e:	60e3      	str	r3, [r4, #12]
 8009ea0:	e66d      	b.n	8009b7e <_scanf_float+0x86>
 8009ea2:	9b04      	ldr	r3, [sp, #16]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d0e5      	beq.n	8009e74 <_scanf_float+0x37c>
 8009ea8:	9905      	ldr	r1, [sp, #20]
 8009eaa:	230a      	movs	r3, #10
 8009eac:	462a      	mov	r2, r5
 8009eae:	4640      	mov	r0, r8
 8009eb0:	3101      	adds	r1, #1
 8009eb2:	f000 ff9b 	bl	800adec <_strtol_r>
 8009eb6:	9b04      	ldr	r3, [sp, #16]
 8009eb8:	9e05      	ldr	r6, [sp, #20]
 8009eba:	1ac2      	subs	r2, r0, r3
 8009ebc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009ec0:	429e      	cmp	r6, r3
 8009ec2:	bf28      	it	cs
 8009ec4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009ec8:	4630      	mov	r0, r6
 8009eca:	4910      	ldr	r1, [pc, #64]	; (8009f0c <_scanf_float+0x414>)
 8009ecc:	f000 f8a0 	bl	800a010 <siprintf>
 8009ed0:	e7d0      	b.n	8009e74 <_scanf_float+0x37c>
 8009ed2:	f012 0f04 	tst.w	r2, #4
 8009ed6:	f103 0204 	add.w	r2, r3, #4
 8009eda:	d1d9      	bne.n	8009e90 <_scanf_float+0x398>
 8009edc:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8009ee0:	f8cc 2000 	str.w	r2, [ip]
 8009ee4:	f8d3 8000 	ldr.w	r8, [r3]
 8009ee8:	4602      	mov	r2, r0
 8009eea:	460b      	mov	r3, r1
 8009eec:	f7f6 fd8e 	bl	8000a0c <__aeabi_dcmpun>
 8009ef0:	b128      	cbz	r0, 8009efe <_scanf_float+0x406>
 8009ef2:	4807      	ldr	r0, [pc, #28]	; (8009f10 <_scanf_float+0x418>)
 8009ef4:	f000 f888 	bl	800a008 <nanf>
 8009ef8:	f8c8 0000 	str.w	r0, [r8]
 8009efc:	e7cd      	b.n	8009e9a <_scanf_float+0x3a2>
 8009efe:	4630      	mov	r0, r6
 8009f00:	4639      	mov	r1, r7
 8009f02:	f7f6 fde1 	bl	8000ac8 <__aeabi_d2f>
 8009f06:	e7f7      	b.n	8009ef8 <_scanf_float+0x400>
 8009f08:	2500      	movs	r5, #0
 8009f0a:	e638      	b.n	8009b7e <_scanf_float+0x86>
 8009f0c:	0800dc10 	.word	0x0800dc10
 8009f10:	0800e018 	.word	0x0800e018

08009f14 <cleanup_glue>:
 8009f14:	b538      	push	{r3, r4, r5, lr}
 8009f16:	460c      	mov	r4, r1
 8009f18:	6809      	ldr	r1, [r1, #0]
 8009f1a:	4605      	mov	r5, r0
 8009f1c:	b109      	cbz	r1, 8009f22 <cleanup_glue+0xe>
 8009f1e:	f7ff fff9 	bl	8009f14 <cleanup_glue>
 8009f22:	4621      	mov	r1, r4
 8009f24:	4628      	mov	r0, r5
 8009f26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f2a:	f002 bf39 	b.w	800cda0 <_free_r>
	...

08009f30 <_reclaim_reent>:
 8009f30:	4b2c      	ldr	r3, [pc, #176]	; (8009fe4 <_reclaim_reent+0xb4>)
 8009f32:	b570      	push	{r4, r5, r6, lr}
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	4604      	mov	r4, r0
 8009f38:	4283      	cmp	r3, r0
 8009f3a:	d051      	beq.n	8009fe0 <_reclaim_reent+0xb0>
 8009f3c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009f3e:	b143      	cbz	r3, 8009f52 <_reclaim_reent+0x22>
 8009f40:	68db      	ldr	r3, [r3, #12]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d14a      	bne.n	8009fdc <_reclaim_reent+0xac>
 8009f46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f48:	6819      	ldr	r1, [r3, #0]
 8009f4a:	b111      	cbz	r1, 8009f52 <_reclaim_reent+0x22>
 8009f4c:	4620      	mov	r0, r4
 8009f4e:	f002 ff27 	bl	800cda0 <_free_r>
 8009f52:	6961      	ldr	r1, [r4, #20]
 8009f54:	b111      	cbz	r1, 8009f5c <_reclaim_reent+0x2c>
 8009f56:	4620      	mov	r0, r4
 8009f58:	f002 ff22 	bl	800cda0 <_free_r>
 8009f5c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009f5e:	b111      	cbz	r1, 8009f66 <_reclaim_reent+0x36>
 8009f60:	4620      	mov	r0, r4
 8009f62:	f002 ff1d 	bl	800cda0 <_free_r>
 8009f66:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009f68:	b111      	cbz	r1, 8009f70 <_reclaim_reent+0x40>
 8009f6a:	4620      	mov	r0, r4
 8009f6c:	f002 ff18 	bl	800cda0 <_free_r>
 8009f70:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009f72:	b111      	cbz	r1, 8009f7a <_reclaim_reent+0x4a>
 8009f74:	4620      	mov	r0, r4
 8009f76:	f002 ff13 	bl	800cda0 <_free_r>
 8009f7a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009f7c:	b111      	cbz	r1, 8009f84 <_reclaim_reent+0x54>
 8009f7e:	4620      	mov	r0, r4
 8009f80:	f002 ff0e 	bl	800cda0 <_free_r>
 8009f84:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009f86:	b111      	cbz	r1, 8009f8e <_reclaim_reent+0x5e>
 8009f88:	4620      	mov	r0, r4
 8009f8a:	f002 ff09 	bl	800cda0 <_free_r>
 8009f8e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009f90:	b111      	cbz	r1, 8009f98 <_reclaim_reent+0x68>
 8009f92:	4620      	mov	r0, r4
 8009f94:	f002 ff04 	bl	800cda0 <_free_r>
 8009f98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f9a:	b111      	cbz	r1, 8009fa2 <_reclaim_reent+0x72>
 8009f9c:	4620      	mov	r0, r4
 8009f9e:	f002 feff 	bl	800cda0 <_free_r>
 8009fa2:	69a3      	ldr	r3, [r4, #24]
 8009fa4:	b1e3      	cbz	r3, 8009fe0 <_reclaim_reent+0xb0>
 8009fa6:	4620      	mov	r0, r4
 8009fa8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009faa:	4798      	blx	r3
 8009fac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009fae:	b1b9      	cbz	r1, 8009fe0 <_reclaim_reent+0xb0>
 8009fb0:	4620      	mov	r0, r4
 8009fb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009fb6:	f7ff bfad 	b.w	8009f14 <cleanup_glue>
 8009fba:	5949      	ldr	r1, [r1, r5]
 8009fbc:	b941      	cbnz	r1, 8009fd0 <_reclaim_reent+0xa0>
 8009fbe:	3504      	adds	r5, #4
 8009fc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009fc2:	2d80      	cmp	r5, #128	; 0x80
 8009fc4:	68d9      	ldr	r1, [r3, #12]
 8009fc6:	d1f8      	bne.n	8009fba <_reclaim_reent+0x8a>
 8009fc8:	4620      	mov	r0, r4
 8009fca:	f002 fee9 	bl	800cda0 <_free_r>
 8009fce:	e7ba      	b.n	8009f46 <_reclaim_reent+0x16>
 8009fd0:	680e      	ldr	r6, [r1, #0]
 8009fd2:	4620      	mov	r0, r4
 8009fd4:	f002 fee4 	bl	800cda0 <_free_r>
 8009fd8:	4631      	mov	r1, r6
 8009fda:	e7ef      	b.n	8009fbc <_reclaim_reent+0x8c>
 8009fdc:	2500      	movs	r5, #0
 8009fde:	e7ef      	b.n	8009fc0 <_reclaim_reent+0x90>
 8009fe0:	bd70      	pop	{r4, r5, r6, pc}
 8009fe2:	bf00      	nop
 8009fe4:	20000010 	.word	0x20000010

08009fe8 <_sbrk_r>:
 8009fe8:	b538      	push	{r3, r4, r5, lr}
 8009fea:	2300      	movs	r3, #0
 8009fec:	4d05      	ldr	r5, [pc, #20]	; (800a004 <_sbrk_r+0x1c>)
 8009fee:	4604      	mov	r4, r0
 8009ff0:	4608      	mov	r0, r1
 8009ff2:	602b      	str	r3, [r5, #0]
 8009ff4:	f7f7 fdb8 	bl	8001b68 <_sbrk>
 8009ff8:	1c43      	adds	r3, r0, #1
 8009ffa:	d102      	bne.n	800a002 <_sbrk_r+0x1a>
 8009ffc:	682b      	ldr	r3, [r5, #0]
 8009ffe:	b103      	cbz	r3, 800a002 <_sbrk_r+0x1a>
 800a000:	6023      	str	r3, [r4, #0]
 800a002:	bd38      	pop	{r3, r4, r5, pc}
 800a004:	2000326c 	.word	0x2000326c

0800a008 <nanf>:
 800a008:	4800      	ldr	r0, [pc, #0]	; (800a00c <nanf+0x4>)
 800a00a:	4770      	bx	lr
 800a00c:	7fc00000 	.word	0x7fc00000

0800a010 <siprintf>:
 800a010:	b40e      	push	{r1, r2, r3}
 800a012:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a016:	b500      	push	{lr}
 800a018:	b09c      	sub	sp, #112	; 0x70
 800a01a:	ab1d      	add	r3, sp, #116	; 0x74
 800a01c:	9002      	str	r0, [sp, #8]
 800a01e:	9006      	str	r0, [sp, #24]
 800a020:	9107      	str	r1, [sp, #28]
 800a022:	9104      	str	r1, [sp, #16]
 800a024:	4808      	ldr	r0, [pc, #32]	; (800a048 <siprintf+0x38>)
 800a026:	4909      	ldr	r1, [pc, #36]	; (800a04c <siprintf+0x3c>)
 800a028:	f853 2b04 	ldr.w	r2, [r3], #4
 800a02c:	9105      	str	r1, [sp, #20]
 800a02e:	6800      	ldr	r0, [r0, #0]
 800a030:	a902      	add	r1, sp, #8
 800a032:	9301      	str	r3, [sp, #4]
 800a034:	f002 ff58 	bl	800cee8 <_svfiprintf_r>
 800a038:	2200      	movs	r2, #0
 800a03a:	9b02      	ldr	r3, [sp, #8]
 800a03c:	701a      	strb	r2, [r3, #0]
 800a03e:	b01c      	add	sp, #112	; 0x70
 800a040:	f85d eb04 	ldr.w	lr, [sp], #4
 800a044:	b003      	add	sp, #12
 800a046:	4770      	bx	lr
 800a048:	20000010 	.word	0x20000010
 800a04c:	ffff0208 	.word	0xffff0208

0800a050 <__sread>:
 800a050:	b510      	push	{r4, lr}
 800a052:	460c      	mov	r4, r1
 800a054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a058:	f003 f846 	bl	800d0e8 <_read_r>
 800a05c:	2800      	cmp	r0, #0
 800a05e:	bfab      	itete	ge
 800a060:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a062:	89a3      	ldrhlt	r3, [r4, #12]
 800a064:	181b      	addge	r3, r3, r0
 800a066:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a06a:	bfac      	ite	ge
 800a06c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a06e:	81a3      	strhlt	r3, [r4, #12]
 800a070:	bd10      	pop	{r4, pc}

0800a072 <__swrite>:
 800a072:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a076:	461f      	mov	r7, r3
 800a078:	898b      	ldrh	r3, [r1, #12]
 800a07a:	4605      	mov	r5, r0
 800a07c:	05db      	lsls	r3, r3, #23
 800a07e:	460c      	mov	r4, r1
 800a080:	4616      	mov	r6, r2
 800a082:	d505      	bpl.n	800a090 <__swrite+0x1e>
 800a084:	2302      	movs	r3, #2
 800a086:	2200      	movs	r2, #0
 800a088:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a08c:	f002 f976 	bl	800c37c <_lseek_r>
 800a090:	89a3      	ldrh	r3, [r4, #12]
 800a092:	4632      	mov	r2, r6
 800a094:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a098:	81a3      	strh	r3, [r4, #12]
 800a09a:	4628      	mov	r0, r5
 800a09c:	463b      	mov	r3, r7
 800a09e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a0a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a0a6:	f000 bea3 	b.w	800adf0 <_write_r>

0800a0aa <__sseek>:
 800a0aa:	b510      	push	{r4, lr}
 800a0ac:	460c      	mov	r4, r1
 800a0ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0b2:	f002 f963 	bl	800c37c <_lseek_r>
 800a0b6:	1c43      	adds	r3, r0, #1
 800a0b8:	89a3      	ldrh	r3, [r4, #12]
 800a0ba:	bf15      	itete	ne
 800a0bc:	6560      	strne	r0, [r4, #84]	; 0x54
 800a0be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a0c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a0c6:	81a3      	strheq	r3, [r4, #12]
 800a0c8:	bf18      	it	ne
 800a0ca:	81a3      	strhne	r3, [r4, #12]
 800a0cc:	bd10      	pop	{r4, pc}

0800a0ce <__sclose>:
 800a0ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0d2:	f000 be9f 	b.w	800ae14 <_close_r>

0800a0d6 <sulp>:
 800a0d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0da:	460f      	mov	r7, r1
 800a0dc:	4690      	mov	r8, r2
 800a0de:	f002 fd03 	bl	800cae8 <__ulp>
 800a0e2:	4604      	mov	r4, r0
 800a0e4:	460d      	mov	r5, r1
 800a0e6:	f1b8 0f00 	cmp.w	r8, #0
 800a0ea:	d011      	beq.n	800a110 <sulp+0x3a>
 800a0ec:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800a0f0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	dd0b      	ble.n	800a110 <sulp+0x3a>
 800a0f8:	2400      	movs	r4, #0
 800a0fa:	051b      	lsls	r3, r3, #20
 800a0fc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a100:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a104:	4622      	mov	r2, r4
 800a106:	462b      	mov	r3, r5
 800a108:	f7f6 f9e6 	bl	80004d8 <__aeabi_dmul>
 800a10c:	4604      	mov	r4, r0
 800a10e:	460d      	mov	r5, r1
 800a110:	4620      	mov	r0, r4
 800a112:	4629      	mov	r1, r5
 800a114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a118 <_strtod_l>:
 800a118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a11c:	469b      	mov	fp, r3
 800a11e:	2300      	movs	r3, #0
 800a120:	b09f      	sub	sp, #124	; 0x7c
 800a122:	931a      	str	r3, [sp, #104]	; 0x68
 800a124:	4b9e      	ldr	r3, [pc, #632]	; (800a3a0 <_strtod_l+0x288>)
 800a126:	4682      	mov	sl, r0
 800a128:	681f      	ldr	r7, [r3, #0]
 800a12a:	460e      	mov	r6, r1
 800a12c:	4638      	mov	r0, r7
 800a12e:	9215      	str	r2, [sp, #84]	; 0x54
 800a130:	f7f6 f80e 	bl	8000150 <strlen>
 800a134:	f04f 0800 	mov.w	r8, #0
 800a138:	4604      	mov	r4, r0
 800a13a:	f04f 0900 	mov.w	r9, #0
 800a13e:	9619      	str	r6, [sp, #100]	; 0x64
 800a140:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a142:	781a      	ldrb	r2, [r3, #0]
 800a144:	2a2b      	cmp	r2, #43	; 0x2b
 800a146:	d04c      	beq.n	800a1e2 <_strtod_l+0xca>
 800a148:	d83a      	bhi.n	800a1c0 <_strtod_l+0xa8>
 800a14a:	2a0d      	cmp	r2, #13
 800a14c:	d833      	bhi.n	800a1b6 <_strtod_l+0x9e>
 800a14e:	2a08      	cmp	r2, #8
 800a150:	d833      	bhi.n	800a1ba <_strtod_l+0xa2>
 800a152:	2a00      	cmp	r2, #0
 800a154:	d03d      	beq.n	800a1d2 <_strtod_l+0xba>
 800a156:	2300      	movs	r3, #0
 800a158:	930a      	str	r3, [sp, #40]	; 0x28
 800a15a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800a15c:	782b      	ldrb	r3, [r5, #0]
 800a15e:	2b30      	cmp	r3, #48	; 0x30
 800a160:	f040 80aa 	bne.w	800a2b8 <_strtod_l+0x1a0>
 800a164:	786b      	ldrb	r3, [r5, #1]
 800a166:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a16a:	2b58      	cmp	r3, #88	; 0x58
 800a16c:	d166      	bne.n	800a23c <_strtod_l+0x124>
 800a16e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a170:	4650      	mov	r0, sl
 800a172:	9301      	str	r3, [sp, #4]
 800a174:	ab1a      	add	r3, sp, #104	; 0x68
 800a176:	9300      	str	r3, [sp, #0]
 800a178:	4a8a      	ldr	r2, [pc, #552]	; (800a3a4 <_strtod_l+0x28c>)
 800a17a:	f8cd b008 	str.w	fp, [sp, #8]
 800a17e:	ab1b      	add	r3, sp, #108	; 0x6c
 800a180:	a919      	add	r1, sp, #100	; 0x64
 800a182:	f001 fdf9 	bl	800bd78 <__gethex>
 800a186:	f010 0607 	ands.w	r6, r0, #7
 800a18a:	4604      	mov	r4, r0
 800a18c:	d005      	beq.n	800a19a <_strtod_l+0x82>
 800a18e:	2e06      	cmp	r6, #6
 800a190:	d129      	bne.n	800a1e6 <_strtod_l+0xce>
 800a192:	2300      	movs	r3, #0
 800a194:	3501      	adds	r5, #1
 800a196:	9519      	str	r5, [sp, #100]	; 0x64
 800a198:	930a      	str	r3, [sp, #40]	; 0x28
 800a19a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	f040 858a 	bne.w	800acb6 <_strtod_l+0xb9e>
 800a1a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1a4:	b1d3      	cbz	r3, 800a1dc <_strtod_l+0xc4>
 800a1a6:	4642      	mov	r2, r8
 800a1a8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a1ac:	4610      	mov	r0, r2
 800a1ae:	4619      	mov	r1, r3
 800a1b0:	b01f      	add	sp, #124	; 0x7c
 800a1b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1b6:	2a20      	cmp	r2, #32
 800a1b8:	d1cd      	bne.n	800a156 <_strtod_l+0x3e>
 800a1ba:	3301      	adds	r3, #1
 800a1bc:	9319      	str	r3, [sp, #100]	; 0x64
 800a1be:	e7bf      	b.n	800a140 <_strtod_l+0x28>
 800a1c0:	2a2d      	cmp	r2, #45	; 0x2d
 800a1c2:	d1c8      	bne.n	800a156 <_strtod_l+0x3e>
 800a1c4:	2201      	movs	r2, #1
 800a1c6:	920a      	str	r2, [sp, #40]	; 0x28
 800a1c8:	1c5a      	adds	r2, r3, #1
 800a1ca:	9219      	str	r2, [sp, #100]	; 0x64
 800a1cc:	785b      	ldrb	r3, [r3, #1]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d1c3      	bne.n	800a15a <_strtod_l+0x42>
 800a1d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a1d4:	9619      	str	r6, [sp, #100]	; 0x64
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	f040 856b 	bne.w	800acb2 <_strtod_l+0xb9a>
 800a1dc:	4642      	mov	r2, r8
 800a1de:	464b      	mov	r3, r9
 800a1e0:	e7e4      	b.n	800a1ac <_strtod_l+0x94>
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	e7ef      	b.n	800a1c6 <_strtod_l+0xae>
 800a1e6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a1e8:	b13a      	cbz	r2, 800a1fa <_strtod_l+0xe2>
 800a1ea:	2135      	movs	r1, #53	; 0x35
 800a1ec:	a81c      	add	r0, sp, #112	; 0x70
 800a1ee:	f002 fd7f 	bl	800ccf0 <__copybits>
 800a1f2:	4650      	mov	r0, sl
 800a1f4:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a1f6:	f002 f947 	bl	800c488 <_Bfree>
 800a1fa:	3e01      	subs	r6, #1
 800a1fc:	2e04      	cmp	r6, #4
 800a1fe:	d806      	bhi.n	800a20e <_strtod_l+0xf6>
 800a200:	e8df f006 	tbb	[pc, r6]
 800a204:	1714030a 	.word	0x1714030a
 800a208:	0a          	.byte	0x0a
 800a209:	00          	.byte	0x00
 800a20a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800a20e:	0721      	lsls	r1, r4, #28
 800a210:	d5c3      	bpl.n	800a19a <_strtod_l+0x82>
 800a212:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800a216:	e7c0      	b.n	800a19a <_strtod_l+0x82>
 800a218:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a21a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800a21e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a222:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a226:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800a22a:	e7f0      	b.n	800a20e <_strtod_l+0xf6>
 800a22c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a3a8 <_strtod_l+0x290>
 800a230:	e7ed      	b.n	800a20e <_strtod_l+0xf6>
 800a232:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800a236:	f04f 38ff 	mov.w	r8, #4294967295
 800a23a:	e7e8      	b.n	800a20e <_strtod_l+0xf6>
 800a23c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a23e:	1c5a      	adds	r2, r3, #1
 800a240:	9219      	str	r2, [sp, #100]	; 0x64
 800a242:	785b      	ldrb	r3, [r3, #1]
 800a244:	2b30      	cmp	r3, #48	; 0x30
 800a246:	d0f9      	beq.n	800a23c <_strtod_l+0x124>
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d0a6      	beq.n	800a19a <_strtod_l+0x82>
 800a24c:	2301      	movs	r3, #1
 800a24e:	9307      	str	r3, [sp, #28]
 800a250:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a252:	220a      	movs	r2, #10
 800a254:	9308      	str	r3, [sp, #32]
 800a256:	2300      	movs	r3, #0
 800a258:	469b      	mov	fp, r3
 800a25a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800a25e:	9819      	ldr	r0, [sp, #100]	; 0x64
 800a260:	7805      	ldrb	r5, [r0, #0]
 800a262:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800a266:	b2d9      	uxtb	r1, r3
 800a268:	2909      	cmp	r1, #9
 800a26a:	d927      	bls.n	800a2bc <_strtod_l+0x1a4>
 800a26c:	4622      	mov	r2, r4
 800a26e:	4639      	mov	r1, r7
 800a270:	f002 ff52 	bl	800d118 <strncmp>
 800a274:	2800      	cmp	r0, #0
 800a276:	d033      	beq.n	800a2e0 <_strtod_l+0x1c8>
 800a278:	2000      	movs	r0, #0
 800a27a:	462a      	mov	r2, r5
 800a27c:	465c      	mov	r4, fp
 800a27e:	4603      	mov	r3, r0
 800a280:	9004      	str	r0, [sp, #16]
 800a282:	2a65      	cmp	r2, #101	; 0x65
 800a284:	d001      	beq.n	800a28a <_strtod_l+0x172>
 800a286:	2a45      	cmp	r2, #69	; 0x45
 800a288:	d114      	bne.n	800a2b4 <_strtod_l+0x19c>
 800a28a:	b91c      	cbnz	r4, 800a294 <_strtod_l+0x17c>
 800a28c:	9a07      	ldr	r2, [sp, #28]
 800a28e:	4302      	orrs	r2, r0
 800a290:	d09f      	beq.n	800a1d2 <_strtod_l+0xba>
 800a292:	2400      	movs	r4, #0
 800a294:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800a296:	1c72      	adds	r2, r6, #1
 800a298:	9219      	str	r2, [sp, #100]	; 0x64
 800a29a:	7872      	ldrb	r2, [r6, #1]
 800a29c:	2a2b      	cmp	r2, #43	; 0x2b
 800a29e:	d079      	beq.n	800a394 <_strtod_l+0x27c>
 800a2a0:	2a2d      	cmp	r2, #45	; 0x2d
 800a2a2:	f000 8083 	beq.w	800a3ac <_strtod_l+0x294>
 800a2a6:	2700      	movs	r7, #0
 800a2a8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a2ac:	2909      	cmp	r1, #9
 800a2ae:	f240 8083 	bls.w	800a3b8 <_strtod_l+0x2a0>
 800a2b2:	9619      	str	r6, [sp, #100]	; 0x64
 800a2b4:	2500      	movs	r5, #0
 800a2b6:	e09f      	b.n	800a3f8 <_strtod_l+0x2e0>
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	e7c8      	b.n	800a24e <_strtod_l+0x136>
 800a2bc:	f1bb 0f08 	cmp.w	fp, #8
 800a2c0:	bfd5      	itete	le
 800a2c2:	9906      	ldrle	r1, [sp, #24]
 800a2c4:	9905      	ldrgt	r1, [sp, #20]
 800a2c6:	fb02 3301 	mlale	r3, r2, r1, r3
 800a2ca:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a2ce:	f100 0001 	add.w	r0, r0, #1
 800a2d2:	bfd4      	ite	le
 800a2d4:	9306      	strle	r3, [sp, #24]
 800a2d6:	9305      	strgt	r3, [sp, #20]
 800a2d8:	f10b 0b01 	add.w	fp, fp, #1
 800a2dc:	9019      	str	r0, [sp, #100]	; 0x64
 800a2de:	e7be      	b.n	800a25e <_strtod_l+0x146>
 800a2e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a2e2:	191a      	adds	r2, r3, r4
 800a2e4:	9219      	str	r2, [sp, #100]	; 0x64
 800a2e6:	5d1a      	ldrb	r2, [r3, r4]
 800a2e8:	f1bb 0f00 	cmp.w	fp, #0
 800a2ec:	d036      	beq.n	800a35c <_strtod_l+0x244>
 800a2ee:	465c      	mov	r4, fp
 800a2f0:	9004      	str	r0, [sp, #16]
 800a2f2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a2f6:	2b09      	cmp	r3, #9
 800a2f8:	d912      	bls.n	800a320 <_strtod_l+0x208>
 800a2fa:	2301      	movs	r3, #1
 800a2fc:	e7c1      	b.n	800a282 <_strtod_l+0x16a>
 800a2fe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a300:	3001      	adds	r0, #1
 800a302:	1c5a      	adds	r2, r3, #1
 800a304:	9219      	str	r2, [sp, #100]	; 0x64
 800a306:	785a      	ldrb	r2, [r3, #1]
 800a308:	2a30      	cmp	r2, #48	; 0x30
 800a30a:	d0f8      	beq.n	800a2fe <_strtod_l+0x1e6>
 800a30c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a310:	2b08      	cmp	r3, #8
 800a312:	f200 84d5 	bhi.w	800acc0 <_strtod_l+0xba8>
 800a316:	9004      	str	r0, [sp, #16]
 800a318:	2000      	movs	r0, #0
 800a31a:	4604      	mov	r4, r0
 800a31c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a31e:	9308      	str	r3, [sp, #32]
 800a320:	3a30      	subs	r2, #48	; 0x30
 800a322:	f100 0301 	add.w	r3, r0, #1
 800a326:	d013      	beq.n	800a350 <_strtod_l+0x238>
 800a328:	9904      	ldr	r1, [sp, #16]
 800a32a:	1905      	adds	r5, r0, r4
 800a32c:	4419      	add	r1, r3
 800a32e:	9104      	str	r1, [sp, #16]
 800a330:	4623      	mov	r3, r4
 800a332:	210a      	movs	r1, #10
 800a334:	42ab      	cmp	r3, r5
 800a336:	d113      	bne.n	800a360 <_strtod_l+0x248>
 800a338:	1823      	adds	r3, r4, r0
 800a33a:	2b08      	cmp	r3, #8
 800a33c:	f104 0401 	add.w	r4, r4, #1
 800a340:	4404      	add	r4, r0
 800a342:	dc1b      	bgt.n	800a37c <_strtod_l+0x264>
 800a344:	230a      	movs	r3, #10
 800a346:	9906      	ldr	r1, [sp, #24]
 800a348:	fb03 2301 	mla	r3, r3, r1, r2
 800a34c:	9306      	str	r3, [sp, #24]
 800a34e:	2300      	movs	r3, #0
 800a350:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a352:	4618      	mov	r0, r3
 800a354:	1c51      	adds	r1, r2, #1
 800a356:	9119      	str	r1, [sp, #100]	; 0x64
 800a358:	7852      	ldrb	r2, [r2, #1]
 800a35a:	e7ca      	b.n	800a2f2 <_strtod_l+0x1da>
 800a35c:	4658      	mov	r0, fp
 800a35e:	e7d3      	b.n	800a308 <_strtod_l+0x1f0>
 800a360:	2b08      	cmp	r3, #8
 800a362:	dc04      	bgt.n	800a36e <_strtod_l+0x256>
 800a364:	9f06      	ldr	r7, [sp, #24]
 800a366:	434f      	muls	r7, r1
 800a368:	9706      	str	r7, [sp, #24]
 800a36a:	3301      	adds	r3, #1
 800a36c:	e7e2      	b.n	800a334 <_strtod_l+0x21c>
 800a36e:	1c5f      	adds	r7, r3, #1
 800a370:	2f10      	cmp	r7, #16
 800a372:	bfde      	ittt	le
 800a374:	9f05      	ldrle	r7, [sp, #20]
 800a376:	434f      	mulle	r7, r1
 800a378:	9705      	strle	r7, [sp, #20]
 800a37a:	e7f6      	b.n	800a36a <_strtod_l+0x252>
 800a37c:	2c10      	cmp	r4, #16
 800a37e:	bfdf      	itttt	le
 800a380:	230a      	movle	r3, #10
 800a382:	9905      	ldrle	r1, [sp, #20]
 800a384:	fb03 2301 	mlale	r3, r3, r1, r2
 800a388:	9305      	strle	r3, [sp, #20]
 800a38a:	e7e0      	b.n	800a34e <_strtod_l+0x236>
 800a38c:	2300      	movs	r3, #0
 800a38e:	9304      	str	r3, [sp, #16]
 800a390:	2301      	movs	r3, #1
 800a392:	e77b      	b.n	800a28c <_strtod_l+0x174>
 800a394:	2700      	movs	r7, #0
 800a396:	1cb2      	adds	r2, r6, #2
 800a398:	9219      	str	r2, [sp, #100]	; 0x64
 800a39a:	78b2      	ldrb	r2, [r6, #2]
 800a39c:	e784      	b.n	800a2a8 <_strtod_l+0x190>
 800a39e:	bf00      	nop
 800a3a0:	0800de60 	.word	0x0800de60
 800a3a4:	0800dc18 	.word	0x0800dc18
 800a3a8:	7ff00000 	.word	0x7ff00000
 800a3ac:	2701      	movs	r7, #1
 800a3ae:	e7f2      	b.n	800a396 <_strtod_l+0x27e>
 800a3b0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a3b2:	1c51      	adds	r1, r2, #1
 800a3b4:	9119      	str	r1, [sp, #100]	; 0x64
 800a3b6:	7852      	ldrb	r2, [r2, #1]
 800a3b8:	2a30      	cmp	r2, #48	; 0x30
 800a3ba:	d0f9      	beq.n	800a3b0 <_strtod_l+0x298>
 800a3bc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a3c0:	2908      	cmp	r1, #8
 800a3c2:	f63f af77 	bhi.w	800a2b4 <_strtod_l+0x19c>
 800a3c6:	f04f 0e0a 	mov.w	lr, #10
 800a3ca:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800a3ce:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a3d0:	9209      	str	r2, [sp, #36]	; 0x24
 800a3d2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a3d4:	1c51      	adds	r1, r2, #1
 800a3d6:	9119      	str	r1, [sp, #100]	; 0x64
 800a3d8:	7852      	ldrb	r2, [r2, #1]
 800a3da:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800a3de:	2d09      	cmp	r5, #9
 800a3e0:	d935      	bls.n	800a44e <_strtod_l+0x336>
 800a3e2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a3e4:	1b49      	subs	r1, r1, r5
 800a3e6:	2908      	cmp	r1, #8
 800a3e8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800a3ec:	dc02      	bgt.n	800a3f4 <_strtod_l+0x2dc>
 800a3ee:	4565      	cmp	r5, ip
 800a3f0:	bfa8      	it	ge
 800a3f2:	4665      	movge	r5, ip
 800a3f4:	b107      	cbz	r7, 800a3f8 <_strtod_l+0x2e0>
 800a3f6:	426d      	negs	r5, r5
 800a3f8:	2c00      	cmp	r4, #0
 800a3fa:	d14c      	bne.n	800a496 <_strtod_l+0x37e>
 800a3fc:	9907      	ldr	r1, [sp, #28]
 800a3fe:	4301      	orrs	r1, r0
 800a400:	f47f aecb 	bne.w	800a19a <_strtod_l+0x82>
 800a404:	2b00      	cmp	r3, #0
 800a406:	f47f aee4 	bne.w	800a1d2 <_strtod_l+0xba>
 800a40a:	2a69      	cmp	r2, #105	; 0x69
 800a40c:	d026      	beq.n	800a45c <_strtod_l+0x344>
 800a40e:	dc23      	bgt.n	800a458 <_strtod_l+0x340>
 800a410:	2a49      	cmp	r2, #73	; 0x49
 800a412:	d023      	beq.n	800a45c <_strtod_l+0x344>
 800a414:	2a4e      	cmp	r2, #78	; 0x4e
 800a416:	f47f aedc 	bne.w	800a1d2 <_strtod_l+0xba>
 800a41a:	499d      	ldr	r1, [pc, #628]	; (800a690 <_strtod_l+0x578>)
 800a41c:	a819      	add	r0, sp, #100	; 0x64
 800a41e:	f001 fef9 	bl	800c214 <__match>
 800a422:	2800      	cmp	r0, #0
 800a424:	f43f aed5 	beq.w	800a1d2 <_strtod_l+0xba>
 800a428:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a42a:	781b      	ldrb	r3, [r3, #0]
 800a42c:	2b28      	cmp	r3, #40	; 0x28
 800a42e:	d12c      	bne.n	800a48a <_strtod_l+0x372>
 800a430:	4998      	ldr	r1, [pc, #608]	; (800a694 <_strtod_l+0x57c>)
 800a432:	aa1c      	add	r2, sp, #112	; 0x70
 800a434:	a819      	add	r0, sp, #100	; 0x64
 800a436:	f001 ff01 	bl	800c23c <__hexnan>
 800a43a:	2805      	cmp	r0, #5
 800a43c:	d125      	bne.n	800a48a <_strtod_l+0x372>
 800a43e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a440:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800a444:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800a448:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800a44c:	e6a5      	b.n	800a19a <_strtod_l+0x82>
 800a44e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800a452:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800a456:	e7bc      	b.n	800a3d2 <_strtod_l+0x2ba>
 800a458:	2a6e      	cmp	r2, #110	; 0x6e
 800a45a:	e7dc      	b.n	800a416 <_strtod_l+0x2fe>
 800a45c:	498e      	ldr	r1, [pc, #568]	; (800a698 <_strtod_l+0x580>)
 800a45e:	a819      	add	r0, sp, #100	; 0x64
 800a460:	f001 fed8 	bl	800c214 <__match>
 800a464:	2800      	cmp	r0, #0
 800a466:	f43f aeb4 	beq.w	800a1d2 <_strtod_l+0xba>
 800a46a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a46c:	498b      	ldr	r1, [pc, #556]	; (800a69c <_strtod_l+0x584>)
 800a46e:	3b01      	subs	r3, #1
 800a470:	a819      	add	r0, sp, #100	; 0x64
 800a472:	9319      	str	r3, [sp, #100]	; 0x64
 800a474:	f001 fece 	bl	800c214 <__match>
 800a478:	b910      	cbnz	r0, 800a480 <_strtod_l+0x368>
 800a47a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a47c:	3301      	adds	r3, #1
 800a47e:	9319      	str	r3, [sp, #100]	; 0x64
 800a480:	f04f 0800 	mov.w	r8, #0
 800a484:	f8df 9218 	ldr.w	r9, [pc, #536]	; 800a6a0 <_strtod_l+0x588>
 800a488:	e687      	b.n	800a19a <_strtod_l+0x82>
 800a48a:	4886      	ldr	r0, [pc, #536]	; (800a6a4 <_strtod_l+0x58c>)
 800a48c:	f002 fe3e 	bl	800d10c <nan>
 800a490:	4680      	mov	r8, r0
 800a492:	4689      	mov	r9, r1
 800a494:	e681      	b.n	800a19a <_strtod_l+0x82>
 800a496:	9b04      	ldr	r3, [sp, #16]
 800a498:	f1bb 0f00 	cmp.w	fp, #0
 800a49c:	bf08      	it	eq
 800a49e:	46a3      	moveq	fp, r4
 800a4a0:	1aeb      	subs	r3, r5, r3
 800a4a2:	2c10      	cmp	r4, #16
 800a4a4:	9806      	ldr	r0, [sp, #24]
 800a4a6:	4626      	mov	r6, r4
 800a4a8:	9307      	str	r3, [sp, #28]
 800a4aa:	bfa8      	it	ge
 800a4ac:	2610      	movge	r6, #16
 800a4ae:	f7f5 ff99 	bl	80003e4 <__aeabi_ui2d>
 800a4b2:	2c09      	cmp	r4, #9
 800a4b4:	4680      	mov	r8, r0
 800a4b6:	4689      	mov	r9, r1
 800a4b8:	dd13      	ble.n	800a4e2 <_strtod_l+0x3ca>
 800a4ba:	4b7b      	ldr	r3, [pc, #492]	; (800a6a8 <_strtod_l+0x590>)
 800a4bc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a4c0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a4c4:	f7f6 f808 	bl	80004d8 <__aeabi_dmul>
 800a4c8:	4680      	mov	r8, r0
 800a4ca:	9805      	ldr	r0, [sp, #20]
 800a4cc:	4689      	mov	r9, r1
 800a4ce:	f7f5 ff89 	bl	80003e4 <__aeabi_ui2d>
 800a4d2:	4602      	mov	r2, r0
 800a4d4:	460b      	mov	r3, r1
 800a4d6:	4640      	mov	r0, r8
 800a4d8:	4649      	mov	r1, r9
 800a4da:	f7f5 fe47 	bl	800016c <__adddf3>
 800a4de:	4680      	mov	r8, r0
 800a4e0:	4689      	mov	r9, r1
 800a4e2:	2c0f      	cmp	r4, #15
 800a4e4:	dc36      	bgt.n	800a554 <_strtod_l+0x43c>
 800a4e6:	9b07      	ldr	r3, [sp, #28]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	f43f ae56 	beq.w	800a19a <_strtod_l+0x82>
 800a4ee:	dd22      	ble.n	800a536 <_strtod_l+0x41e>
 800a4f0:	2b16      	cmp	r3, #22
 800a4f2:	dc09      	bgt.n	800a508 <_strtod_l+0x3f0>
 800a4f4:	496c      	ldr	r1, [pc, #432]	; (800a6a8 <_strtod_l+0x590>)
 800a4f6:	4642      	mov	r2, r8
 800a4f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a4fc:	464b      	mov	r3, r9
 800a4fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a502:	f7f5 ffe9 	bl	80004d8 <__aeabi_dmul>
 800a506:	e7c3      	b.n	800a490 <_strtod_l+0x378>
 800a508:	9a07      	ldr	r2, [sp, #28]
 800a50a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800a50e:	4293      	cmp	r3, r2
 800a510:	db20      	blt.n	800a554 <_strtod_l+0x43c>
 800a512:	4d65      	ldr	r5, [pc, #404]	; (800a6a8 <_strtod_l+0x590>)
 800a514:	f1c4 040f 	rsb	r4, r4, #15
 800a518:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800a51c:	4642      	mov	r2, r8
 800a51e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a522:	464b      	mov	r3, r9
 800a524:	f7f5 ffd8 	bl	80004d8 <__aeabi_dmul>
 800a528:	9b07      	ldr	r3, [sp, #28]
 800a52a:	1b1c      	subs	r4, r3, r4
 800a52c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800a530:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a534:	e7e5      	b.n	800a502 <_strtod_l+0x3ea>
 800a536:	9b07      	ldr	r3, [sp, #28]
 800a538:	3316      	adds	r3, #22
 800a53a:	db0b      	blt.n	800a554 <_strtod_l+0x43c>
 800a53c:	9b04      	ldr	r3, [sp, #16]
 800a53e:	4640      	mov	r0, r8
 800a540:	1b5d      	subs	r5, r3, r5
 800a542:	4b59      	ldr	r3, [pc, #356]	; (800a6a8 <_strtod_l+0x590>)
 800a544:	4649      	mov	r1, r9
 800a546:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800a54a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a54e:	f7f6 f8ed 	bl	800072c <__aeabi_ddiv>
 800a552:	e79d      	b.n	800a490 <_strtod_l+0x378>
 800a554:	9b07      	ldr	r3, [sp, #28]
 800a556:	1ba6      	subs	r6, r4, r6
 800a558:	441e      	add	r6, r3
 800a55a:	2e00      	cmp	r6, #0
 800a55c:	dd74      	ble.n	800a648 <_strtod_l+0x530>
 800a55e:	f016 030f 	ands.w	r3, r6, #15
 800a562:	d00a      	beq.n	800a57a <_strtod_l+0x462>
 800a564:	4950      	ldr	r1, [pc, #320]	; (800a6a8 <_strtod_l+0x590>)
 800a566:	4642      	mov	r2, r8
 800a568:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a56c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a570:	464b      	mov	r3, r9
 800a572:	f7f5 ffb1 	bl	80004d8 <__aeabi_dmul>
 800a576:	4680      	mov	r8, r0
 800a578:	4689      	mov	r9, r1
 800a57a:	f036 060f 	bics.w	r6, r6, #15
 800a57e:	d052      	beq.n	800a626 <_strtod_l+0x50e>
 800a580:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800a584:	dd27      	ble.n	800a5d6 <_strtod_l+0x4be>
 800a586:	f04f 0b00 	mov.w	fp, #0
 800a58a:	f8cd b010 	str.w	fp, [sp, #16]
 800a58e:	f8cd b020 	str.w	fp, [sp, #32]
 800a592:	f8cd b018 	str.w	fp, [sp, #24]
 800a596:	2322      	movs	r3, #34	; 0x22
 800a598:	f04f 0800 	mov.w	r8, #0
 800a59c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 800a6a0 <_strtod_l+0x588>
 800a5a0:	f8ca 3000 	str.w	r3, [sl]
 800a5a4:	9b08      	ldr	r3, [sp, #32]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	f43f adf7 	beq.w	800a19a <_strtod_l+0x82>
 800a5ac:	4650      	mov	r0, sl
 800a5ae:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a5b0:	f001 ff6a 	bl	800c488 <_Bfree>
 800a5b4:	4650      	mov	r0, sl
 800a5b6:	9906      	ldr	r1, [sp, #24]
 800a5b8:	f001 ff66 	bl	800c488 <_Bfree>
 800a5bc:	4650      	mov	r0, sl
 800a5be:	9904      	ldr	r1, [sp, #16]
 800a5c0:	f001 ff62 	bl	800c488 <_Bfree>
 800a5c4:	4650      	mov	r0, sl
 800a5c6:	9908      	ldr	r1, [sp, #32]
 800a5c8:	f001 ff5e 	bl	800c488 <_Bfree>
 800a5cc:	4659      	mov	r1, fp
 800a5ce:	4650      	mov	r0, sl
 800a5d0:	f001 ff5a 	bl	800c488 <_Bfree>
 800a5d4:	e5e1      	b.n	800a19a <_strtod_l+0x82>
 800a5d6:	4b35      	ldr	r3, [pc, #212]	; (800a6ac <_strtod_l+0x594>)
 800a5d8:	4640      	mov	r0, r8
 800a5da:	9305      	str	r3, [sp, #20]
 800a5dc:	2300      	movs	r3, #0
 800a5de:	4649      	mov	r1, r9
 800a5e0:	461f      	mov	r7, r3
 800a5e2:	1136      	asrs	r6, r6, #4
 800a5e4:	2e01      	cmp	r6, #1
 800a5e6:	dc21      	bgt.n	800a62c <_strtod_l+0x514>
 800a5e8:	b10b      	cbz	r3, 800a5ee <_strtod_l+0x4d6>
 800a5ea:	4680      	mov	r8, r0
 800a5ec:	4689      	mov	r9, r1
 800a5ee:	4b2f      	ldr	r3, [pc, #188]	; (800a6ac <_strtod_l+0x594>)
 800a5f0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800a5f4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a5f8:	4642      	mov	r2, r8
 800a5fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a5fe:	464b      	mov	r3, r9
 800a600:	f7f5 ff6a 	bl	80004d8 <__aeabi_dmul>
 800a604:	4b26      	ldr	r3, [pc, #152]	; (800a6a0 <_strtod_l+0x588>)
 800a606:	460a      	mov	r2, r1
 800a608:	400b      	ands	r3, r1
 800a60a:	4929      	ldr	r1, [pc, #164]	; (800a6b0 <_strtod_l+0x598>)
 800a60c:	4680      	mov	r8, r0
 800a60e:	428b      	cmp	r3, r1
 800a610:	d8b9      	bhi.n	800a586 <_strtod_l+0x46e>
 800a612:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a616:	428b      	cmp	r3, r1
 800a618:	bf86      	itte	hi
 800a61a:	f04f 38ff 	movhi.w	r8, #4294967295
 800a61e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800a6b4 <_strtod_l+0x59c>
 800a622:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800a626:	2300      	movs	r3, #0
 800a628:	9305      	str	r3, [sp, #20]
 800a62a:	e07f      	b.n	800a72c <_strtod_l+0x614>
 800a62c:	07f2      	lsls	r2, r6, #31
 800a62e:	d505      	bpl.n	800a63c <_strtod_l+0x524>
 800a630:	9b05      	ldr	r3, [sp, #20]
 800a632:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a636:	f7f5 ff4f 	bl	80004d8 <__aeabi_dmul>
 800a63a:	2301      	movs	r3, #1
 800a63c:	9a05      	ldr	r2, [sp, #20]
 800a63e:	3701      	adds	r7, #1
 800a640:	3208      	adds	r2, #8
 800a642:	1076      	asrs	r6, r6, #1
 800a644:	9205      	str	r2, [sp, #20]
 800a646:	e7cd      	b.n	800a5e4 <_strtod_l+0x4cc>
 800a648:	d0ed      	beq.n	800a626 <_strtod_l+0x50e>
 800a64a:	4276      	negs	r6, r6
 800a64c:	f016 020f 	ands.w	r2, r6, #15
 800a650:	d00a      	beq.n	800a668 <_strtod_l+0x550>
 800a652:	4b15      	ldr	r3, [pc, #84]	; (800a6a8 <_strtod_l+0x590>)
 800a654:	4640      	mov	r0, r8
 800a656:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a65a:	4649      	mov	r1, r9
 800a65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a660:	f7f6 f864 	bl	800072c <__aeabi_ddiv>
 800a664:	4680      	mov	r8, r0
 800a666:	4689      	mov	r9, r1
 800a668:	1136      	asrs	r6, r6, #4
 800a66a:	d0dc      	beq.n	800a626 <_strtod_l+0x50e>
 800a66c:	2e1f      	cmp	r6, #31
 800a66e:	dd23      	ble.n	800a6b8 <_strtod_l+0x5a0>
 800a670:	f04f 0b00 	mov.w	fp, #0
 800a674:	f8cd b010 	str.w	fp, [sp, #16]
 800a678:	f8cd b020 	str.w	fp, [sp, #32]
 800a67c:	f8cd b018 	str.w	fp, [sp, #24]
 800a680:	2322      	movs	r3, #34	; 0x22
 800a682:	f04f 0800 	mov.w	r8, #0
 800a686:	f04f 0900 	mov.w	r9, #0
 800a68a:	f8ca 3000 	str.w	r3, [sl]
 800a68e:	e789      	b.n	800a5a4 <_strtod_l+0x48c>
 800a690:	0800dbe9 	.word	0x0800dbe9
 800a694:	0800dc2c 	.word	0x0800dc2c
 800a698:	0800dbe1 	.word	0x0800dbe1
 800a69c:	0800dd6c 	.word	0x0800dd6c
 800a6a0:	7ff00000 	.word	0x7ff00000
 800a6a4:	0800e018 	.word	0x0800e018
 800a6a8:	0800def8 	.word	0x0800def8
 800a6ac:	0800ded0 	.word	0x0800ded0
 800a6b0:	7ca00000 	.word	0x7ca00000
 800a6b4:	7fefffff 	.word	0x7fefffff
 800a6b8:	f016 0310 	ands.w	r3, r6, #16
 800a6bc:	bf18      	it	ne
 800a6be:	236a      	movne	r3, #106	; 0x6a
 800a6c0:	4640      	mov	r0, r8
 800a6c2:	9305      	str	r3, [sp, #20]
 800a6c4:	4649      	mov	r1, r9
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	4fb0      	ldr	r7, [pc, #704]	; (800a98c <_strtod_l+0x874>)
 800a6ca:	07f2      	lsls	r2, r6, #31
 800a6cc:	d504      	bpl.n	800a6d8 <_strtod_l+0x5c0>
 800a6ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6d2:	f7f5 ff01 	bl	80004d8 <__aeabi_dmul>
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	1076      	asrs	r6, r6, #1
 800a6da:	f107 0708 	add.w	r7, r7, #8
 800a6de:	d1f4      	bne.n	800a6ca <_strtod_l+0x5b2>
 800a6e0:	b10b      	cbz	r3, 800a6e6 <_strtod_l+0x5ce>
 800a6e2:	4680      	mov	r8, r0
 800a6e4:	4689      	mov	r9, r1
 800a6e6:	9b05      	ldr	r3, [sp, #20]
 800a6e8:	b1c3      	cbz	r3, 800a71c <_strtod_l+0x604>
 800a6ea:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800a6ee:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	4649      	mov	r1, r9
 800a6f6:	dd11      	ble.n	800a71c <_strtod_l+0x604>
 800a6f8:	2b1f      	cmp	r3, #31
 800a6fa:	f340 8127 	ble.w	800a94c <_strtod_l+0x834>
 800a6fe:	2b34      	cmp	r3, #52	; 0x34
 800a700:	bfd8      	it	le
 800a702:	f04f 33ff 	movle.w	r3, #4294967295
 800a706:	f04f 0800 	mov.w	r8, #0
 800a70a:	bfcf      	iteee	gt
 800a70c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800a710:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a714:	fa03 f202 	lslle.w	r2, r3, r2
 800a718:	ea02 0901 	andle.w	r9, r2, r1
 800a71c:	2200      	movs	r2, #0
 800a71e:	2300      	movs	r3, #0
 800a720:	4640      	mov	r0, r8
 800a722:	4649      	mov	r1, r9
 800a724:	f7f6 f940 	bl	80009a8 <__aeabi_dcmpeq>
 800a728:	2800      	cmp	r0, #0
 800a72a:	d1a1      	bne.n	800a670 <_strtod_l+0x558>
 800a72c:	9b06      	ldr	r3, [sp, #24]
 800a72e:	465a      	mov	r2, fp
 800a730:	9300      	str	r3, [sp, #0]
 800a732:	4650      	mov	r0, sl
 800a734:	4623      	mov	r3, r4
 800a736:	9908      	ldr	r1, [sp, #32]
 800a738:	f001 ff0e 	bl	800c558 <__s2b>
 800a73c:	9008      	str	r0, [sp, #32]
 800a73e:	2800      	cmp	r0, #0
 800a740:	f43f af21 	beq.w	800a586 <_strtod_l+0x46e>
 800a744:	9b04      	ldr	r3, [sp, #16]
 800a746:	f04f 0b00 	mov.w	fp, #0
 800a74a:	1b5d      	subs	r5, r3, r5
 800a74c:	9b07      	ldr	r3, [sp, #28]
 800a74e:	f8cd b010 	str.w	fp, [sp, #16]
 800a752:	2b00      	cmp	r3, #0
 800a754:	bfb4      	ite	lt
 800a756:	462b      	movlt	r3, r5
 800a758:	2300      	movge	r3, #0
 800a75a:	930e      	str	r3, [sp, #56]	; 0x38
 800a75c:	9b07      	ldr	r3, [sp, #28]
 800a75e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a762:	9314      	str	r3, [sp, #80]	; 0x50
 800a764:	9b08      	ldr	r3, [sp, #32]
 800a766:	4650      	mov	r0, sl
 800a768:	6859      	ldr	r1, [r3, #4]
 800a76a:	f001 fe4d 	bl	800c408 <_Balloc>
 800a76e:	9006      	str	r0, [sp, #24]
 800a770:	2800      	cmp	r0, #0
 800a772:	f43f af10 	beq.w	800a596 <_strtod_l+0x47e>
 800a776:	9b08      	ldr	r3, [sp, #32]
 800a778:	300c      	adds	r0, #12
 800a77a:	691a      	ldr	r2, [r3, #16]
 800a77c:	f103 010c 	add.w	r1, r3, #12
 800a780:	3202      	adds	r2, #2
 800a782:	0092      	lsls	r2, r2, #2
 800a784:	f7fe fcad 	bl	80090e2 <memcpy>
 800a788:	ab1c      	add	r3, sp, #112	; 0x70
 800a78a:	9301      	str	r3, [sp, #4]
 800a78c:	ab1b      	add	r3, sp, #108	; 0x6c
 800a78e:	9300      	str	r3, [sp, #0]
 800a790:	4642      	mov	r2, r8
 800a792:	464b      	mov	r3, r9
 800a794:	4650      	mov	r0, sl
 800a796:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800a79a:	f002 fa1f 	bl	800cbdc <__d2b>
 800a79e:	901a      	str	r0, [sp, #104]	; 0x68
 800a7a0:	2800      	cmp	r0, #0
 800a7a2:	f43f aef8 	beq.w	800a596 <_strtod_l+0x47e>
 800a7a6:	2101      	movs	r1, #1
 800a7a8:	4650      	mov	r0, sl
 800a7aa:	f001 ff6d 	bl	800c688 <__i2b>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	9004      	str	r0, [sp, #16]
 800a7b2:	2800      	cmp	r0, #0
 800a7b4:	f43f aeef 	beq.w	800a596 <_strtod_l+0x47e>
 800a7b8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800a7ba:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a7bc:	2d00      	cmp	r5, #0
 800a7be:	bfab      	itete	ge
 800a7c0:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800a7c2:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800a7c4:	18ee      	addge	r6, r5, r3
 800a7c6:	1b5c      	sublt	r4, r3, r5
 800a7c8:	9b05      	ldr	r3, [sp, #20]
 800a7ca:	bfa8      	it	ge
 800a7cc:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800a7ce:	eba5 0503 	sub.w	r5, r5, r3
 800a7d2:	4415      	add	r5, r2
 800a7d4:	4b6e      	ldr	r3, [pc, #440]	; (800a990 <_strtod_l+0x878>)
 800a7d6:	f105 35ff 	add.w	r5, r5, #4294967295
 800a7da:	bfb8      	it	lt
 800a7dc:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800a7de:	429d      	cmp	r5, r3
 800a7e0:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a7e4:	f280 80c4 	bge.w	800a970 <_strtod_l+0x858>
 800a7e8:	1b5b      	subs	r3, r3, r5
 800a7ea:	2b1f      	cmp	r3, #31
 800a7ec:	f04f 0701 	mov.w	r7, #1
 800a7f0:	eba2 0203 	sub.w	r2, r2, r3
 800a7f4:	f300 80b1 	bgt.w	800a95a <_strtod_l+0x842>
 800a7f8:	2500      	movs	r5, #0
 800a7fa:	fa07 f303 	lsl.w	r3, r7, r3
 800a7fe:	930f      	str	r3, [sp, #60]	; 0x3c
 800a800:	18b7      	adds	r7, r6, r2
 800a802:	9b05      	ldr	r3, [sp, #20]
 800a804:	42be      	cmp	r6, r7
 800a806:	4414      	add	r4, r2
 800a808:	441c      	add	r4, r3
 800a80a:	4633      	mov	r3, r6
 800a80c:	bfa8      	it	ge
 800a80e:	463b      	movge	r3, r7
 800a810:	42a3      	cmp	r3, r4
 800a812:	bfa8      	it	ge
 800a814:	4623      	movge	r3, r4
 800a816:	2b00      	cmp	r3, #0
 800a818:	bfc2      	ittt	gt
 800a81a:	1aff      	subgt	r7, r7, r3
 800a81c:	1ae4      	subgt	r4, r4, r3
 800a81e:	1af6      	subgt	r6, r6, r3
 800a820:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a822:	2b00      	cmp	r3, #0
 800a824:	dd17      	ble.n	800a856 <_strtod_l+0x73e>
 800a826:	461a      	mov	r2, r3
 800a828:	4650      	mov	r0, sl
 800a82a:	9904      	ldr	r1, [sp, #16]
 800a82c:	f001 ffea 	bl	800c804 <__pow5mult>
 800a830:	9004      	str	r0, [sp, #16]
 800a832:	2800      	cmp	r0, #0
 800a834:	f43f aeaf 	beq.w	800a596 <_strtod_l+0x47e>
 800a838:	4601      	mov	r1, r0
 800a83a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a83c:	4650      	mov	r0, sl
 800a83e:	f001 ff39 	bl	800c6b4 <__multiply>
 800a842:	9009      	str	r0, [sp, #36]	; 0x24
 800a844:	2800      	cmp	r0, #0
 800a846:	f43f aea6 	beq.w	800a596 <_strtod_l+0x47e>
 800a84a:	4650      	mov	r0, sl
 800a84c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a84e:	f001 fe1b 	bl	800c488 <_Bfree>
 800a852:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a854:	931a      	str	r3, [sp, #104]	; 0x68
 800a856:	2f00      	cmp	r7, #0
 800a858:	f300 808e 	bgt.w	800a978 <_strtod_l+0x860>
 800a85c:	9b07      	ldr	r3, [sp, #28]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	dd08      	ble.n	800a874 <_strtod_l+0x75c>
 800a862:	4650      	mov	r0, sl
 800a864:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a866:	9906      	ldr	r1, [sp, #24]
 800a868:	f001 ffcc 	bl	800c804 <__pow5mult>
 800a86c:	9006      	str	r0, [sp, #24]
 800a86e:	2800      	cmp	r0, #0
 800a870:	f43f ae91 	beq.w	800a596 <_strtod_l+0x47e>
 800a874:	2c00      	cmp	r4, #0
 800a876:	dd08      	ble.n	800a88a <_strtod_l+0x772>
 800a878:	4622      	mov	r2, r4
 800a87a:	4650      	mov	r0, sl
 800a87c:	9906      	ldr	r1, [sp, #24]
 800a87e:	f002 f81b 	bl	800c8b8 <__lshift>
 800a882:	9006      	str	r0, [sp, #24]
 800a884:	2800      	cmp	r0, #0
 800a886:	f43f ae86 	beq.w	800a596 <_strtod_l+0x47e>
 800a88a:	2e00      	cmp	r6, #0
 800a88c:	dd08      	ble.n	800a8a0 <_strtod_l+0x788>
 800a88e:	4632      	mov	r2, r6
 800a890:	4650      	mov	r0, sl
 800a892:	9904      	ldr	r1, [sp, #16]
 800a894:	f002 f810 	bl	800c8b8 <__lshift>
 800a898:	9004      	str	r0, [sp, #16]
 800a89a:	2800      	cmp	r0, #0
 800a89c:	f43f ae7b 	beq.w	800a596 <_strtod_l+0x47e>
 800a8a0:	4650      	mov	r0, sl
 800a8a2:	9a06      	ldr	r2, [sp, #24]
 800a8a4:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a8a6:	f002 f893 	bl	800c9d0 <__mdiff>
 800a8aa:	4683      	mov	fp, r0
 800a8ac:	2800      	cmp	r0, #0
 800a8ae:	f43f ae72 	beq.w	800a596 <_strtod_l+0x47e>
 800a8b2:	2400      	movs	r4, #0
 800a8b4:	68c3      	ldr	r3, [r0, #12]
 800a8b6:	9904      	ldr	r1, [sp, #16]
 800a8b8:	60c4      	str	r4, [r0, #12]
 800a8ba:	930b      	str	r3, [sp, #44]	; 0x2c
 800a8bc:	f002 f86c 	bl	800c998 <__mcmp>
 800a8c0:	42a0      	cmp	r0, r4
 800a8c2:	da6b      	bge.n	800a99c <_strtod_l+0x884>
 800a8c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8c6:	ea53 0308 	orrs.w	r3, r3, r8
 800a8ca:	f040 8091 	bne.w	800a9f0 <_strtod_l+0x8d8>
 800a8ce:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	f040 808c 	bne.w	800a9f0 <_strtod_l+0x8d8>
 800a8d8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a8dc:	0d1b      	lsrs	r3, r3, #20
 800a8de:	051b      	lsls	r3, r3, #20
 800a8e0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a8e4:	f240 8084 	bls.w	800a9f0 <_strtod_l+0x8d8>
 800a8e8:	f8db 3014 	ldr.w	r3, [fp, #20]
 800a8ec:	b91b      	cbnz	r3, 800a8f6 <_strtod_l+0x7de>
 800a8ee:	f8db 3010 	ldr.w	r3, [fp, #16]
 800a8f2:	2b01      	cmp	r3, #1
 800a8f4:	dd7c      	ble.n	800a9f0 <_strtod_l+0x8d8>
 800a8f6:	4659      	mov	r1, fp
 800a8f8:	2201      	movs	r2, #1
 800a8fa:	4650      	mov	r0, sl
 800a8fc:	f001 ffdc 	bl	800c8b8 <__lshift>
 800a900:	9904      	ldr	r1, [sp, #16]
 800a902:	4683      	mov	fp, r0
 800a904:	f002 f848 	bl	800c998 <__mcmp>
 800a908:	2800      	cmp	r0, #0
 800a90a:	dd71      	ble.n	800a9f0 <_strtod_l+0x8d8>
 800a90c:	9905      	ldr	r1, [sp, #20]
 800a90e:	464b      	mov	r3, r9
 800a910:	4a20      	ldr	r2, [pc, #128]	; (800a994 <_strtod_l+0x87c>)
 800a912:	2900      	cmp	r1, #0
 800a914:	f000 808c 	beq.w	800aa30 <_strtod_l+0x918>
 800a918:	ea02 0109 	and.w	r1, r2, r9
 800a91c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a920:	f300 8086 	bgt.w	800aa30 <_strtod_l+0x918>
 800a924:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a928:	f77f aeaa 	ble.w	800a680 <_strtod_l+0x568>
 800a92c:	4640      	mov	r0, r8
 800a92e:	4649      	mov	r1, r9
 800a930:	4b19      	ldr	r3, [pc, #100]	; (800a998 <_strtod_l+0x880>)
 800a932:	2200      	movs	r2, #0
 800a934:	f7f5 fdd0 	bl	80004d8 <__aeabi_dmul>
 800a938:	460b      	mov	r3, r1
 800a93a:	4303      	orrs	r3, r0
 800a93c:	bf08      	it	eq
 800a93e:	2322      	moveq	r3, #34	; 0x22
 800a940:	4680      	mov	r8, r0
 800a942:	4689      	mov	r9, r1
 800a944:	bf08      	it	eq
 800a946:	f8ca 3000 	streq.w	r3, [sl]
 800a94a:	e62f      	b.n	800a5ac <_strtod_l+0x494>
 800a94c:	f04f 32ff 	mov.w	r2, #4294967295
 800a950:	fa02 f303 	lsl.w	r3, r2, r3
 800a954:	ea03 0808 	and.w	r8, r3, r8
 800a958:	e6e0      	b.n	800a71c <_strtod_l+0x604>
 800a95a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800a95e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800a962:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800a966:	35e2      	adds	r5, #226	; 0xe2
 800a968:	fa07 f505 	lsl.w	r5, r7, r5
 800a96c:	970f      	str	r7, [sp, #60]	; 0x3c
 800a96e:	e747      	b.n	800a800 <_strtod_l+0x6e8>
 800a970:	2301      	movs	r3, #1
 800a972:	2500      	movs	r5, #0
 800a974:	930f      	str	r3, [sp, #60]	; 0x3c
 800a976:	e743      	b.n	800a800 <_strtod_l+0x6e8>
 800a978:	463a      	mov	r2, r7
 800a97a:	4650      	mov	r0, sl
 800a97c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a97e:	f001 ff9b 	bl	800c8b8 <__lshift>
 800a982:	901a      	str	r0, [sp, #104]	; 0x68
 800a984:	2800      	cmp	r0, #0
 800a986:	f47f af69 	bne.w	800a85c <_strtod_l+0x744>
 800a98a:	e604      	b.n	800a596 <_strtod_l+0x47e>
 800a98c:	0800dc40 	.word	0x0800dc40
 800a990:	fffffc02 	.word	0xfffffc02
 800a994:	7ff00000 	.word	0x7ff00000
 800a998:	39500000 	.word	0x39500000
 800a99c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a9a0:	d165      	bne.n	800aa6e <_strtod_l+0x956>
 800a9a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a9a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a9a8:	b35a      	cbz	r2, 800aa02 <_strtod_l+0x8ea>
 800a9aa:	4a99      	ldr	r2, [pc, #612]	; (800ac10 <_strtod_l+0xaf8>)
 800a9ac:	4293      	cmp	r3, r2
 800a9ae:	d12b      	bne.n	800aa08 <_strtod_l+0x8f0>
 800a9b0:	9b05      	ldr	r3, [sp, #20]
 800a9b2:	4641      	mov	r1, r8
 800a9b4:	b303      	cbz	r3, 800a9f8 <_strtod_l+0x8e0>
 800a9b6:	464a      	mov	r2, r9
 800a9b8:	4b96      	ldr	r3, [pc, #600]	; (800ac14 <_strtod_l+0xafc>)
 800a9ba:	4013      	ands	r3, r2
 800a9bc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a9c0:	f04f 32ff 	mov.w	r2, #4294967295
 800a9c4:	d81b      	bhi.n	800a9fe <_strtod_l+0x8e6>
 800a9c6:	0d1b      	lsrs	r3, r3, #20
 800a9c8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a9cc:	fa02 f303 	lsl.w	r3, r2, r3
 800a9d0:	4299      	cmp	r1, r3
 800a9d2:	d119      	bne.n	800aa08 <_strtod_l+0x8f0>
 800a9d4:	4b90      	ldr	r3, [pc, #576]	; (800ac18 <_strtod_l+0xb00>)
 800a9d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9d8:	429a      	cmp	r2, r3
 800a9da:	d102      	bne.n	800a9e2 <_strtod_l+0x8ca>
 800a9dc:	3101      	adds	r1, #1
 800a9de:	f43f adda 	beq.w	800a596 <_strtod_l+0x47e>
 800a9e2:	f04f 0800 	mov.w	r8, #0
 800a9e6:	4b8b      	ldr	r3, [pc, #556]	; (800ac14 <_strtod_l+0xafc>)
 800a9e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9ea:	401a      	ands	r2, r3
 800a9ec:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800a9f0:	9b05      	ldr	r3, [sp, #20]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d19a      	bne.n	800a92c <_strtod_l+0x814>
 800a9f6:	e5d9      	b.n	800a5ac <_strtod_l+0x494>
 800a9f8:	f04f 33ff 	mov.w	r3, #4294967295
 800a9fc:	e7e8      	b.n	800a9d0 <_strtod_l+0x8b8>
 800a9fe:	4613      	mov	r3, r2
 800aa00:	e7e6      	b.n	800a9d0 <_strtod_l+0x8b8>
 800aa02:	ea53 0308 	orrs.w	r3, r3, r8
 800aa06:	d081      	beq.n	800a90c <_strtod_l+0x7f4>
 800aa08:	b1e5      	cbz	r5, 800aa44 <_strtod_l+0x92c>
 800aa0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa0c:	421d      	tst	r5, r3
 800aa0e:	d0ef      	beq.n	800a9f0 <_strtod_l+0x8d8>
 800aa10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa12:	4640      	mov	r0, r8
 800aa14:	4649      	mov	r1, r9
 800aa16:	9a05      	ldr	r2, [sp, #20]
 800aa18:	b1c3      	cbz	r3, 800aa4c <_strtod_l+0x934>
 800aa1a:	f7ff fb5c 	bl	800a0d6 <sulp>
 800aa1e:	4602      	mov	r2, r0
 800aa20:	460b      	mov	r3, r1
 800aa22:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800aa26:	f7f5 fba1 	bl	800016c <__adddf3>
 800aa2a:	4680      	mov	r8, r0
 800aa2c:	4689      	mov	r9, r1
 800aa2e:	e7df      	b.n	800a9f0 <_strtod_l+0x8d8>
 800aa30:	4013      	ands	r3, r2
 800aa32:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800aa36:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800aa3a:	f04f 38ff 	mov.w	r8, #4294967295
 800aa3e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800aa42:	e7d5      	b.n	800a9f0 <_strtod_l+0x8d8>
 800aa44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aa46:	ea13 0f08 	tst.w	r3, r8
 800aa4a:	e7e0      	b.n	800aa0e <_strtod_l+0x8f6>
 800aa4c:	f7ff fb43 	bl	800a0d6 <sulp>
 800aa50:	4602      	mov	r2, r0
 800aa52:	460b      	mov	r3, r1
 800aa54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800aa58:	f7f5 fb86 	bl	8000168 <__aeabi_dsub>
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	2300      	movs	r3, #0
 800aa60:	4680      	mov	r8, r0
 800aa62:	4689      	mov	r9, r1
 800aa64:	f7f5 ffa0 	bl	80009a8 <__aeabi_dcmpeq>
 800aa68:	2800      	cmp	r0, #0
 800aa6a:	d0c1      	beq.n	800a9f0 <_strtod_l+0x8d8>
 800aa6c:	e608      	b.n	800a680 <_strtod_l+0x568>
 800aa6e:	4658      	mov	r0, fp
 800aa70:	9904      	ldr	r1, [sp, #16]
 800aa72:	f002 f90f 	bl	800cc94 <__ratio>
 800aa76:	2200      	movs	r2, #0
 800aa78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800aa7c:	4606      	mov	r6, r0
 800aa7e:	460f      	mov	r7, r1
 800aa80:	f7f5 ffa6 	bl	80009d0 <__aeabi_dcmple>
 800aa84:	2800      	cmp	r0, #0
 800aa86:	d070      	beq.n	800ab6a <_strtod_l+0xa52>
 800aa88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d042      	beq.n	800ab14 <_strtod_l+0x9fc>
 800aa8e:	2600      	movs	r6, #0
 800aa90:	4f62      	ldr	r7, [pc, #392]	; (800ac1c <_strtod_l+0xb04>)
 800aa92:	4d62      	ldr	r5, [pc, #392]	; (800ac1c <_strtod_l+0xb04>)
 800aa94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa96:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aa9a:	0d1b      	lsrs	r3, r3, #20
 800aa9c:	051b      	lsls	r3, r3, #20
 800aa9e:	930f      	str	r3, [sp, #60]	; 0x3c
 800aaa0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800aaa2:	4b5f      	ldr	r3, [pc, #380]	; (800ac20 <_strtod_l+0xb08>)
 800aaa4:	429a      	cmp	r2, r3
 800aaa6:	f040 80c3 	bne.w	800ac30 <_strtod_l+0xb18>
 800aaaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aaac:	4640      	mov	r0, r8
 800aaae:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800aab2:	4649      	mov	r1, r9
 800aab4:	f002 f818 	bl	800cae8 <__ulp>
 800aab8:	4602      	mov	r2, r0
 800aaba:	460b      	mov	r3, r1
 800aabc:	4630      	mov	r0, r6
 800aabe:	4639      	mov	r1, r7
 800aac0:	f7f5 fd0a 	bl	80004d8 <__aeabi_dmul>
 800aac4:	4642      	mov	r2, r8
 800aac6:	464b      	mov	r3, r9
 800aac8:	f7f5 fb50 	bl	800016c <__adddf3>
 800aacc:	460b      	mov	r3, r1
 800aace:	4951      	ldr	r1, [pc, #324]	; (800ac14 <_strtod_l+0xafc>)
 800aad0:	4a54      	ldr	r2, [pc, #336]	; (800ac24 <_strtod_l+0xb0c>)
 800aad2:	4019      	ands	r1, r3
 800aad4:	4291      	cmp	r1, r2
 800aad6:	4680      	mov	r8, r0
 800aad8:	d95d      	bls.n	800ab96 <_strtod_l+0xa7e>
 800aada:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aadc:	4b4e      	ldr	r3, [pc, #312]	; (800ac18 <_strtod_l+0xb00>)
 800aade:	429a      	cmp	r2, r3
 800aae0:	d103      	bne.n	800aaea <_strtod_l+0x9d2>
 800aae2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aae4:	3301      	adds	r3, #1
 800aae6:	f43f ad56 	beq.w	800a596 <_strtod_l+0x47e>
 800aaea:	f04f 38ff 	mov.w	r8, #4294967295
 800aaee:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800ac18 <_strtod_l+0xb00>
 800aaf2:	4650      	mov	r0, sl
 800aaf4:	991a      	ldr	r1, [sp, #104]	; 0x68
 800aaf6:	f001 fcc7 	bl	800c488 <_Bfree>
 800aafa:	4650      	mov	r0, sl
 800aafc:	9906      	ldr	r1, [sp, #24]
 800aafe:	f001 fcc3 	bl	800c488 <_Bfree>
 800ab02:	4650      	mov	r0, sl
 800ab04:	9904      	ldr	r1, [sp, #16]
 800ab06:	f001 fcbf 	bl	800c488 <_Bfree>
 800ab0a:	4659      	mov	r1, fp
 800ab0c:	4650      	mov	r0, sl
 800ab0e:	f001 fcbb 	bl	800c488 <_Bfree>
 800ab12:	e627      	b.n	800a764 <_strtod_l+0x64c>
 800ab14:	f1b8 0f00 	cmp.w	r8, #0
 800ab18:	d119      	bne.n	800ab4e <_strtod_l+0xa36>
 800ab1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab20:	b9e3      	cbnz	r3, 800ab5c <_strtod_l+0xa44>
 800ab22:	2200      	movs	r2, #0
 800ab24:	4630      	mov	r0, r6
 800ab26:	4639      	mov	r1, r7
 800ab28:	4b3c      	ldr	r3, [pc, #240]	; (800ac1c <_strtod_l+0xb04>)
 800ab2a:	f7f5 ff47 	bl	80009bc <__aeabi_dcmplt>
 800ab2e:	b9c8      	cbnz	r0, 800ab64 <_strtod_l+0xa4c>
 800ab30:	2200      	movs	r2, #0
 800ab32:	4630      	mov	r0, r6
 800ab34:	4639      	mov	r1, r7
 800ab36:	4b3c      	ldr	r3, [pc, #240]	; (800ac28 <_strtod_l+0xb10>)
 800ab38:	f7f5 fcce 	bl	80004d8 <__aeabi_dmul>
 800ab3c:	4604      	mov	r4, r0
 800ab3e:	460d      	mov	r5, r1
 800ab40:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800ab44:	9416      	str	r4, [sp, #88]	; 0x58
 800ab46:	9317      	str	r3, [sp, #92]	; 0x5c
 800ab48:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800ab4c:	e7a2      	b.n	800aa94 <_strtod_l+0x97c>
 800ab4e:	f1b8 0f01 	cmp.w	r8, #1
 800ab52:	d103      	bne.n	800ab5c <_strtod_l+0xa44>
 800ab54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	f43f ad92 	beq.w	800a680 <_strtod_l+0x568>
 800ab5c:	2600      	movs	r6, #0
 800ab5e:	2400      	movs	r4, #0
 800ab60:	4f32      	ldr	r7, [pc, #200]	; (800ac2c <_strtod_l+0xb14>)
 800ab62:	e796      	b.n	800aa92 <_strtod_l+0x97a>
 800ab64:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800ab66:	4d30      	ldr	r5, [pc, #192]	; (800ac28 <_strtod_l+0xb10>)
 800ab68:	e7ea      	b.n	800ab40 <_strtod_l+0xa28>
 800ab6a:	4b2f      	ldr	r3, [pc, #188]	; (800ac28 <_strtod_l+0xb10>)
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	4630      	mov	r0, r6
 800ab70:	4639      	mov	r1, r7
 800ab72:	f7f5 fcb1 	bl	80004d8 <__aeabi_dmul>
 800ab76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab78:	4604      	mov	r4, r0
 800ab7a:	460d      	mov	r5, r1
 800ab7c:	b933      	cbnz	r3, 800ab8c <_strtod_l+0xa74>
 800ab7e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ab82:	9010      	str	r0, [sp, #64]	; 0x40
 800ab84:	9311      	str	r3, [sp, #68]	; 0x44
 800ab86:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800ab8a:	e783      	b.n	800aa94 <_strtod_l+0x97c>
 800ab8c:	4602      	mov	r2, r0
 800ab8e:	460b      	mov	r3, r1
 800ab90:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800ab94:	e7f7      	b.n	800ab86 <_strtod_l+0xa6e>
 800ab96:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800ab9a:	9b05      	ldr	r3, [sp, #20]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d1a8      	bne.n	800aaf2 <_strtod_l+0x9da>
 800aba0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800aba4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800aba6:	0d1b      	lsrs	r3, r3, #20
 800aba8:	051b      	lsls	r3, r3, #20
 800abaa:	429a      	cmp	r2, r3
 800abac:	d1a1      	bne.n	800aaf2 <_strtod_l+0x9da>
 800abae:	4620      	mov	r0, r4
 800abb0:	4629      	mov	r1, r5
 800abb2:	f7f5 ffd9 	bl	8000b68 <__aeabi_d2lz>
 800abb6:	f7f5 fc61 	bl	800047c <__aeabi_l2d>
 800abba:	4602      	mov	r2, r0
 800abbc:	460b      	mov	r3, r1
 800abbe:	4620      	mov	r0, r4
 800abc0:	4629      	mov	r1, r5
 800abc2:	f7f5 fad1 	bl	8000168 <__aeabi_dsub>
 800abc6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800abc8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800abcc:	ea43 0308 	orr.w	r3, r3, r8
 800abd0:	4313      	orrs	r3, r2
 800abd2:	4604      	mov	r4, r0
 800abd4:	460d      	mov	r5, r1
 800abd6:	d066      	beq.n	800aca6 <_strtod_l+0xb8e>
 800abd8:	a309      	add	r3, pc, #36	; (adr r3, 800ac00 <_strtod_l+0xae8>)
 800abda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abde:	f7f5 feed 	bl	80009bc <__aeabi_dcmplt>
 800abe2:	2800      	cmp	r0, #0
 800abe4:	f47f ace2 	bne.w	800a5ac <_strtod_l+0x494>
 800abe8:	a307      	add	r3, pc, #28	; (adr r3, 800ac08 <_strtod_l+0xaf0>)
 800abea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abee:	4620      	mov	r0, r4
 800abf0:	4629      	mov	r1, r5
 800abf2:	f7f5 ff01 	bl	80009f8 <__aeabi_dcmpgt>
 800abf6:	2800      	cmp	r0, #0
 800abf8:	f43f af7b 	beq.w	800aaf2 <_strtod_l+0x9da>
 800abfc:	e4d6      	b.n	800a5ac <_strtod_l+0x494>
 800abfe:	bf00      	nop
 800ac00:	94a03595 	.word	0x94a03595
 800ac04:	3fdfffff 	.word	0x3fdfffff
 800ac08:	35afe535 	.word	0x35afe535
 800ac0c:	3fe00000 	.word	0x3fe00000
 800ac10:	000fffff 	.word	0x000fffff
 800ac14:	7ff00000 	.word	0x7ff00000
 800ac18:	7fefffff 	.word	0x7fefffff
 800ac1c:	3ff00000 	.word	0x3ff00000
 800ac20:	7fe00000 	.word	0x7fe00000
 800ac24:	7c9fffff 	.word	0x7c9fffff
 800ac28:	3fe00000 	.word	0x3fe00000
 800ac2c:	bff00000 	.word	0xbff00000
 800ac30:	9b05      	ldr	r3, [sp, #20]
 800ac32:	b313      	cbz	r3, 800ac7a <_strtod_l+0xb62>
 800ac34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac36:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ac3a:	d81e      	bhi.n	800ac7a <_strtod_l+0xb62>
 800ac3c:	a326      	add	r3, pc, #152	; (adr r3, 800acd8 <_strtod_l+0xbc0>)
 800ac3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac42:	4620      	mov	r0, r4
 800ac44:	4629      	mov	r1, r5
 800ac46:	f7f5 fec3 	bl	80009d0 <__aeabi_dcmple>
 800ac4a:	b190      	cbz	r0, 800ac72 <_strtod_l+0xb5a>
 800ac4c:	4629      	mov	r1, r5
 800ac4e:	4620      	mov	r0, r4
 800ac50:	f7f5 ff1a 	bl	8000a88 <__aeabi_d2uiz>
 800ac54:	2801      	cmp	r0, #1
 800ac56:	bf38      	it	cc
 800ac58:	2001      	movcc	r0, #1
 800ac5a:	f7f5 fbc3 	bl	80003e4 <__aeabi_ui2d>
 800ac5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac60:	4604      	mov	r4, r0
 800ac62:	460d      	mov	r5, r1
 800ac64:	b9d3      	cbnz	r3, 800ac9c <_strtod_l+0xb84>
 800ac66:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ac6a:	9012      	str	r0, [sp, #72]	; 0x48
 800ac6c:	9313      	str	r3, [sp, #76]	; 0x4c
 800ac6e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800ac72:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ac74:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800ac78:	1a9f      	subs	r7, r3, r2
 800ac7a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ac7e:	f001 ff33 	bl	800cae8 <__ulp>
 800ac82:	4602      	mov	r2, r0
 800ac84:	460b      	mov	r3, r1
 800ac86:	4630      	mov	r0, r6
 800ac88:	4639      	mov	r1, r7
 800ac8a:	f7f5 fc25 	bl	80004d8 <__aeabi_dmul>
 800ac8e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ac92:	f7f5 fa6b 	bl	800016c <__adddf3>
 800ac96:	4680      	mov	r8, r0
 800ac98:	4689      	mov	r9, r1
 800ac9a:	e77e      	b.n	800ab9a <_strtod_l+0xa82>
 800ac9c:	4602      	mov	r2, r0
 800ac9e:	460b      	mov	r3, r1
 800aca0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800aca4:	e7e3      	b.n	800ac6e <_strtod_l+0xb56>
 800aca6:	a30e      	add	r3, pc, #56	; (adr r3, 800ace0 <_strtod_l+0xbc8>)
 800aca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acac:	f7f5 fe86 	bl	80009bc <__aeabi_dcmplt>
 800acb0:	e7a1      	b.n	800abf6 <_strtod_l+0xade>
 800acb2:	2300      	movs	r3, #0
 800acb4:	930a      	str	r3, [sp, #40]	; 0x28
 800acb6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800acb8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800acba:	6013      	str	r3, [r2, #0]
 800acbc:	f7ff ba71 	b.w	800a1a2 <_strtod_l+0x8a>
 800acc0:	2a65      	cmp	r2, #101	; 0x65
 800acc2:	f43f ab63 	beq.w	800a38c <_strtod_l+0x274>
 800acc6:	2a45      	cmp	r2, #69	; 0x45
 800acc8:	f43f ab60 	beq.w	800a38c <_strtod_l+0x274>
 800accc:	2301      	movs	r3, #1
 800acce:	f7ff bb95 	b.w	800a3fc <_strtod_l+0x2e4>
 800acd2:	bf00      	nop
 800acd4:	f3af 8000 	nop.w
 800acd8:	ffc00000 	.word	0xffc00000
 800acdc:	41dfffff 	.word	0x41dfffff
 800ace0:	94a03595 	.word	0x94a03595
 800ace4:	3fcfffff 	.word	0x3fcfffff

0800ace8 <_strtod_r>:
 800ace8:	4b01      	ldr	r3, [pc, #4]	; (800acf0 <_strtod_r+0x8>)
 800acea:	f7ff ba15 	b.w	800a118 <_strtod_l>
 800acee:	bf00      	nop
 800acf0:	20000078 	.word	0x20000078

0800acf4 <_strtol_l.constprop.0>:
 800acf4:	2b01      	cmp	r3, #1
 800acf6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acfa:	4680      	mov	r8, r0
 800acfc:	d001      	beq.n	800ad02 <_strtol_l.constprop.0+0xe>
 800acfe:	2b24      	cmp	r3, #36	; 0x24
 800ad00:	d906      	bls.n	800ad10 <_strtol_l.constprop.0+0x1c>
 800ad02:	f7fe f8cb 	bl	8008e9c <__errno>
 800ad06:	2316      	movs	r3, #22
 800ad08:	6003      	str	r3, [r0, #0]
 800ad0a:	2000      	movs	r0, #0
 800ad0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad10:	460d      	mov	r5, r1
 800ad12:	4f35      	ldr	r7, [pc, #212]	; (800ade8 <_strtol_l.constprop.0+0xf4>)
 800ad14:	4628      	mov	r0, r5
 800ad16:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ad1a:	5de6      	ldrb	r6, [r4, r7]
 800ad1c:	f016 0608 	ands.w	r6, r6, #8
 800ad20:	d1f8      	bne.n	800ad14 <_strtol_l.constprop.0+0x20>
 800ad22:	2c2d      	cmp	r4, #45	; 0x2d
 800ad24:	d12f      	bne.n	800ad86 <_strtol_l.constprop.0+0x92>
 800ad26:	2601      	movs	r6, #1
 800ad28:	782c      	ldrb	r4, [r5, #0]
 800ad2a:	1c85      	adds	r5, r0, #2
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d057      	beq.n	800ade0 <_strtol_l.constprop.0+0xec>
 800ad30:	2b10      	cmp	r3, #16
 800ad32:	d109      	bne.n	800ad48 <_strtol_l.constprop.0+0x54>
 800ad34:	2c30      	cmp	r4, #48	; 0x30
 800ad36:	d107      	bne.n	800ad48 <_strtol_l.constprop.0+0x54>
 800ad38:	7828      	ldrb	r0, [r5, #0]
 800ad3a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ad3e:	2858      	cmp	r0, #88	; 0x58
 800ad40:	d149      	bne.n	800add6 <_strtol_l.constprop.0+0xe2>
 800ad42:	2310      	movs	r3, #16
 800ad44:	786c      	ldrb	r4, [r5, #1]
 800ad46:	3502      	adds	r5, #2
 800ad48:	2700      	movs	r7, #0
 800ad4a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800ad4e:	f10e 3eff 	add.w	lr, lr, #4294967295
 800ad52:	fbbe f9f3 	udiv	r9, lr, r3
 800ad56:	4638      	mov	r0, r7
 800ad58:	fb03 ea19 	mls	sl, r3, r9, lr
 800ad5c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ad60:	f1bc 0f09 	cmp.w	ip, #9
 800ad64:	d814      	bhi.n	800ad90 <_strtol_l.constprop.0+0x9c>
 800ad66:	4664      	mov	r4, ip
 800ad68:	42a3      	cmp	r3, r4
 800ad6a:	dd22      	ble.n	800adb2 <_strtol_l.constprop.0+0xbe>
 800ad6c:	2f00      	cmp	r7, #0
 800ad6e:	db1d      	blt.n	800adac <_strtol_l.constprop.0+0xb8>
 800ad70:	4581      	cmp	r9, r0
 800ad72:	d31b      	bcc.n	800adac <_strtol_l.constprop.0+0xb8>
 800ad74:	d101      	bne.n	800ad7a <_strtol_l.constprop.0+0x86>
 800ad76:	45a2      	cmp	sl, r4
 800ad78:	db18      	blt.n	800adac <_strtol_l.constprop.0+0xb8>
 800ad7a:	2701      	movs	r7, #1
 800ad7c:	fb00 4003 	mla	r0, r0, r3, r4
 800ad80:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ad84:	e7ea      	b.n	800ad5c <_strtol_l.constprop.0+0x68>
 800ad86:	2c2b      	cmp	r4, #43	; 0x2b
 800ad88:	bf04      	itt	eq
 800ad8a:	782c      	ldrbeq	r4, [r5, #0]
 800ad8c:	1c85      	addeq	r5, r0, #2
 800ad8e:	e7cd      	b.n	800ad2c <_strtol_l.constprop.0+0x38>
 800ad90:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ad94:	f1bc 0f19 	cmp.w	ip, #25
 800ad98:	d801      	bhi.n	800ad9e <_strtol_l.constprop.0+0xaa>
 800ad9a:	3c37      	subs	r4, #55	; 0x37
 800ad9c:	e7e4      	b.n	800ad68 <_strtol_l.constprop.0+0x74>
 800ad9e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ada2:	f1bc 0f19 	cmp.w	ip, #25
 800ada6:	d804      	bhi.n	800adb2 <_strtol_l.constprop.0+0xbe>
 800ada8:	3c57      	subs	r4, #87	; 0x57
 800adaa:	e7dd      	b.n	800ad68 <_strtol_l.constprop.0+0x74>
 800adac:	f04f 37ff 	mov.w	r7, #4294967295
 800adb0:	e7e6      	b.n	800ad80 <_strtol_l.constprop.0+0x8c>
 800adb2:	2f00      	cmp	r7, #0
 800adb4:	da07      	bge.n	800adc6 <_strtol_l.constprop.0+0xd2>
 800adb6:	2322      	movs	r3, #34	; 0x22
 800adb8:	4670      	mov	r0, lr
 800adba:	f8c8 3000 	str.w	r3, [r8]
 800adbe:	2a00      	cmp	r2, #0
 800adc0:	d0a4      	beq.n	800ad0c <_strtol_l.constprop.0+0x18>
 800adc2:	1e69      	subs	r1, r5, #1
 800adc4:	e005      	b.n	800add2 <_strtol_l.constprop.0+0xde>
 800adc6:	b106      	cbz	r6, 800adca <_strtol_l.constprop.0+0xd6>
 800adc8:	4240      	negs	r0, r0
 800adca:	2a00      	cmp	r2, #0
 800adcc:	d09e      	beq.n	800ad0c <_strtol_l.constprop.0+0x18>
 800adce:	2f00      	cmp	r7, #0
 800add0:	d1f7      	bne.n	800adc2 <_strtol_l.constprop.0+0xce>
 800add2:	6011      	str	r1, [r2, #0]
 800add4:	e79a      	b.n	800ad0c <_strtol_l.constprop.0+0x18>
 800add6:	2430      	movs	r4, #48	; 0x30
 800add8:	2b00      	cmp	r3, #0
 800adda:	d1b5      	bne.n	800ad48 <_strtol_l.constprop.0+0x54>
 800addc:	2308      	movs	r3, #8
 800adde:	e7b3      	b.n	800ad48 <_strtol_l.constprop.0+0x54>
 800ade0:	2c30      	cmp	r4, #48	; 0x30
 800ade2:	d0a9      	beq.n	800ad38 <_strtol_l.constprop.0+0x44>
 800ade4:	230a      	movs	r3, #10
 800ade6:	e7af      	b.n	800ad48 <_strtol_l.constprop.0+0x54>
 800ade8:	0800dc69 	.word	0x0800dc69

0800adec <_strtol_r>:
 800adec:	f7ff bf82 	b.w	800acf4 <_strtol_l.constprop.0>

0800adf0 <_write_r>:
 800adf0:	b538      	push	{r3, r4, r5, lr}
 800adf2:	4604      	mov	r4, r0
 800adf4:	4608      	mov	r0, r1
 800adf6:	4611      	mov	r1, r2
 800adf8:	2200      	movs	r2, #0
 800adfa:	4d05      	ldr	r5, [pc, #20]	; (800ae10 <_write_r+0x20>)
 800adfc:	602a      	str	r2, [r5, #0]
 800adfe:	461a      	mov	r2, r3
 800ae00:	f7f6 fe66 	bl	8001ad0 <_write>
 800ae04:	1c43      	adds	r3, r0, #1
 800ae06:	d102      	bne.n	800ae0e <_write_r+0x1e>
 800ae08:	682b      	ldr	r3, [r5, #0]
 800ae0a:	b103      	cbz	r3, 800ae0e <_write_r+0x1e>
 800ae0c:	6023      	str	r3, [r4, #0]
 800ae0e:	bd38      	pop	{r3, r4, r5, pc}
 800ae10:	2000326c 	.word	0x2000326c

0800ae14 <_close_r>:
 800ae14:	b538      	push	{r3, r4, r5, lr}
 800ae16:	2300      	movs	r3, #0
 800ae18:	4d05      	ldr	r5, [pc, #20]	; (800ae30 <_close_r+0x1c>)
 800ae1a:	4604      	mov	r4, r0
 800ae1c:	4608      	mov	r0, r1
 800ae1e:	602b      	str	r3, [r5, #0]
 800ae20:	f7f6 fe72 	bl	8001b08 <_close>
 800ae24:	1c43      	adds	r3, r0, #1
 800ae26:	d102      	bne.n	800ae2e <_close_r+0x1a>
 800ae28:	682b      	ldr	r3, [r5, #0]
 800ae2a:	b103      	cbz	r3, 800ae2e <_close_r+0x1a>
 800ae2c:	6023      	str	r3, [r4, #0]
 800ae2e:	bd38      	pop	{r3, r4, r5, pc}
 800ae30:	2000326c 	.word	0x2000326c

0800ae34 <quorem>:
 800ae34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae38:	6903      	ldr	r3, [r0, #16]
 800ae3a:	690c      	ldr	r4, [r1, #16]
 800ae3c:	4607      	mov	r7, r0
 800ae3e:	42a3      	cmp	r3, r4
 800ae40:	f2c0 8082 	blt.w	800af48 <quorem+0x114>
 800ae44:	3c01      	subs	r4, #1
 800ae46:	f100 0514 	add.w	r5, r0, #20
 800ae4a:	f101 0814 	add.w	r8, r1, #20
 800ae4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ae52:	9301      	str	r3, [sp, #4]
 800ae54:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ae58:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ae5c:	3301      	adds	r3, #1
 800ae5e:	429a      	cmp	r2, r3
 800ae60:	fbb2 f6f3 	udiv	r6, r2, r3
 800ae64:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ae68:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ae6c:	d331      	bcc.n	800aed2 <quorem+0x9e>
 800ae6e:	f04f 0e00 	mov.w	lr, #0
 800ae72:	4640      	mov	r0, r8
 800ae74:	46ac      	mov	ip, r5
 800ae76:	46f2      	mov	sl, lr
 800ae78:	f850 2b04 	ldr.w	r2, [r0], #4
 800ae7c:	b293      	uxth	r3, r2
 800ae7e:	fb06 e303 	mla	r3, r6, r3, lr
 800ae82:	0c12      	lsrs	r2, r2, #16
 800ae84:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ae88:	b29b      	uxth	r3, r3
 800ae8a:	fb06 e202 	mla	r2, r6, r2, lr
 800ae8e:	ebaa 0303 	sub.w	r3, sl, r3
 800ae92:	f8dc a000 	ldr.w	sl, [ip]
 800ae96:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ae9a:	fa1f fa8a 	uxth.w	sl, sl
 800ae9e:	4453      	add	r3, sl
 800aea0:	f8dc a000 	ldr.w	sl, [ip]
 800aea4:	b292      	uxth	r2, r2
 800aea6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800aeaa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aeae:	b29b      	uxth	r3, r3
 800aeb0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aeb4:	4581      	cmp	r9, r0
 800aeb6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800aeba:	f84c 3b04 	str.w	r3, [ip], #4
 800aebe:	d2db      	bcs.n	800ae78 <quorem+0x44>
 800aec0:	f855 300b 	ldr.w	r3, [r5, fp]
 800aec4:	b92b      	cbnz	r3, 800aed2 <quorem+0x9e>
 800aec6:	9b01      	ldr	r3, [sp, #4]
 800aec8:	3b04      	subs	r3, #4
 800aeca:	429d      	cmp	r5, r3
 800aecc:	461a      	mov	r2, r3
 800aece:	d32f      	bcc.n	800af30 <quorem+0xfc>
 800aed0:	613c      	str	r4, [r7, #16]
 800aed2:	4638      	mov	r0, r7
 800aed4:	f001 fd60 	bl	800c998 <__mcmp>
 800aed8:	2800      	cmp	r0, #0
 800aeda:	db25      	blt.n	800af28 <quorem+0xf4>
 800aedc:	4628      	mov	r0, r5
 800aede:	f04f 0c00 	mov.w	ip, #0
 800aee2:	3601      	adds	r6, #1
 800aee4:	f858 1b04 	ldr.w	r1, [r8], #4
 800aee8:	f8d0 e000 	ldr.w	lr, [r0]
 800aeec:	b28b      	uxth	r3, r1
 800aeee:	ebac 0303 	sub.w	r3, ip, r3
 800aef2:	fa1f f28e 	uxth.w	r2, lr
 800aef6:	4413      	add	r3, r2
 800aef8:	0c0a      	lsrs	r2, r1, #16
 800aefa:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800aefe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800af02:	b29b      	uxth	r3, r3
 800af04:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800af08:	45c1      	cmp	r9, r8
 800af0a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800af0e:	f840 3b04 	str.w	r3, [r0], #4
 800af12:	d2e7      	bcs.n	800aee4 <quorem+0xb0>
 800af14:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800af18:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800af1c:	b922      	cbnz	r2, 800af28 <quorem+0xf4>
 800af1e:	3b04      	subs	r3, #4
 800af20:	429d      	cmp	r5, r3
 800af22:	461a      	mov	r2, r3
 800af24:	d30a      	bcc.n	800af3c <quorem+0x108>
 800af26:	613c      	str	r4, [r7, #16]
 800af28:	4630      	mov	r0, r6
 800af2a:	b003      	add	sp, #12
 800af2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af30:	6812      	ldr	r2, [r2, #0]
 800af32:	3b04      	subs	r3, #4
 800af34:	2a00      	cmp	r2, #0
 800af36:	d1cb      	bne.n	800aed0 <quorem+0x9c>
 800af38:	3c01      	subs	r4, #1
 800af3a:	e7c6      	b.n	800aeca <quorem+0x96>
 800af3c:	6812      	ldr	r2, [r2, #0]
 800af3e:	3b04      	subs	r3, #4
 800af40:	2a00      	cmp	r2, #0
 800af42:	d1f0      	bne.n	800af26 <quorem+0xf2>
 800af44:	3c01      	subs	r4, #1
 800af46:	e7eb      	b.n	800af20 <quorem+0xec>
 800af48:	2000      	movs	r0, #0
 800af4a:	e7ee      	b.n	800af2a <quorem+0xf6>
 800af4c:	0000      	movs	r0, r0
	...

0800af50 <_dtoa_r>:
 800af50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af54:	4616      	mov	r6, r2
 800af56:	461f      	mov	r7, r3
 800af58:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800af5a:	b099      	sub	sp, #100	; 0x64
 800af5c:	4605      	mov	r5, r0
 800af5e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800af62:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800af66:	b974      	cbnz	r4, 800af86 <_dtoa_r+0x36>
 800af68:	2010      	movs	r0, #16
 800af6a:	f001 fa19 	bl	800c3a0 <malloc>
 800af6e:	4602      	mov	r2, r0
 800af70:	6268      	str	r0, [r5, #36]	; 0x24
 800af72:	b920      	cbnz	r0, 800af7e <_dtoa_r+0x2e>
 800af74:	21ea      	movs	r1, #234	; 0xea
 800af76:	4ba8      	ldr	r3, [pc, #672]	; (800b218 <_dtoa_r+0x2c8>)
 800af78:	48a8      	ldr	r0, [pc, #672]	; (800b21c <_dtoa_r+0x2cc>)
 800af7a:	f002 f8ef 	bl	800d15c <__assert_func>
 800af7e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800af82:	6004      	str	r4, [r0, #0]
 800af84:	60c4      	str	r4, [r0, #12]
 800af86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800af88:	6819      	ldr	r1, [r3, #0]
 800af8a:	b151      	cbz	r1, 800afa2 <_dtoa_r+0x52>
 800af8c:	685a      	ldr	r2, [r3, #4]
 800af8e:	2301      	movs	r3, #1
 800af90:	4093      	lsls	r3, r2
 800af92:	604a      	str	r2, [r1, #4]
 800af94:	608b      	str	r3, [r1, #8]
 800af96:	4628      	mov	r0, r5
 800af98:	f001 fa76 	bl	800c488 <_Bfree>
 800af9c:	2200      	movs	r2, #0
 800af9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800afa0:	601a      	str	r2, [r3, #0]
 800afa2:	1e3b      	subs	r3, r7, #0
 800afa4:	bfaf      	iteee	ge
 800afa6:	2300      	movge	r3, #0
 800afa8:	2201      	movlt	r2, #1
 800afaa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800afae:	9305      	strlt	r3, [sp, #20]
 800afb0:	bfa8      	it	ge
 800afb2:	f8c8 3000 	strge.w	r3, [r8]
 800afb6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800afba:	4b99      	ldr	r3, [pc, #612]	; (800b220 <_dtoa_r+0x2d0>)
 800afbc:	bfb8      	it	lt
 800afbe:	f8c8 2000 	strlt.w	r2, [r8]
 800afc2:	ea33 0309 	bics.w	r3, r3, r9
 800afc6:	d119      	bne.n	800affc <_dtoa_r+0xac>
 800afc8:	f242 730f 	movw	r3, #9999	; 0x270f
 800afcc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800afce:	6013      	str	r3, [r2, #0]
 800afd0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800afd4:	4333      	orrs	r3, r6
 800afd6:	f000 857f 	beq.w	800bad8 <_dtoa_r+0xb88>
 800afda:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800afdc:	b953      	cbnz	r3, 800aff4 <_dtoa_r+0xa4>
 800afde:	4b91      	ldr	r3, [pc, #580]	; (800b224 <_dtoa_r+0x2d4>)
 800afe0:	e022      	b.n	800b028 <_dtoa_r+0xd8>
 800afe2:	4b91      	ldr	r3, [pc, #580]	; (800b228 <_dtoa_r+0x2d8>)
 800afe4:	9303      	str	r3, [sp, #12]
 800afe6:	3308      	adds	r3, #8
 800afe8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800afea:	6013      	str	r3, [r2, #0]
 800afec:	9803      	ldr	r0, [sp, #12]
 800afee:	b019      	add	sp, #100	; 0x64
 800aff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aff4:	4b8b      	ldr	r3, [pc, #556]	; (800b224 <_dtoa_r+0x2d4>)
 800aff6:	9303      	str	r3, [sp, #12]
 800aff8:	3303      	adds	r3, #3
 800affa:	e7f5      	b.n	800afe8 <_dtoa_r+0x98>
 800affc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b000:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800b004:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b008:	2200      	movs	r2, #0
 800b00a:	2300      	movs	r3, #0
 800b00c:	f7f5 fccc 	bl	80009a8 <__aeabi_dcmpeq>
 800b010:	4680      	mov	r8, r0
 800b012:	b158      	cbz	r0, 800b02c <_dtoa_r+0xdc>
 800b014:	2301      	movs	r3, #1
 800b016:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b018:	6013      	str	r3, [r2, #0]
 800b01a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	f000 8558 	beq.w	800bad2 <_dtoa_r+0xb82>
 800b022:	4882      	ldr	r0, [pc, #520]	; (800b22c <_dtoa_r+0x2dc>)
 800b024:	6018      	str	r0, [r3, #0]
 800b026:	1e43      	subs	r3, r0, #1
 800b028:	9303      	str	r3, [sp, #12]
 800b02a:	e7df      	b.n	800afec <_dtoa_r+0x9c>
 800b02c:	ab16      	add	r3, sp, #88	; 0x58
 800b02e:	9301      	str	r3, [sp, #4]
 800b030:	ab17      	add	r3, sp, #92	; 0x5c
 800b032:	9300      	str	r3, [sp, #0]
 800b034:	4628      	mov	r0, r5
 800b036:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b03a:	f001 fdcf 	bl	800cbdc <__d2b>
 800b03e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b042:	4683      	mov	fp, r0
 800b044:	2c00      	cmp	r4, #0
 800b046:	d07f      	beq.n	800b148 <_dtoa_r+0x1f8>
 800b048:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b04c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b04e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800b052:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b056:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800b05a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800b05e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800b062:	2200      	movs	r2, #0
 800b064:	4b72      	ldr	r3, [pc, #456]	; (800b230 <_dtoa_r+0x2e0>)
 800b066:	f7f5 f87f 	bl	8000168 <__aeabi_dsub>
 800b06a:	a365      	add	r3, pc, #404	; (adr r3, 800b200 <_dtoa_r+0x2b0>)
 800b06c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b070:	f7f5 fa32 	bl	80004d8 <__aeabi_dmul>
 800b074:	a364      	add	r3, pc, #400	; (adr r3, 800b208 <_dtoa_r+0x2b8>)
 800b076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b07a:	f7f5 f877 	bl	800016c <__adddf3>
 800b07e:	4606      	mov	r6, r0
 800b080:	4620      	mov	r0, r4
 800b082:	460f      	mov	r7, r1
 800b084:	f7f5 f9be 	bl	8000404 <__aeabi_i2d>
 800b088:	a361      	add	r3, pc, #388	; (adr r3, 800b210 <_dtoa_r+0x2c0>)
 800b08a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b08e:	f7f5 fa23 	bl	80004d8 <__aeabi_dmul>
 800b092:	4602      	mov	r2, r0
 800b094:	460b      	mov	r3, r1
 800b096:	4630      	mov	r0, r6
 800b098:	4639      	mov	r1, r7
 800b09a:	f7f5 f867 	bl	800016c <__adddf3>
 800b09e:	4606      	mov	r6, r0
 800b0a0:	460f      	mov	r7, r1
 800b0a2:	f7f5 fcc9 	bl	8000a38 <__aeabi_d2iz>
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	4682      	mov	sl, r0
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	4630      	mov	r0, r6
 800b0ae:	4639      	mov	r1, r7
 800b0b0:	f7f5 fc84 	bl	80009bc <__aeabi_dcmplt>
 800b0b4:	b148      	cbz	r0, 800b0ca <_dtoa_r+0x17a>
 800b0b6:	4650      	mov	r0, sl
 800b0b8:	f7f5 f9a4 	bl	8000404 <__aeabi_i2d>
 800b0bc:	4632      	mov	r2, r6
 800b0be:	463b      	mov	r3, r7
 800b0c0:	f7f5 fc72 	bl	80009a8 <__aeabi_dcmpeq>
 800b0c4:	b908      	cbnz	r0, 800b0ca <_dtoa_r+0x17a>
 800b0c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b0ca:	f1ba 0f16 	cmp.w	sl, #22
 800b0ce:	d858      	bhi.n	800b182 <_dtoa_r+0x232>
 800b0d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b0d4:	4b57      	ldr	r3, [pc, #348]	; (800b234 <_dtoa_r+0x2e4>)
 800b0d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0de:	f7f5 fc6d 	bl	80009bc <__aeabi_dcmplt>
 800b0e2:	2800      	cmp	r0, #0
 800b0e4:	d04f      	beq.n	800b186 <_dtoa_r+0x236>
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b0ec:	930f      	str	r3, [sp, #60]	; 0x3c
 800b0ee:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b0f0:	1b1c      	subs	r4, r3, r4
 800b0f2:	1e63      	subs	r3, r4, #1
 800b0f4:	9309      	str	r3, [sp, #36]	; 0x24
 800b0f6:	bf49      	itett	mi
 800b0f8:	f1c4 0301 	rsbmi	r3, r4, #1
 800b0fc:	2300      	movpl	r3, #0
 800b0fe:	9306      	strmi	r3, [sp, #24]
 800b100:	2300      	movmi	r3, #0
 800b102:	bf54      	ite	pl
 800b104:	9306      	strpl	r3, [sp, #24]
 800b106:	9309      	strmi	r3, [sp, #36]	; 0x24
 800b108:	f1ba 0f00 	cmp.w	sl, #0
 800b10c:	db3d      	blt.n	800b18a <_dtoa_r+0x23a>
 800b10e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b110:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800b114:	4453      	add	r3, sl
 800b116:	9309      	str	r3, [sp, #36]	; 0x24
 800b118:	2300      	movs	r3, #0
 800b11a:	930a      	str	r3, [sp, #40]	; 0x28
 800b11c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b11e:	2b09      	cmp	r3, #9
 800b120:	f200 808c 	bhi.w	800b23c <_dtoa_r+0x2ec>
 800b124:	2b05      	cmp	r3, #5
 800b126:	bfc4      	itt	gt
 800b128:	3b04      	subgt	r3, #4
 800b12a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800b12c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b12e:	bfc8      	it	gt
 800b130:	2400      	movgt	r4, #0
 800b132:	f1a3 0302 	sub.w	r3, r3, #2
 800b136:	bfd8      	it	le
 800b138:	2401      	movle	r4, #1
 800b13a:	2b03      	cmp	r3, #3
 800b13c:	f200 808a 	bhi.w	800b254 <_dtoa_r+0x304>
 800b140:	e8df f003 	tbb	[pc, r3]
 800b144:	5b4d4f2d 	.word	0x5b4d4f2d
 800b148:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800b14c:	441c      	add	r4, r3
 800b14e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800b152:	2b20      	cmp	r3, #32
 800b154:	bfc3      	ittte	gt
 800b156:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b15a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800b15e:	fa09 f303 	lslgt.w	r3, r9, r3
 800b162:	f1c3 0320 	rsble	r3, r3, #32
 800b166:	bfc6      	itte	gt
 800b168:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b16c:	4318      	orrgt	r0, r3
 800b16e:	fa06 f003 	lslle.w	r0, r6, r3
 800b172:	f7f5 f937 	bl	80003e4 <__aeabi_ui2d>
 800b176:	2301      	movs	r3, #1
 800b178:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800b17c:	3c01      	subs	r4, #1
 800b17e:	9313      	str	r3, [sp, #76]	; 0x4c
 800b180:	e76f      	b.n	800b062 <_dtoa_r+0x112>
 800b182:	2301      	movs	r3, #1
 800b184:	e7b2      	b.n	800b0ec <_dtoa_r+0x19c>
 800b186:	900f      	str	r0, [sp, #60]	; 0x3c
 800b188:	e7b1      	b.n	800b0ee <_dtoa_r+0x19e>
 800b18a:	9b06      	ldr	r3, [sp, #24]
 800b18c:	eba3 030a 	sub.w	r3, r3, sl
 800b190:	9306      	str	r3, [sp, #24]
 800b192:	f1ca 0300 	rsb	r3, sl, #0
 800b196:	930a      	str	r3, [sp, #40]	; 0x28
 800b198:	2300      	movs	r3, #0
 800b19a:	930e      	str	r3, [sp, #56]	; 0x38
 800b19c:	e7be      	b.n	800b11c <_dtoa_r+0x1cc>
 800b19e:	2300      	movs	r3, #0
 800b1a0:	930b      	str	r3, [sp, #44]	; 0x2c
 800b1a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	dc58      	bgt.n	800b25a <_dtoa_r+0x30a>
 800b1a8:	f04f 0901 	mov.w	r9, #1
 800b1ac:	464b      	mov	r3, r9
 800b1ae:	f8cd 9020 	str.w	r9, [sp, #32]
 800b1b2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800b1ba:	6042      	str	r2, [r0, #4]
 800b1bc:	2204      	movs	r2, #4
 800b1be:	f102 0614 	add.w	r6, r2, #20
 800b1c2:	429e      	cmp	r6, r3
 800b1c4:	6841      	ldr	r1, [r0, #4]
 800b1c6:	d94e      	bls.n	800b266 <_dtoa_r+0x316>
 800b1c8:	4628      	mov	r0, r5
 800b1ca:	f001 f91d 	bl	800c408 <_Balloc>
 800b1ce:	9003      	str	r0, [sp, #12]
 800b1d0:	2800      	cmp	r0, #0
 800b1d2:	d14c      	bne.n	800b26e <_dtoa_r+0x31e>
 800b1d4:	4602      	mov	r2, r0
 800b1d6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b1da:	4b17      	ldr	r3, [pc, #92]	; (800b238 <_dtoa_r+0x2e8>)
 800b1dc:	e6cc      	b.n	800af78 <_dtoa_r+0x28>
 800b1de:	2301      	movs	r3, #1
 800b1e0:	e7de      	b.n	800b1a0 <_dtoa_r+0x250>
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	930b      	str	r3, [sp, #44]	; 0x2c
 800b1e6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b1e8:	eb0a 0903 	add.w	r9, sl, r3
 800b1ec:	f109 0301 	add.w	r3, r9, #1
 800b1f0:	2b01      	cmp	r3, #1
 800b1f2:	9308      	str	r3, [sp, #32]
 800b1f4:	bfb8      	it	lt
 800b1f6:	2301      	movlt	r3, #1
 800b1f8:	e7dd      	b.n	800b1b6 <_dtoa_r+0x266>
 800b1fa:	2301      	movs	r3, #1
 800b1fc:	e7f2      	b.n	800b1e4 <_dtoa_r+0x294>
 800b1fe:	bf00      	nop
 800b200:	636f4361 	.word	0x636f4361
 800b204:	3fd287a7 	.word	0x3fd287a7
 800b208:	8b60c8b3 	.word	0x8b60c8b3
 800b20c:	3fc68a28 	.word	0x3fc68a28
 800b210:	509f79fb 	.word	0x509f79fb
 800b214:	3fd34413 	.word	0x3fd34413
 800b218:	0800dd76 	.word	0x0800dd76
 800b21c:	0800dd8d 	.word	0x0800dd8d
 800b220:	7ff00000 	.word	0x7ff00000
 800b224:	0800dd72 	.word	0x0800dd72
 800b228:	0800dd69 	.word	0x0800dd69
 800b22c:	0800dbed 	.word	0x0800dbed
 800b230:	3ff80000 	.word	0x3ff80000
 800b234:	0800def8 	.word	0x0800def8
 800b238:	0800dde8 	.word	0x0800dde8
 800b23c:	2401      	movs	r4, #1
 800b23e:	2300      	movs	r3, #0
 800b240:	940b      	str	r4, [sp, #44]	; 0x2c
 800b242:	9322      	str	r3, [sp, #136]	; 0x88
 800b244:	f04f 39ff 	mov.w	r9, #4294967295
 800b248:	2200      	movs	r2, #0
 800b24a:	2312      	movs	r3, #18
 800b24c:	f8cd 9020 	str.w	r9, [sp, #32]
 800b250:	9223      	str	r2, [sp, #140]	; 0x8c
 800b252:	e7b0      	b.n	800b1b6 <_dtoa_r+0x266>
 800b254:	2301      	movs	r3, #1
 800b256:	930b      	str	r3, [sp, #44]	; 0x2c
 800b258:	e7f4      	b.n	800b244 <_dtoa_r+0x2f4>
 800b25a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800b25e:	464b      	mov	r3, r9
 800b260:	f8cd 9020 	str.w	r9, [sp, #32]
 800b264:	e7a7      	b.n	800b1b6 <_dtoa_r+0x266>
 800b266:	3101      	adds	r1, #1
 800b268:	6041      	str	r1, [r0, #4]
 800b26a:	0052      	lsls	r2, r2, #1
 800b26c:	e7a7      	b.n	800b1be <_dtoa_r+0x26e>
 800b26e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b270:	9a03      	ldr	r2, [sp, #12]
 800b272:	601a      	str	r2, [r3, #0]
 800b274:	9b08      	ldr	r3, [sp, #32]
 800b276:	2b0e      	cmp	r3, #14
 800b278:	f200 80a8 	bhi.w	800b3cc <_dtoa_r+0x47c>
 800b27c:	2c00      	cmp	r4, #0
 800b27e:	f000 80a5 	beq.w	800b3cc <_dtoa_r+0x47c>
 800b282:	f1ba 0f00 	cmp.w	sl, #0
 800b286:	dd34      	ble.n	800b2f2 <_dtoa_r+0x3a2>
 800b288:	4a9a      	ldr	r2, [pc, #616]	; (800b4f4 <_dtoa_r+0x5a4>)
 800b28a:	f00a 030f 	and.w	r3, sl, #15
 800b28e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b292:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800b296:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b29a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800b29e:	ea4f 142a 	mov.w	r4, sl, asr #4
 800b2a2:	d016      	beq.n	800b2d2 <_dtoa_r+0x382>
 800b2a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b2a8:	4b93      	ldr	r3, [pc, #588]	; (800b4f8 <_dtoa_r+0x5a8>)
 800b2aa:	2703      	movs	r7, #3
 800b2ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b2b0:	f7f5 fa3c 	bl	800072c <__aeabi_ddiv>
 800b2b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b2b8:	f004 040f 	and.w	r4, r4, #15
 800b2bc:	4e8e      	ldr	r6, [pc, #568]	; (800b4f8 <_dtoa_r+0x5a8>)
 800b2be:	b954      	cbnz	r4, 800b2d6 <_dtoa_r+0x386>
 800b2c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b2c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b2c8:	f7f5 fa30 	bl	800072c <__aeabi_ddiv>
 800b2cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b2d0:	e029      	b.n	800b326 <_dtoa_r+0x3d6>
 800b2d2:	2702      	movs	r7, #2
 800b2d4:	e7f2      	b.n	800b2bc <_dtoa_r+0x36c>
 800b2d6:	07e1      	lsls	r1, r4, #31
 800b2d8:	d508      	bpl.n	800b2ec <_dtoa_r+0x39c>
 800b2da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b2de:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b2e2:	f7f5 f8f9 	bl	80004d8 <__aeabi_dmul>
 800b2e6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b2ea:	3701      	adds	r7, #1
 800b2ec:	1064      	asrs	r4, r4, #1
 800b2ee:	3608      	adds	r6, #8
 800b2f0:	e7e5      	b.n	800b2be <_dtoa_r+0x36e>
 800b2f2:	f000 80a5 	beq.w	800b440 <_dtoa_r+0x4f0>
 800b2f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b2fa:	f1ca 0400 	rsb	r4, sl, #0
 800b2fe:	4b7d      	ldr	r3, [pc, #500]	; (800b4f4 <_dtoa_r+0x5a4>)
 800b300:	f004 020f 	and.w	r2, r4, #15
 800b304:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b30c:	f7f5 f8e4 	bl	80004d8 <__aeabi_dmul>
 800b310:	2702      	movs	r7, #2
 800b312:	2300      	movs	r3, #0
 800b314:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b318:	4e77      	ldr	r6, [pc, #476]	; (800b4f8 <_dtoa_r+0x5a8>)
 800b31a:	1124      	asrs	r4, r4, #4
 800b31c:	2c00      	cmp	r4, #0
 800b31e:	f040 8084 	bne.w	800b42a <_dtoa_r+0x4da>
 800b322:	2b00      	cmp	r3, #0
 800b324:	d1d2      	bne.n	800b2cc <_dtoa_r+0x37c>
 800b326:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b328:	2b00      	cmp	r3, #0
 800b32a:	f000 808b 	beq.w	800b444 <_dtoa_r+0x4f4>
 800b32e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b332:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800b336:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b33a:	2200      	movs	r2, #0
 800b33c:	4b6f      	ldr	r3, [pc, #444]	; (800b4fc <_dtoa_r+0x5ac>)
 800b33e:	f7f5 fb3d 	bl	80009bc <__aeabi_dcmplt>
 800b342:	2800      	cmp	r0, #0
 800b344:	d07e      	beq.n	800b444 <_dtoa_r+0x4f4>
 800b346:	9b08      	ldr	r3, [sp, #32]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d07b      	beq.n	800b444 <_dtoa_r+0x4f4>
 800b34c:	f1b9 0f00 	cmp.w	r9, #0
 800b350:	dd38      	ble.n	800b3c4 <_dtoa_r+0x474>
 800b352:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b356:	2200      	movs	r2, #0
 800b358:	4b69      	ldr	r3, [pc, #420]	; (800b500 <_dtoa_r+0x5b0>)
 800b35a:	f7f5 f8bd 	bl	80004d8 <__aeabi_dmul>
 800b35e:	464c      	mov	r4, r9
 800b360:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b364:	f10a 38ff 	add.w	r8, sl, #4294967295
 800b368:	3701      	adds	r7, #1
 800b36a:	4638      	mov	r0, r7
 800b36c:	f7f5 f84a 	bl	8000404 <__aeabi_i2d>
 800b370:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b374:	f7f5 f8b0 	bl	80004d8 <__aeabi_dmul>
 800b378:	2200      	movs	r2, #0
 800b37a:	4b62      	ldr	r3, [pc, #392]	; (800b504 <_dtoa_r+0x5b4>)
 800b37c:	f7f4 fef6 	bl	800016c <__adddf3>
 800b380:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800b384:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b388:	9611      	str	r6, [sp, #68]	; 0x44
 800b38a:	2c00      	cmp	r4, #0
 800b38c:	d15d      	bne.n	800b44a <_dtoa_r+0x4fa>
 800b38e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b392:	2200      	movs	r2, #0
 800b394:	4b5c      	ldr	r3, [pc, #368]	; (800b508 <_dtoa_r+0x5b8>)
 800b396:	f7f4 fee7 	bl	8000168 <__aeabi_dsub>
 800b39a:	4602      	mov	r2, r0
 800b39c:	460b      	mov	r3, r1
 800b39e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b3a2:	4633      	mov	r3, r6
 800b3a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b3a6:	f7f5 fb27 	bl	80009f8 <__aeabi_dcmpgt>
 800b3aa:	2800      	cmp	r0, #0
 800b3ac:	f040 829c 	bne.w	800b8e8 <_dtoa_r+0x998>
 800b3b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b3b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b3b6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800b3ba:	f7f5 faff 	bl	80009bc <__aeabi_dcmplt>
 800b3be:	2800      	cmp	r0, #0
 800b3c0:	f040 8290 	bne.w	800b8e4 <_dtoa_r+0x994>
 800b3c4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800b3c8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b3cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	f2c0 8152 	blt.w	800b678 <_dtoa_r+0x728>
 800b3d4:	f1ba 0f0e 	cmp.w	sl, #14
 800b3d8:	f300 814e 	bgt.w	800b678 <_dtoa_r+0x728>
 800b3dc:	4b45      	ldr	r3, [pc, #276]	; (800b4f4 <_dtoa_r+0x5a4>)
 800b3de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b3e2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b3e6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800b3ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	f280 80db 	bge.w	800b5a8 <_dtoa_r+0x658>
 800b3f2:	9b08      	ldr	r3, [sp, #32]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	f300 80d7 	bgt.w	800b5a8 <_dtoa_r+0x658>
 800b3fa:	f040 8272 	bne.w	800b8e2 <_dtoa_r+0x992>
 800b3fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b402:	2200      	movs	r2, #0
 800b404:	4b40      	ldr	r3, [pc, #256]	; (800b508 <_dtoa_r+0x5b8>)
 800b406:	f7f5 f867 	bl	80004d8 <__aeabi_dmul>
 800b40a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b40e:	f7f5 fae9 	bl	80009e4 <__aeabi_dcmpge>
 800b412:	9c08      	ldr	r4, [sp, #32]
 800b414:	4626      	mov	r6, r4
 800b416:	2800      	cmp	r0, #0
 800b418:	f040 8248 	bne.w	800b8ac <_dtoa_r+0x95c>
 800b41c:	2331      	movs	r3, #49	; 0x31
 800b41e:	9f03      	ldr	r7, [sp, #12]
 800b420:	f10a 0a01 	add.w	sl, sl, #1
 800b424:	f807 3b01 	strb.w	r3, [r7], #1
 800b428:	e244      	b.n	800b8b4 <_dtoa_r+0x964>
 800b42a:	07e2      	lsls	r2, r4, #31
 800b42c:	d505      	bpl.n	800b43a <_dtoa_r+0x4ea>
 800b42e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b432:	f7f5 f851 	bl	80004d8 <__aeabi_dmul>
 800b436:	2301      	movs	r3, #1
 800b438:	3701      	adds	r7, #1
 800b43a:	1064      	asrs	r4, r4, #1
 800b43c:	3608      	adds	r6, #8
 800b43e:	e76d      	b.n	800b31c <_dtoa_r+0x3cc>
 800b440:	2702      	movs	r7, #2
 800b442:	e770      	b.n	800b326 <_dtoa_r+0x3d6>
 800b444:	46d0      	mov	r8, sl
 800b446:	9c08      	ldr	r4, [sp, #32]
 800b448:	e78f      	b.n	800b36a <_dtoa_r+0x41a>
 800b44a:	9903      	ldr	r1, [sp, #12]
 800b44c:	4b29      	ldr	r3, [pc, #164]	; (800b4f4 <_dtoa_r+0x5a4>)
 800b44e:	4421      	add	r1, r4
 800b450:	9112      	str	r1, [sp, #72]	; 0x48
 800b452:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b454:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b458:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800b45c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b460:	2900      	cmp	r1, #0
 800b462:	d055      	beq.n	800b510 <_dtoa_r+0x5c0>
 800b464:	2000      	movs	r0, #0
 800b466:	4929      	ldr	r1, [pc, #164]	; (800b50c <_dtoa_r+0x5bc>)
 800b468:	f7f5 f960 	bl	800072c <__aeabi_ddiv>
 800b46c:	463b      	mov	r3, r7
 800b46e:	4632      	mov	r2, r6
 800b470:	f7f4 fe7a 	bl	8000168 <__aeabi_dsub>
 800b474:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b478:	9f03      	ldr	r7, [sp, #12]
 800b47a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b47e:	f7f5 fadb 	bl	8000a38 <__aeabi_d2iz>
 800b482:	4604      	mov	r4, r0
 800b484:	f7f4 ffbe 	bl	8000404 <__aeabi_i2d>
 800b488:	4602      	mov	r2, r0
 800b48a:	460b      	mov	r3, r1
 800b48c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b490:	f7f4 fe6a 	bl	8000168 <__aeabi_dsub>
 800b494:	4602      	mov	r2, r0
 800b496:	460b      	mov	r3, r1
 800b498:	3430      	adds	r4, #48	; 0x30
 800b49a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b49e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b4a2:	f807 4b01 	strb.w	r4, [r7], #1
 800b4a6:	f7f5 fa89 	bl	80009bc <__aeabi_dcmplt>
 800b4aa:	2800      	cmp	r0, #0
 800b4ac:	d174      	bne.n	800b598 <_dtoa_r+0x648>
 800b4ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b4b2:	2000      	movs	r0, #0
 800b4b4:	4911      	ldr	r1, [pc, #68]	; (800b4fc <_dtoa_r+0x5ac>)
 800b4b6:	f7f4 fe57 	bl	8000168 <__aeabi_dsub>
 800b4ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b4be:	f7f5 fa7d 	bl	80009bc <__aeabi_dcmplt>
 800b4c2:	2800      	cmp	r0, #0
 800b4c4:	f040 80b7 	bne.w	800b636 <_dtoa_r+0x6e6>
 800b4c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b4ca:	429f      	cmp	r7, r3
 800b4cc:	f43f af7a 	beq.w	800b3c4 <_dtoa_r+0x474>
 800b4d0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	4b0a      	ldr	r3, [pc, #40]	; (800b500 <_dtoa_r+0x5b0>)
 800b4d8:	f7f4 fffe 	bl	80004d8 <__aeabi_dmul>
 800b4dc:	2200      	movs	r2, #0
 800b4de:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b4e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b4e6:	4b06      	ldr	r3, [pc, #24]	; (800b500 <_dtoa_r+0x5b0>)
 800b4e8:	f7f4 fff6 	bl	80004d8 <__aeabi_dmul>
 800b4ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b4f0:	e7c3      	b.n	800b47a <_dtoa_r+0x52a>
 800b4f2:	bf00      	nop
 800b4f4:	0800def8 	.word	0x0800def8
 800b4f8:	0800ded0 	.word	0x0800ded0
 800b4fc:	3ff00000 	.word	0x3ff00000
 800b500:	40240000 	.word	0x40240000
 800b504:	401c0000 	.word	0x401c0000
 800b508:	40140000 	.word	0x40140000
 800b50c:	3fe00000 	.word	0x3fe00000
 800b510:	4630      	mov	r0, r6
 800b512:	4639      	mov	r1, r7
 800b514:	f7f4 ffe0 	bl	80004d8 <__aeabi_dmul>
 800b518:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b51a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b51e:	9c03      	ldr	r4, [sp, #12]
 800b520:	9314      	str	r3, [sp, #80]	; 0x50
 800b522:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b526:	f7f5 fa87 	bl	8000a38 <__aeabi_d2iz>
 800b52a:	9015      	str	r0, [sp, #84]	; 0x54
 800b52c:	f7f4 ff6a 	bl	8000404 <__aeabi_i2d>
 800b530:	4602      	mov	r2, r0
 800b532:	460b      	mov	r3, r1
 800b534:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b538:	f7f4 fe16 	bl	8000168 <__aeabi_dsub>
 800b53c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b53e:	4606      	mov	r6, r0
 800b540:	3330      	adds	r3, #48	; 0x30
 800b542:	f804 3b01 	strb.w	r3, [r4], #1
 800b546:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b548:	460f      	mov	r7, r1
 800b54a:	429c      	cmp	r4, r3
 800b54c:	f04f 0200 	mov.w	r2, #0
 800b550:	d124      	bne.n	800b59c <_dtoa_r+0x64c>
 800b552:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b556:	4bb0      	ldr	r3, [pc, #704]	; (800b818 <_dtoa_r+0x8c8>)
 800b558:	f7f4 fe08 	bl	800016c <__adddf3>
 800b55c:	4602      	mov	r2, r0
 800b55e:	460b      	mov	r3, r1
 800b560:	4630      	mov	r0, r6
 800b562:	4639      	mov	r1, r7
 800b564:	f7f5 fa48 	bl	80009f8 <__aeabi_dcmpgt>
 800b568:	2800      	cmp	r0, #0
 800b56a:	d163      	bne.n	800b634 <_dtoa_r+0x6e4>
 800b56c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b570:	2000      	movs	r0, #0
 800b572:	49a9      	ldr	r1, [pc, #676]	; (800b818 <_dtoa_r+0x8c8>)
 800b574:	f7f4 fdf8 	bl	8000168 <__aeabi_dsub>
 800b578:	4602      	mov	r2, r0
 800b57a:	460b      	mov	r3, r1
 800b57c:	4630      	mov	r0, r6
 800b57e:	4639      	mov	r1, r7
 800b580:	f7f5 fa1c 	bl	80009bc <__aeabi_dcmplt>
 800b584:	2800      	cmp	r0, #0
 800b586:	f43f af1d 	beq.w	800b3c4 <_dtoa_r+0x474>
 800b58a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800b58c:	1e7b      	subs	r3, r7, #1
 800b58e:	9314      	str	r3, [sp, #80]	; 0x50
 800b590:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800b594:	2b30      	cmp	r3, #48	; 0x30
 800b596:	d0f8      	beq.n	800b58a <_dtoa_r+0x63a>
 800b598:	46c2      	mov	sl, r8
 800b59a:	e03b      	b.n	800b614 <_dtoa_r+0x6c4>
 800b59c:	4b9f      	ldr	r3, [pc, #636]	; (800b81c <_dtoa_r+0x8cc>)
 800b59e:	f7f4 ff9b 	bl	80004d8 <__aeabi_dmul>
 800b5a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b5a6:	e7bc      	b.n	800b522 <_dtoa_r+0x5d2>
 800b5a8:	9f03      	ldr	r7, [sp, #12]
 800b5aa:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b5ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b5b2:	4640      	mov	r0, r8
 800b5b4:	4649      	mov	r1, r9
 800b5b6:	f7f5 f8b9 	bl	800072c <__aeabi_ddiv>
 800b5ba:	f7f5 fa3d 	bl	8000a38 <__aeabi_d2iz>
 800b5be:	4604      	mov	r4, r0
 800b5c0:	f7f4 ff20 	bl	8000404 <__aeabi_i2d>
 800b5c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b5c8:	f7f4 ff86 	bl	80004d8 <__aeabi_dmul>
 800b5cc:	4602      	mov	r2, r0
 800b5ce:	460b      	mov	r3, r1
 800b5d0:	4640      	mov	r0, r8
 800b5d2:	4649      	mov	r1, r9
 800b5d4:	f7f4 fdc8 	bl	8000168 <__aeabi_dsub>
 800b5d8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800b5dc:	f807 6b01 	strb.w	r6, [r7], #1
 800b5e0:	9e03      	ldr	r6, [sp, #12]
 800b5e2:	f8dd c020 	ldr.w	ip, [sp, #32]
 800b5e6:	1bbe      	subs	r6, r7, r6
 800b5e8:	45b4      	cmp	ip, r6
 800b5ea:	4602      	mov	r2, r0
 800b5ec:	460b      	mov	r3, r1
 800b5ee:	d136      	bne.n	800b65e <_dtoa_r+0x70e>
 800b5f0:	f7f4 fdbc 	bl	800016c <__adddf3>
 800b5f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b5f8:	4680      	mov	r8, r0
 800b5fa:	4689      	mov	r9, r1
 800b5fc:	f7f5 f9fc 	bl	80009f8 <__aeabi_dcmpgt>
 800b600:	bb58      	cbnz	r0, 800b65a <_dtoa_r+0x70a>
 800b602:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b606:	4640      	mov	r0, r8
 800b608:	4649      	mov	r1, r9
 800b60a:	f7f5 f9cd 	bl	80009a8 <__aeabi_dcmpeq>
 800b60e:	b108      	cbz	r0, 800b614 <_dtoa_r+0x6c4>
 800b610:	07e1      	lsls	r1, r4, #31
 800b612:	d422      	bmi.n	800b65a <_dtoa_r+0x70a>
 800b614:	4628      	mov	r0, r5
 800b616:	4659      	mov	r1, fp
 800b618:	f000 ff36 	bl	800c488 <_Bfree>
 800b61c:	2300      	movs	r3, #0
 800b61e:	703b      	strb	r3, [r7, #0]
 800b620:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b622:	f10a 0001 	add.w	r0, sl, #1
 800b626:	6018      	str	r0, [r3, #0]
 800b628:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	f43f acde 	beq.w	800afec <_dtoa_r+0x9c>
 800b630:	601f      	str	r7, [r3, #0]
 800b632:	e4db      	b.n	800afec <_dtoa_r+0x9c>
 800b634:	4627      	mov	r7, r4
 800b636:	463b      	mov	r3, r7
 800b638:	461f      	mov	r7, r3
 800b63a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b63e:	2a39      	cmp	r2, #57	; 0x39
 800b640:	d107      	bne.n	800b652 <_dtoa_r+0x702>
 800b642:	9a03      	ldr	r2, [sp, #12]
 800b644:	429a      	cmp	r2, r3
 800b646:	d1f7      	bne.n	800b638 <_dtoa_r+0x6e8>
 800b648:	2230      	movs	r2, #48	; 0x30
 800b64a:	9903      	ldr	r1, [sp, #12]
 800b64c:	f108 0801 	add.w	r8, r8, #1
 800b650:	700a      	strb	r2, [r1, #0]
 800b652:	781a      	ldrb	r2, [r3, #0]
 800b654:	3201      	adds	r2, #1
 800b656:	701a      	strb	r2, [r3, #0]
 800b658:	e79e      	b.n	800b598 <_dtoa_r+0x648>
 800b65a:	46d0      	mov	r8, sl
 800b65c:	e7eb      	b.n	800b636 <_dtoa_r+0x6e6>
 800b65e:	2200      	movs	r2, #0
 800b660:	4b6e      	ldr	r3, [pc, #440]	; (800b81c <_dtoa_r+0x8cc>)
 800b662:	f7f4 ff39 	bl	80004d8 <__aeabi_dmul>
 800b666:	2200      	movs	r2, #0
 800b668:	2300      	movs	r3, #0
 800b66a:	4680      	mov	r8, r0
 800b66c:	4689      	mov	r9, r1
 800b66e:	f7f5 f99b 	bl	80009a8 <__aeabi_dcmpeq>
 800b672:	2800      	cmp	r0, #0
 800b674:	d09b      	beq.n	800b5ae <_dtoa_r+0x65e>
 800b676:	e7cd      	b.n	800b614 <_dtoa_r+0x6c4>
 800b678:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b67a:	2a00      	cmp	r2, #0
 800b67c:	f000 80d0 	beq.w	800b820 <_dtoa_r+0x8d0>
 800b680:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b682:	2a01      	cmp	r2, #1
 800b684:	f300 80ae 	bgt.w	800b7e4 <_dtoa_r+0x894>
 800b688:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b68a:	2a00      	cmp	r2, #0
 800b68c:	f000 80a6 	beq.w	800b7dc <_dtoa_r+0x88c>
 800b690:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b694:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b696:	9f06      	ldr	r7, [sp, #24]
 800b698:	9a06      	ldr	r2, [sp, #24]
 800b69a:	2101      	movs	r1, #1
 800b69c:	441a      	add	r2, r3
 800b69e:	9206      	str	r2, [sp, #24]
 800b6a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b6a2:	4628      	mov	r0, r5
 800b6a4:	441a      	add	r2, r3
 800b6a6:	9209      	str	r2, [sp, #36]	; 0x24
 800b6a8:	f000 ffee 	bl	800c688 <__i2b>
 800b6ac:	4606      	mov	r6, r0
 800b6ae:	2f00      	cmp	r7, #0
 800b6b0:	dd0c      	ble.n	800b6cc <_dtoa_r+0x77c>
 800b6b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	dd09      	ble.n	800b6cc <_dtoa_r+0x77c>
 800b6b8:	42bb      	cmp	r3, r7
 800b6ba:	bfa8      	it	ge
 800b6bc:	463b      	movge	r3, r7
 800b6be:	9a06      	ldr	r2, [sp, #24]
 800b6c0:	1aff      	subs	r7, r7, r3
 800b6c2:	1ad2      	subs	r2, r2, r3
 800b6c4:	9206      	str	r2, [sp, #24]
 800b6c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b6c8:	1ad3      	subs	r3, r2, r3
 800b6ca:	9309      	str	r3, [sp, #36]	; 0x24
 800b6cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6ce:	b1f3      	cbz	r3, 800b70e <_dtoa_r+0x7be>
 800b6d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	f000 80a8 	beq.w	800b828 <_dtoa_r+0x8d8>
 800b6d8:	2c00      	cmp	r4, #0
 800b6da:	dd10      	ble.n	800b6fe <_dtoa_r+0x7ae>
 800b6dc:	4631      	mov	r1, r6
 800b6de:	4622      	mov	r2, r4
 800b6e0:	4628      	mov	r0, r5
 800b6e2:	f001 f88f 	bl	800c804 <__pow5mult>
 800b6e6:	465a      	mov	r2, fp
 800b6e8:	4601      	mov	r1, r0
 800b6ea:	4606      	mov	r6, r0
 800b6ec:	4628      	mov	r0, r5
 800b6ee:	f000 ffe1 	bl	800c6b4 <__multiply>
 800b6f2:	4680      	mov	r8, r0
 800b6f4:	4659      	mov	r1, fp
 800b6f6:	4628      	mov	r0, r5
 800b6f8:	f000 fec6 	bl	800c488 <_Bfree>
 800b6fc:	46c3      	mov	fp, r8
 800b6fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b700:	1b1a      	subs	r2, r3, r4
 800b702:	d004      	beq.n	800b70e <_dtoa_r+0x7be>
 800b704:	4659      	mov	r1, fp
 800b706:	4628      	mov	r0, r5
 800b708:	f001 f87c 	bl	800c804 <__pow5mult>
 800b70c:	4683      	mov	fp, r0
 800b70e:	2101      	movs	r1, #1
 800b710:	4628      	mov	r0, r5
 800b712:	f000 ffb9 	bl	800c688 <__i2b>
 800b716:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b718:	4604      	mov	r4, r0
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	f340 8086 	ble.w	800b82c <_dtoa_r+0x8dc>
 800b720:	461a      	mov	r2, r3
 800b722:	4601      	mov	r1, r0
 800b724:	4628      	mov	r0, r5
 800b726:	f001 f86d 	bl	800c804 <__pow5mult>
 800b72a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b72c:	4604      	mov	r4, r0
 800b72e:	2b01      	cmp	r3, #1
 800b730:	dd7f      	ble.n	800b832 <_dtoa_r+0x8e2>
 800b732:	f04f 0800 	mov.w	r8, #0
 800b736:	6923      	ldr	r3, [r4, #16]
 800b738:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b73c:	6918      	ldr	r0, [r3, #16]
 800b73e:	f000 ff55 	bl	800c5ec <__hi0bits>
 800b742:	f1c0 0020 	rsb	r0, r0, #32
 800b746:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b748:	4418      	add	r0, r3
 800b74a:	f010 001f 	ands.w	r0, r0, #31
 800b74e:	f000 8092 	beq.w	800b876 <_dtoa_r+0x926>
 800b752:	f1c0 0320 	rsb	r3, r0, #32
 800b756:	2b04      	cmp	r3, #4
 800b758:	f340 808a 	ble.w	800b870 <_dtoa_r+0x920>
 800b75c:	f1c0 001c 	rsb	r0, r0, #28
 800b760:	9b06      	ldr	r3, [sp, #24]
 800b762:	4407      	add	r7, r0
 800b764:	4403      	add	r3, r0
 800b766:	9306      	str	r3, [sp, #24]
 800b768:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b76a:	4403      	add	r3, r0
 800b76c:	9309      	str	r3, [sp, #36]	; 0x24
 800b76e:	9b06      	ldr	r3, [sp, #24]
 800b770:	2b00      	cmp	r3, #0
 800b772:	dd05      	ble.n	800b780 <_dtoa_r+0x830>
 800b774:	4659      	mov	r1, fp
 800b776:	461a      	mov	r2, r3
 800b778:	4628      	mov	r0, r5
 800b77a:	f001 f89d 	bl	800c8b8 <__lshift>
 800b77e:	4683      	mov	fp, r0
 800b780:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b782:	2b00      	cmp	r3, #0
 800b784:	dd05      	ble.n	800b792 <_dtoa_r+0x842>
 800b786:	4621      	mov	r1, r4
 800b788:	461a      	mov	r2, r3
 800b78a:	4628      	mov	r0, r5
 800b78c:	f001 f894 	bl	800c8b8 <__lshift>
 800b790:	4604      	mov	r4, r0
 800b792:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b794:	2b00      	cmp	r3, #0
 800b796:	d070      	beq.n	800b87a <_dtoa_r+0x92a>
 800b798:	4621      	mov	r1, r4
 800b79a:	4658      	mov	r0, fp
 800b79c:	f001 f8fc 	bl	800c998 <__mcmp>
 800b7a0:	2800      	cmp	r0, #0
 800b7a2:	da6a      	bge.n	800b87a <_dtoa_r+0x92a>
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	4659      	mov	r1, fp
 800b7a8:	220a      	movs	r2, #10
 800b7aa:	4628      	mov	r0, r5
 800b7ac:	f000 fe8e 	bl	800c4cc <__multadd>
 800b7b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b7b2:	4683      	mov	fp, r0
 800b7b4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	f000 8194 	beq.w	800bae6 <_dtoa_r+0xb96>
 800b7be:	4631      	mov	r1, r6
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	220a      	movs	r2, #10
 800b7c4:	4628      	mov	r0, r5
 800b7c6:	f000 fe81 	bl	800c4cc <__multadd>
 800b7ca:	f1b9 0f00 	cmp.w	r9, #0
 800b7ce:	4606      	mov	r6, r0
 800b7d0:	f300 8093 	bgt.w	800b8fa <_dtoa_r+0x9aa>
 800b7d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b7d6:	2b02      	cmp	r3, #2
 800b7d8:	dc57      	bgt.n	800b88a <_dtoa_r+0x93a>
 800b7da:	e08e      	b.n	800b8fa <_dtoa_r+0x9aa>
 800b7dc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b7de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b7e2:	e757      	b.n	800b694 <_dtoa_r+0x744>
 800b7e4:	9b08      	ldr	r3, [sp, #32]
 800b7e6:	1e5c      	subs	r4, r3, #1
 800b7e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7ea:	42a3      	cmp	r3, r4
 800b7ec:	bfb7      	itett	lt
 800b7ee:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b7f0:	1b1c      	subge	r4, r3, r4
 800b7f2:	1ae2      	sublt	r2, r4, r3
 800b7f4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800b7f6:	bfbe      	ittt	lt
 800b7f8:	940a      	strlt	r4, [sp, #40]	; 0x28
 800b7fa:	189b      	addlt	r3, r3, r2
 800b7fc:	930e      	strlt	r3, [sp, #56]	; 0x38
 800b7fe:	9b08      	ldr	r3, [sp, #32]
 800b800:	bfb8      	it	lt
 800b802:	2400      	movlt	r4, #0
 800b804:	2b00      	cmp	r3, #0
 800b806:	bfbb      	ittet	lt
 800b808:	9b06      	ldrlt	r3, [sp, #24]
 800b80a:	9a08      	ldrlt	r2, [sp, #32]
 800b80c:	9f06      	ldrge	r7, [sp, #24]
 800b80e:	1a9f      	sublt	r7, r3, r2
 800b810:	bfac      	ite	ge
 800b812:	9b08      	ldrge	r3, [sp, #32]
 800b814:	2300      	movlt	r3, #0
 800b816:	e73f      	b.n	800b698 <_dtoa_r+0x748>
 800b818:	3fe00000 	.word	0x3fe00000
 800b81c:	40240000 	.word	0x40240000
 800b820:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b822:	9f06      	ldr	r7, [sp, #24]
 800b824:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800b826:	e742      	b.n	800b6ae <_dtoa_r+0x75e>
 800b828:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b82a:	e76b      	b.n	800b704 <_dtoa_r+0x7b4>
 800b82c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b82e:	2b01      	cmp	r3, #1
 800b830:	dc19      	bgt.n	800b866 <_dtoa_r+0x916>
 800b832:	9b04      	ldr	r3, [sp, #16]
 800b834:	b9bb      	cbnz	r3, 800b866 <_dtoa_r+0x916>
 800b836:	9b05      	ldr	r3, [sp, #20]
 800b838:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b83c:	b99b      	cbnz	r3, 800b866 <_dtoa_r+0x916>
 800b83e:	9b05      	ldr	r3, [sp, #20]
 800b840:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b844:	0d1b      	lsrs	r3, r3, #20
 800b846:	051b      	lsls	r3, r3, #20
 800b848:	b183      	cbz	r3, 800b86c <_dtoa_r+0x91c>
 800b84a:	f04f 0801 	mov.w	r8, #1
 800b84e:	9b06      	ldr	r3, [sp, #24]
 800b850:	3301      	adds	r3, #1
 800b852:	9306      	str	r3, [sp, #24]
 800b854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b856:	3301      	adds	r3, #1
 800b858:	9309      	str	r3, [sp, #36]	; 0x24
 800b85a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	f47f af6a 	bne.w	800b736 <_dtoa_r+0x7e6>
 800b862:	2001      	movs	r0, #1
 800b864:	e76f      	b.n	800b746 <_dtoa_r+0x7f6>
 800b866:	f04f 0800 	mov.w	r8, #0
 800b86a:	e7f6      	b.n	800b85a <_dtoa_r+0x90a>
 800b86c:	4698      	mov	r8, r3
 800b86e:	e7f4      	b.n	800b85a <_dtoa_r+0x90a>
 800b870:	f43f af7d 	beq.w	800b76e <_dtoa_r+0x81e>
 800b874:	4618      	mov	r0, r3
 800b876:	301c      	adds	r0, #28
 800b878:	e772      	b.n	800b760 <_dtoa_r+0x810>
 800b87a:	9b08      	ldr	r3, [sp, #32]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	dc36      	bgt.n	800b8ee <_dtoa_r+0x99e>
 800b880:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b882:	2b02      	cmp	r3, #2
 800b884:	dd33      	ble.n	800b8ee <_dtoa_r+0x99e>
 800b886:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b88a:	f1b9 0f00 	cmp.w	r9, #0
 800b88e:	d10d      	bne.n	800b8ac <_dtoa_r+0x95c>
 800b890:	4621      	mov	r1, r4
 800b892:	464b      	mov	r3, r9
 800b894:	2205      	movs	r2, #5
 800b896:	4628      	mov	r0, r5
 800b898:	f000 fe18 	bl	800c4cc <__multadd>
 800b89c:	4601      	mov	r1, r0
 800b89e:	4604      	mov	r4, r0
 800b8a0:	4658      	mov	r0, fp
 800b8a2:	f001 f879 	bl	800c998 <__mcmp>
 800b8a6:	2800      	cmp	r0, #0
 800b8a8:	f73f adb8 	bgt.w	800b41c <_dtoa_r+0x4cc>
 800b8ac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b8ae:	9f03      	ldr	r7, [sp, #12]
 800b8b0:	ea6f 0a03 	mvn.w	sl, r3
 800b8b4:	f04f 0800 	mov.w	r8, #0
 800b8b8:	4621      	mov	r1, r4
 800b8ba:	4628      	mov	r0, r5
 800b8bc:	f000 fde4 	bl	800c488 <_Bfree>
 800b8c0:	2e00      	cmp	r6, #0
 800b8c2:	f43f aea7 	beq.w	800b614 <_dtoa_r+0x6c4>
 800b8c6:	f1b8 0f00 	cmp.w	r8, #0
 800b8ca:	d005      	beq.n	800b8d8 <_dtoa_r+0x988>
 800b8cc:	45b0      	cmp	r8, r6
 800b8ce:	d003      	beq.n	800b8d8 <_dtoa_r+0x988>
 800b8d0:	4641      	mov	r1, r8
 800b8d2:	4628      	mov	r0, r5
 800b8d4:	f000 fdd8 	bl	800c488 <_Bfree>
 800b8d8:	4631      	mov	r1, r6
 800b8da:	4628      	mov	r0, r5
 800b8dc:	f000 fdd4 	bl	800c488 <_Bfree>
 800b8e0:	e698      	b.n	800b614 <_dtoa_r+0x6c4>
 800b8e2:	2400      	movs	r4, #0
 800b8e4:	4626      	mov	r6, r4
 800b8e6:	e7e1      	b.n	800b8ac <_dtoa_r+0x95c>
 800b8e8:	46c2      	mov	sl, r8
 800b8ea:	4626      	mov	r6, r4
 800b8ec:	e596      	b.n	800b41c <_dtoa_r+0x4cc>
 800b8ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	f000 80fd 	beq.w	800baf4 <_dtoa_r+0xba4>
 800b8fa:	2f00      	cmp	r7, #0
 800b8fc:	dd05      	ble.n	800b90a <_dtoa_r+0x9ba>
 800b8fe:	4631      	mov	r1, r6
 800b900:	463a      	mov	r2, r7
 800b902:	4628      	mov	r0, r5
 800b904:	f000 ffd8 	bl	800c8b8 <__lshift>
 800b908:	4606      	mov	r6, r0
 800b90a:	f1b8 0f00 	cmp.w	r8, #0
 800b90e:	d05c      	beq.n	800b9ca <_dtoa_r+0xa7a>
 800b910:	4628      	mov	r0, r5
 800b912:	6871      	ldr	r1, [r6, #4]
 800b914:	f000 fd78 	bl	800c408 <_Balloc>
 800b918:	4607      	mov	r7, r0
 800b91a:	b928      	cbnz	r0, 800b928 <_dtoa_r+0x9d8>
 800b91c:	4602      	mov	r2, r0
 800b91e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b922:	4b7f      	ldr	r3, [pc, #508]	; (800bb20 <_dtoa_r+0xbd0>)
 800b924:	f7ff bb28 	b.w	800af78 <_dtoa_r+0x28>
 800b928:	6932      	ldr	r2, [r6, #16]
 800b92a:	f106 010c 	add.w	r1, r6, #12
 800b92e:	3202      	adds	r2, #2
 800b930:	0092      	lsls	r2, r2, #2
 800b932:	300c      	adds	r0, #12
 800b934:	f7fd fbd5 	bl	80090e2 <memcpy>
 800b938:	2201      	movs	r2, #1
 800b93a:	4639      	mov	r1, r7
 800b93c:	4628      	mov	r0, r5
 800b93e:	f000 ffbb 	bl	800c8b8 <__lshift>
 800b942:	46b0      	mov	r8, r6
 800b944:	4606      	mov	r6, r0
 800b946:	9b03      	ldr	r3, [sp, #12]
 800b948:	3301      	adds	r3, #1
 800b94a:	9308      	str	r3, [sp, #32]
 800b94c:	9b03      	ldr	r3, [sp, #12]
 800b94e:	444b      	add	r3, r9
 800b950:	930a      	str	r3, [sp, #40]	; 0x28
 800b952:	9b04      	ldr	r3, [sp, #16]
 800b954:	f003 0301 	and.w	r3, r3, #1
 800b958:	9309      	str	r3, [sp, #36]	; 0x24
 800b95a:	9b08      	ldr	r3, [sp, #32]
 800b95c:	4621      	mov	r1, r4
 800b95e:	3b01      	subs	r3, #1
 800b960:	4658      	mov	r0, fp
 800b962:	9304      	str	r3, [sp, #16]
 800b964:	f7ff fa66 	bl	800ae34 <quorem>
 800b968:	4603      	mov	r3, r0
 800b96a:	4641      	mov	r1, r8
 800b96c:	3330      	adds	r3, #48	; 0x30
 800b96e:	9006      	str	r0, [sp, #24]
 800b970:	4658      	mov	r0, fp
 800b972:	930b      	str	r3, [sp, #44]	; 0x2c
 800b974:	f001 f810 	bl	800c998 <__mcmp>
 800b978:	4632      	mov	r2, r6
 800b97a:	4681      	mov	r9, r0
 800b97c:	4621      	mov	r1, r4
 800b97e:	4628      	mov	r0, r5
 800b980:	f001 f826 	bl	800c9d0 <__mdiff>
 800b984:	68c2      	ldr	r2, [r0, #12]
 800b986:	4607      	mov	r7, r0
 800b988:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b98a:	bb02      	cbnz	r2, 800b9ce <_dtoa_r+0xa7e>
 800b98c:	4601      	mov	r1, r0
 800b98e:	4658      	mov	r0, fp
 800b990:	f001 f802 	bl	800c998 <__mcmp>
 800b994:	4602      	mov	r2, r0
 800b996:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b998:	4639      	mov	r1, r7
 800b99a:	4628      	mov	r0, r5
 800b99c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800b9a0:	f000 fd72 	bl	800c488 <_Bfree>
 800b9a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b9a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b9a8:	9f08      	ldr	r7, [sp, #32]
 800b9aa:	ea43 0102 	orr.w	r1, r3, r2
 800b9ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9b0:	430b      	orrs	r3, r1
 800b9b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b9b4:	d10d      	bne.n	800b9d2 <_dtoa_r+0xa82>
 800b9b6:	2b39      	cmp	r3, #57	; 0x39
 800b9b8:	d029      	beq.n	800ba0e <_dtoa_r+0xabe>
 800b9ba:	f1b9 0f00 	cmp.w	r9, #0
 800b9be:	dd01      	ble.n	800b9c4 <_dtoa_r+0xa74>
 800b9c0:	9b06      	ldr	r3, [sp, #24]
 800b9c2:	3331      	adds	r3, #49	; 0x31
 800b9c4:	9a04      	ldr	r2, [sp, #16]
 800b9c6:	7013      	strb	r3, [r2, #0]
 800b9c8:	e776      	b.n	800b8b8 <_dtoa_r+0x968>
 800b9ca:	4630      	mov	r0, r6
 800b9cc:	e7b9      	b.n	800b942 <_dtoa_r+0x9f2>
 800b9ce:	2201      	movs	r2, #1
 800b9d0:	e7e2      	b.n	800b998 <_dtoa_r+0xa48>
 800b9d2:	f1b9 0f00 	cmp.w	r9, #0
 800b9d6:	db06      	blt.n	800b9e6 <_dtoa_r+0xa96>
 800b9d8:	9922      	ldr	r1, [sp, #136]	; 0x88
 800b9da:	ea41 0909 	orr.w	r9, r1, r9
 800b9de:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b9e0:	ea59 0101 	orrs.w	r1, r9, r1
 800b9e4:	d120      	bne.n	800ba28 <_dtoa_r+0xad8>
 800b9e6:	2a00      	cmp	r2, #0
 800b9e8:	ddec      	ble.n	800b9c4 <_dtoa_r+0xa74>
 800b9ea:	4659      	mov	r1, fp
 800b9ec:	2201      	movs	r2, #1
 800b9ee:	4628      	mov	r0, r5
 800b9f0:	9308      	str	r3, [sp, #32]
 800b9f2:	f000 ff61 	bl	800c8b8 <__lshift>
 800b9f6:	4621      	mov	r1, r4
 800b9f8:	4683      	mov	fp, r0
 800b9fa:	f000 ffcd 	bl	800c998 <__mcmp>
 800b9fe:	2800      	cmp	r0, #0
 800ba00:	9b08      	ldr	r3, [sp, #32]
 800ba02:	dc02      	bgt.n	800ba0a <_dtoa_r+0xaba>
 800ba04:	d1de      	bne.n	800b9c4 <_dtoa_r+0xa74>
 800ba06:	07da      	lsls	r2, r3, #31
 800ba08:	d5dc      	bpl.n	800b9c4 <_dtoa_r+0xa74>
 800ba0a:	2b39      	cmp	r3, #57	; 0x39
 800ba0c:	d1d8      	bne.n	800b9c0 <_dtoa_r+0xa70>
 800ba0e:	2339      	movs	r3, #57	; 0x39
 800ba10:	9a04      	ldr	r2, [sp, #16]
 800ba12:	7013      	strb	r3, [r2, #0]
 800ba14:	463b      	mov	r3, r7
 800ba16:	461f      	mov	r7, r3
 800ba18:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800ba1c:	3b01      	subs	r3, #1
 800ba1e:	2a39      	cmp	r2, #57	; 0x39
 800ba20:	d050      	beq.n	800bac4 <_dtoa_r+0xb74>
 800ba22:	3201      	adds	r2, #1
 800ba24:	701a      	strb	r2, [r3, #0]
 800ba26:	e747      	b.n	800b8b8 <_dtoa_r+0x968>
 800ba28:	2a00      	cmp	r2, #0
 800ba2a:	dd03      	ble.n	800ba34 <_dtoa_r+0xae4>
 800ba2c:	2b39      	cmp	r3, #57	; 0x39
 800ba2e:	d0ee      	beq.n	800ba0e <_dtoa_r+0xabe>
 800ba30:	3301      	adds	r3, #1
 800ba32:	e7c7      	b.n	800b9c4 <_dtoa_r+0xa74>
 800ba34:	9a08      	ldr	r2, [sp, #32]
 800ba36:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ba38:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ba3c:	428a      	cmp	r2, r1
 800ba3e:	d02a      	beq.n	800ba96 <_dtoa_r+0xb46>
 800ba40:	4659      	mov	r1, fp
 800ba42:	2300      	movs	r3, #0
 800ba44:	220a      	movs	r2, #10
 800ba46:	4628      	mov	r0, r5
 800ba48:	f000 fd40 	bl	800c4cc <__multadd>
 800ba4c:	45b0      	cmp	r8, r6
 800ba4e:	4683      	mov	fp, r0
 800ba50:	f04f 0300 	mov.w	r3, #0
 800ba54:	f04f 020a 	mov.w	r2, #10
 800ba58:	4641      	mov	r1, r8
 800ba5a:	4628      	mov	r0, r5
 800ba5c:	d107      	bne.n	800ba6e <_dtoa_r+0xb1e>
 800ba5e:	f000 fd35 	bl	800c4cc <__multadd>
 800ba62:	4680      	mov	r8, r0
 800ba64:	4606      	mov	r6, r0
 800ba66:	9b08      	ldr	r3, [sp, #32]
 800ba68:	3301      	adds	r3, #1
 800ba6a:	9308      	str	r3, [sp, #32]
 800ba6c:	e775      	b.n	800b95a <_dtoa_r+0xa0a>
 800ba6e:	f000 fd2d 	bl	800c4cc <__multadd>
 800ba72:	4631      	mov	r1, r6
 800ba74:	4680      	mov	r8, r0
 800ba76:	2300      	movs	r3, #0
 800ba78:	220a      	movs	r2, #10
 800ba7a:	4628      	mov	r0, r5
 800ba7c:	f000 fd26 	bl	800c4cc <__multadd>
 800ba80:	4606      	mov	r6, r0
 800ba82:	e7f0      	b.n	800ba66 <_dtoa_r+0xb16>
 800ba84:	f1b9 0f00 	cmp.w	r9, #0
 800ba88:	bfcc      	ite	gt
 800ba8a:	464f      	movgt	r7, r9
 800ba8c:	2701      	movle	r7, #1
 800ba8e:	f04f 0800 	mov.w	r8, #0
 800ba92:	9a03      	ldr	r2, [sp, #12]
 800ba94:	4417      	add	r7, r2
 800ba96:	4659      	mov	r1, fp
 800ba98:	2201      	movs	r2, #1
 800ba9a:	4628      	mov	r0, r5
 800ba9c:	9308      	str	r3, [sp, #32]
 800ba9e:	f000 ff0b 	bl	800c8b8 <__lshift>
 800baa2:	4621      	mov	r1, r4
 800baa4:	4683      	mov	fp, r0
 800baa6:	f000 ff77 	bl	800c998 <__mcmp>
 800baaa:	2800      	cmp	r0, #0
 800baac:	dcb2      	bgt.n	800ba14 <_dtoa_r+0xac4>
 800baae:	d102      	bne.n	800bab6 <_dtoa_r+0xb66>
 800bab0:	9b08      	ldr	r3, [sp, #32]
 800bab2:	07db      	lsls	r3, r3, #31
 800bab4:	d4ae      	bmi.n	800ba14 <_dtoa_r+0xac4>
 800bab6:	463b      	mov	r3, r7
 800bab8:	461f      	mov	r7, r3
 800baba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800babe:	2a30      	cmp	r2, #48	; 0x30
 800bac0:	d0fa      	beq.n	800bab8 <_dtoa_r+0xb68>
 800bac2:	e6f9      	b.n	800b8b8 <_dtoa_r+0x968>
 800bac4:	9a03      	ldr	r2, [sp, #12]
 800bac6:	429a      	cmp	r2, r3
 800bac8:	d1a5      	bne.n	800ba16 <_dtoa_r+0xac6>
 800baca:	2331      	movs	r3, #49	; 0x31
 800bacc:	f10a 0a01 	add.w	sl, sl, #1
 800bad0:	e779      	b.n	800b9c6 <_dtoa_r+0xa76>
 800bad2:	4b14      	ldr	r3, [pc, #80]	; (800bb24 <_dtoa_r+0xbd4>)
 800bad4:	f7ff baa8 	b.w	800b028 <_dtoa_r+0xd8>
 800bad8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bada:	2b00      	cmp	r3, #0
 800badc:	f47f aa81 	bne.w	800afe2 <_dtoa_r+0x92>
 800bae0:	4b11      	ldr	r3, [pc, #68]	; (800bb28 <_dtoa_r+0xbd8>)
 800bae2:	f7ff baa1 	b.w	800b028 <_dtoa_r+0xd8>
 800bae6:	f1b9 0f00 	cmp.w	r9, #0
 800baea:	dc03      	bgt.n	800baf4 <_dtoa_r+0xba4>
 800baec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800baee:	2b02      	cmp	r3, #2
 800baf0:	f73f aecb 	bgt.w	800b88a <_dtoa_r+0x93a>
 800baf4:	9f03      	ldr	r7, [sp, #12]
 800baf6:	4621      	mov	r1, r4
 800baf8:	4658      	mov	r0, fp
 800bafa:	f7ff f99b 	bl	800ae34 <quorem>
 800bafe:	9a03      	ldr	r2, [sp, #12]
 800bb00:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800bb04:	f807 3b01 	strb.w	r3, [r7], #1
 800bb08:	1aba      	subs	r2, r7, r2
 800bb0a:	4591      	cmp	r9, r2
 800bb0c:	ddba      	ble.n	800ba84 <_dtoa_r+0xb34>
 800bb0e:	4659      	mov	r1, fp
 800bb10:	2300      	movs	r3, #0
 800bb12:	220a      	movs	r2, #10
 800bb14:	4628      	mov	r0, r5
 800bb16:	f000 fcd9 	bl	800c4cc <__multadd>
 800bb1a:	4683      	mov	fp, r0
 800bb1c:	e7eb      	b.n	800baf6 <_dtoa_r+0xba6>
 800bb1e:	bf00      	nop
 800bb20:	0800dde8 	.word	0x0800dde8
 800bb24:	0800dbec 	.word	0x0800dbec
 800bb28:	0800dd69 	.word	0x0800dd69

0800bb2c <__sflush_r>:
 800bb2c:	898a      	ldrh	r2, [r1, #12]
 800bb2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb30:	4605      	mov	r5, r0
 800bb32:	0710      	lsls	r0, r2, #28
 800bb34:	460c      	mov	r4, r1
 800bb36:	d457      	bmi.n	800bbe8 <__sflush_r+0xbc>
 800bb38:	684b      	ldr	r3, [r1, #4]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	dc04      	bgt.n	800bb48 <__sflush_r+0x1c>
 800bb3e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	dc01      	bgt.n	800bb48 <__sflush_r+0x1c>
 800bb44:	2000      	movs	r0, #0
 800bb46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bb4a:	2e00      	cmp	r6, #0
 800bb4c:	d0fa      	beq.n	800bb44 <__sflush_r+0x18>
 800bb4e:	2300      	movs	r3, #0
 800bb50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bb54:	682f      	ldr	r7, [r5, #0]
 800bb56:	602b      	str	r3, [r5, #0]
 800bb58:	d032      	beq.n	800bbc0 <__sflush_r+0x94>
 800bb5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bb5c:	89a3      	ldrh	r3, [r4, #12]
 800bb5e:	075a      	lsls	r2, r3, #29
 800bb60:	d505      	bpl.n	800bb6e <__sflush_r+0x42>
 800bb62:	6863      	ldr	r3, [r4, #4]
 800bb64:	1ac0      	subs	r0, r0, r3
 800bb66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bb68:	b10b      	cbz	r3, 800bb6e <__sflush_r+0x42>
 800bb6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bb6c:	1ac0      	subs	r0, r0, r3
 800bb6e:	2300      	movs	r3, #0
 800bb70:	4602      	mov	r2, r0
 800bb72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bb74:	4628      	mov	r0, r5
 800bb76:	6a21      	ldr	r1, [r4, #32]
 800bb78:	47b0      	blx	r6
 800bb7a:	1c43      	adds	r3, r0, #1
 800bb7c:	89a3      	ldrh	r3, [r4, #12]
 800bb7e:	d106      	bne.n	800bb8e <__sflush_r+0x62>
 800bb80:	6829      	ldr	r1, [r5, #0]
 800bb82:	291d      	cmp	r1, #29
 800bb84:	d82c      	bhi.n	800bbe0 <__sflush_r+0xb4>
 800bb86:	4a29      	ldr	r2, [pc, #164]	; (800bc2c <__sflush_r+0x100>)
 800bb88:	40ca      	lsrs	r2, r1
 800bb8a:	07d6      	lsls	r6, r2, #31
 800bb8c:	d528      	bpl.n	800bbe0 <__sflush_r+0xb4>
 800bb8e:	2200      	movs	r2, #0
 800bb90:	6062      	str	r2, [r4, #4]
 800bb92:	6922      	ldr	r2, [r4, #16]
 800bb94:	04d9      	lsls	r1, r3, #19
 800bb96:	6022      	str	r2, [r4, #0]
 800bb98:	d504      	bpl.n	800bba4 <__sflush_r+0x78>
 800bb9a:	1c42      	adds	r2, r0, #1
 800bb9c:	d101      	bne.n	800bba2 <__sflush_r+0x76>
 800bb9e:	682b      	ldr	r3, [r5, #0]
 800bba0:	b903      	cbnz	r3, 800bba4 <__sflush_r+0x78>
 800bba2:	6560      	str	r0, [r4, #84]	; 0x54
 800bba4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bba6:	602f      	str	r7, [r5, #0]
 800bba8:	2900      	cmp	r1, #0
 800bbaa:	d0cb      	beq.n	800bb44 <__sflush_r+0x18>
 800bbac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bbb0:	4299      	cmp	r1, r3
 800bbb2:	d002      	beq.n	800bbba <__sflush_r+0x8e>
 800bbb4:	4628      	mov	r0, r5
 800bbb6:	f001 f8f3 	bl	800cda0 <_free_r>
 800bbba:	2000      	movs	r0, #0
 800bbbc:	6360      	str	r0, [r4, #52]	; 0x34
 800bbbe:	e7c2      	b.n	800bb46 <__sflush_r+0x1a>
 800bbc0:	6a21      	ldr	r1, [r4, #32]
 800bbc2:	2301      	movs	r3, #1
 800bbc4:	4628      	mov	r0, r5
 800bbc6:	47b0      	blx	r6
 800bbc8:	1c41      	adds	r1, r0, #1
 800bbca:	d1c7      	bne.n	800bb5c <__sflush_r+0x30>
 800bbcc:	682b      	ldr	r3, [r5, #0]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d0c4      	beq.n	800bb5c <__sflush_r+0x30>
 800bbd2:	2b1d      	cmp	r3, #29
 800bbd4:	d001      	beq.n	800bbda <__sflush_r+0xae>
 800bbd6:	2b16      	cmp	r3, #22
 800bbd8:	d101      	bne.n	800bbde <__sflush_r+0xb2>
 800bbda:	602f      	str	r7, [r5, #0]
 800bbdc:	e7b2      	b.n	800bb44 <__sflush_r+0x18>
 800bbde:	89a3      	ldrh	r3, [r4, #12]
 800bbe0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbe4:	81a3      	strh	r3, [r4, #12]
 800bbe6:	e7ae      	b.n	800bb46 <__sflush_r+0x1a>
 800bbe8:	690f      	ldr	r7, [r1, #16]
 800bbea:	2f00      	cmp	r7, #0
 800bbec:	d0aa      	beq.n	800bb44 <__sflush_r+0x18>
 800bbee:	0793      	lsls	r3, r2, #30
 800bbf0:	bf18      	it	ne
 800bbf2:	2300      	movne	r3, #0
 800bbf4:	680e      	ldr	r6, [r1, #0]
 800bbf6:	bf08      	it	eq
 800bbf8:	694b      	ldreq	r3, [r1, #20]
 800bbfa:	1bf6      	subs	r6, r6, r7
 800bbfc:	600f      	str	r7, [r1, #0]
 800bbfe:	608b      	str	r3, [r1, #8]
 800bc00:	2e00      	cmp	r6, #0
 800bc02:	dd9f      	ble.n	800bb44 <__sflush_r+0x18>
 800bc04:	4633      	mov	r3, r6
 800bc06:	463a      	mov	r2, r7
 800bc08:	4628      	mov	r0, r5
 800bc0a:	6a21      	ldr	r1, [r4, #32]
 800bc0c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800bc10:	47e0      	blx	ip
 800bc12:	2800      	cmp	r0, #0
 800bc14:	dc06      	bgt.n	800bc24 <__sflush_r+0xf8>
 800bc16:	89a3      	ldrh	r3, [r4, #12]
 800bc18:	f04f 30ff 	mov.w	r0, #4294967295
 800bc1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc20:	81a3      	strh	r3, [r4, #12]
 800bc22:	e790      	b.n	800bb46 <__sflush_r+0x1a>
 800bc24:	4407      	add	r7, r0
 800bc26:	1a36      	subs	r6, r6, r0
 800bc28:	e7ea      	b.n	800bc00 <__sflush_r+0xd4>
 800bc2a:	bf00      	nop
 800bc2c:	20400001 	.word	0x20400001

0800bc30 <_fflush_r>:
 800bc30:	b538      	push	{r3, r4, r5, lr}
 800bc32:	690b      	ldr	r3, [r1, #16]
 800bc34:	4605      	mov	r5, r0
 800bc36:	460c      	mov	r4, r1
 800bc38:	b913      	cbnz	r3, 800bc40 <_fflush_r+0x10>
 800bc3a:	2500      	movs	r5, #0
 800bc3c:	4628      	mov	r0, r5
 800bc3e:	bd38      	pop	{r3, r4, r5, pc}
 800bc40:	b118      	cbz	r0, 800bc4a <_fflush_r+0x1a>
 800bc42:	6983      	ldr	r3, [r0, #24]
 800bc44:	b90b      	cbnz	r3, 800bc4a <_fflush_r+0x1a>
 800bc46:	f7fd f987 	bl	8008f58 <__sinit>
 800bc4a:	4b14      	ldr	r3, [pc, #80]	; (800bc9c <_fflush_r+0x6c>)
 800bc4c:	429c      	cmp	r4, r3
 800bc4e:	d11b      	bne.n	800bc88 <_fflush_r+0x58>
 800bc50:	686c      	ldr	r4, [r5, #4]
 800bc52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d0ef      	beq.n	800bc3a <_fflush_r+0xa>
 800bc5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bc5c:	07d0      	lsls	r0, r2, #31
 800bc5e:	d404      	bmi.n	800bc6a <_fflush_r+0x3a>
 800bc60:	0599      	lsls	r1, r3, #22
 800bc62:	d402      	bmi.n	800bc6a <_fflush_r+0x3a>
 800bc64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc66:	f7fd fa3a 	bl	80090de <__retarget_lock_acquire_recursive>
 800bc6a:	4628      	mov	r0, r5
 800bc6c:	4621      	mov	r1, r4
 800bc6e:	f7ff ff5d 	bl	800bb2c <__sflush_r>
 800bc72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bc74:	4605      	mov	r5, r0
 800bc76:	07da      	lsls	r2, r3, #31
 800bc78:	d4e0      	bmi.n	800bc3c <_fflush_r+0xc>
 800bc7a:	89a3      	ldrh	r3, [r4, #12]
 800bc7c:	059b      	lsls	r3, r3, #22
 800bc7e:	d4dd      	bmi.n	800bc3c <_fflush_r+0xc>
 800bc80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc82:	f7fd fa2d 	bl	80090e0 <__retarget_lock_release_recursive>
 800bc86:	e7d9      	b.n	800bc3c <_fflush_r+0xc>
 800bc88:	4b05      	ldr	r3, [pc, #20]	; (800bca0 <_fflush_r+0x70>)
 800bc8a:	429c      	cmp	r4, r3
 800bc8c:	d101      	bne.n	800bc92 <_fflush_r+0x62>
 800bc8e:	68ac      	ldr	r4, [r5, #8]
 800bc90:	e7df      	b.n	800bc52 <_fflush_r+0x22>
 800bc92:	4b04      	ldr	r3, [pc, #16]	; (800bca4 <_fflush_r+0x74>)
 800bc94:	429c      	cmp	r4, r3
 800bc96:	bf08      	it	eq
 800bc98:	68ec      	ldreq	r4, [r5, #12]
 800bc9a:	e7da      	b.n	800bc52 <_fflush_r+0x22>
 800bc9c:	0800db98 	.word	0x0800db98
 800bca0:	0800dbb8 	.word	0x0800dbb8
 800bca4:	0800db78 	.word	0x0800db78

0800bca8 <rshift>:
 800bca8:	6903      	ldr	r3, [r0, #16]
 800bcaa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bcae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bcb2:	f100 0414 	add.w	r4, r0, #20
 800bcb6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bcba:	dd46      	ble.n	800bd4a <rshift+0xa2>
 800bcbc:	f011 011f 	ands.w	r1, r1, #31
 800bcc0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bcc4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bcc8:	d10c      	bne.n	800bce4 <rshift+0x3c>
 800bcca:	4629      	mov	r1, r5
 800bccc:	f100 0710 	add.w	r7, r0, #16
 800bcd0:	42b1      	cmp	r1, r6
 800bcd2:	d335      	bcc.n	800bd40 <rshift+0x98>
 800bcd4:	1a9b      	subs	r3, r3, r2
 800bcd6:	009b      	lsls	r3, r3, #2
 800bcd8:	1eea      	subs	r2, r5, #3
 800bcda:	4296      	cmp	r6, r2
 800bcdc:	bf38      	it	cc
 800bcde:	2300      	movcc	r3, #0
 800bce0:	4423      	add	r3, r4
 800bce2:	e015      	b.n	800bd10 <rshift+0x68>
 800bce4:	46a1      	mov	r9, r4
 800bce6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bcea:	f1c1 0820 	rsb	r8, r1, #32
 800bcee:	40cf      	lsrs	r7, r1
 800bcf0:	f105 0e04 	add.w	lr, r5, #4
 800bcf4:	4576      	cmp	r6, lr
 800bcf6:	46f4      	mov	ip, lr
 800bcf8:	d816      	bhi.n	800bd28 <rshift+0x80>
 800bcfa:	1a9a      	subs	r2, r3, r2
 800bcfc:	0092      	lsls	r2, r2, #2
 800bcfe:	3a04      	subs	r2, #4
 800bd00:	3501      	adds	r5, #1
 800bd02:	42ae      	cmp	r6, r5
 800bd04:	bf38      	it	cc
 800bd06:	2200      	movcc	r2, #0
 800bd08:	18a3      	adds	r3, r4, r2
 800bd0a:	50a7      	str	r7, [r4, r2]
 800bd0c:	b107      	cbz	r7, 800bd10 <rshift+0x68>
 800bd0e:	3304      	adds	r3, #4
 800bd10:	42a3      	cmp	r3, r4
 800bd12:	eba3 0204 	sub.w	r2, r3, r4
 800bd16:	bf08      	it	eq
 800bd18:	2300      	moveq	r3, #0
 800bd1a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bd1e:	6102      	str	r2, [r0, #16]
 800bd20:	bf08      	it	eq
 800bd22:	6143      	streq	r3, [r0, #20]
 800bd24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd28:	f8dc c000 	ldr.w	ip, [ip]
 800bd2c:	fa0c fc08 	lsl.w	ip, ip, r8
 800bd30:	ea4c 0707 	orr.w	r7, ip, r7
 800bd34:	f849 7b04 	str.w	r7, [r9], #4
 800bd38:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bd3c:	40cf      	lsrs	r7, r1
 800bd3e:	e7d9      	b.n	800bcf4 <rshift+0x4c>
 800bd40:	f851 cb04 	ldr.w	ip, [r1], #4
 800bd44:	f847 cf04 	str.w	ip, [r7, #4]!
 800bd48:	e7c2      	b.n	800bcd0 <rshift+0x28>
 800bd4a:	4623      	mov	r3, r4
 800bd4c:	e7e0      	b.n	800bd10 <rshift+0x68>

0800bd4e <__hexdig_fun>:
 800bd4e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800bd52:	2b09      	cmp	r3, #9
 800bd54:	d802      	bhi.n	800bd5c <__hexdig_fun+0xe>
 800bd56:	3820      	subs	r0, #32
 800bd58:	b2c0      	uxtb	r0, r0
 800bd5a:	4770      	bx	lr
 800bd5c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800bd60:	2b05      	cmp	r3, #5
 800bd62:	d801      	bhi.n	800bd68 <__hexdig_fun+0x1a>
 800bd64:	3847      	subs	r0, #71	; 0x47
 800bd66:	e7f7      	b.n	800bd58 <__hexdig_fun+0xa>
 800bd68:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800bd6c:	2b05      	cmp	r3, #5
 800bd6e:	d801      	bhi.n	800bd74 <__hexdig_fun+0x26>
 800bd70:	3827      	subs	r0, #39	; 0x27
 800bd72:	e7f1      	b.n	800bd58 <__hexdig_fun+0xa>
 800bd74:	2000      	movs	r0, #0
 800bd76:	4770      	bx	lr

0800bd78 <__gethex>:
 800bd78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd7c:	b08b      	sub	sp, #44	; 0x2c
 800bd7e:	9305      	str	r3, [sp, #20]
 800bd80:	4bb2      	ldr	r3, [pc, #712]	; (800c04c <__gethex+0x2d4>)
 800bd82:	9002      	str	r0, [sp, #8]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	468b      	mov	fp, r1
 800bd88:	4618      	mov	r0, r3
 800bd8a:	4690      	mov	r8, r2
 800bd8c:	9303      	str	r3, [sp, #12]
 800bd8e:	f7f4 f9df 	bl	8000150 <strlen>
 800bd92:	4682      	mov	sl, r0
 800bd94:	9b03      	ldr	r3, [sp, #12]
 800bd96:	f8db 2000 	ldr.w	r2, [fp]
 800bd9a:	4403      	add	r3, r0
 800bd9c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800bda0:	9306      	str	r3, [sp, #24]
 800bda2:	1c93      	adds	r3, r2, #2
 800bda4:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800bda8:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800bdac:	32fe      	adds	r2, #254	; 0xfe
 800bdae:	18d1      	adds	r1, r2, r3
 800bdb0:	461f      	mov	r7, r3
 800bdb2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bdb6:	9101      	str	r1, [sp, #4]
 800bdb8:	2830      	cmp	r0, #48	; 0x30
 800bdba:	d0f8      	beq.n	800bdae <__gethex+0x36>
 800bdbc:	f7ff ffc7 	bl	800bd4e <__hexdig_fun>
 800bdc0:	4604      	mov	r4, r0
 800bdc2:	2800      	cmp	r0, #0
 800bdc4:	d13a      	bne.n	800be3c <__gethex+0xc4>
 800bdc6:	4652      	mov	r2, sl
 800bdc8:	4638      	mov	r0, r7
 800bdca:	9903      	ldr	r1, [sp, #12]
 800bdcc:	f001 f9a4 	bl	800d118 <strncmp>
 800bdd0:	4605      	mov	r5, r0
 800bdd2:	2800      	cmp	r0, #0
 800bdd4:	d166      	bne.n	800bea4 <__gethex+0x12c>
 800bdd6:	f817 000a 	ldrb.w	r0, [r7, sl]
 800bdda:	eb07 060a 	add.w	r6, r7, sl
 800bdde:	f7ff ffb6 	bl	800bd4e <__hexdig_fun>
 800bde2:	2800      	cmp	r0, #0
 800bde4:	d060      	beq.n	800bea8 <__gethex+0x130>
 800bde6:	4633      	mov	r3, r6
 800bde8:	7818      	ldrb	r0, [r3, #0]
 800bdea:	461f      	mov	r7, r3
 800bdec:	2830      	cmp	r0, #48	; 0x30
 800bdee:	f103 0301 	add.w	r3, r3, #1
 800bdf2:	d0f9      	beq.n	800bde8 <__gethex+0x70>
 800bdf4:	f7ff ffab 	bl	800bd4e <__hexdig_fun>
 800bdf8:	2301      	movs	r3, #1
 800bdfa:	fab0 f480 	clz	r4, r0
 800bdfe:	4635      	mov	r5, r6
 800be00:	0964      	lsrs	r4, r4, #5
 800be02:	9301      	str	r3, [sp, #4]
 800be04:	463a      	mov	r2, r7
 800be06:	4616      	mov	r6, r2
 800be08:	7830      	ldrb	r0, [r6, #0]
 800be0a:	3201      	adds	r2, #1
 800be0c:	f7ff ff9f 	bl	800bd4e <__hexdig_fun>
 800be10:	2800      	cmp	r0, #0
 800be12:	d1f8      	bne.n	800be06 <__gethex+0x8e>
 800be14:	4652      	mov	r2, sl
 800be16:	4630      	mov	r0, r6
 800be18:	9903      	ldr	r1, [sp, #12]
 800be1a:	f001 f97d 	bl	800d118 <strncmp>
 800be1e:	b980      	cbnz	r0, 800be42 <__gethex+0xca>
 800be20:	b94d      	cbnz	r5, 800be36 <__gethex+0xbe>
 800be22:	eb06 050a 	add.w	r5, r6, sl
 800be26:	462a      	mov	r2, r5
 800be28:	4616      	mov	r6, r2
 800be2a:	7830      	ldrb	r0, [r6, #0]
 800be2c:	3201      	adds	r2, #1
 800be2e:	f7ff ff8e 	bl	800bd4e <__hexdig_fun>
 800be32:	2800      	cmp	r0, #0
 800be34:	d1f8      	bne.n	800be28 <__gethex+0xb0>
 800be36:	1bad      	subs	r5, r5, r6
 800be38:	00ad      	lsls	r5, r5, #2
 800be3a:	e004      	b.n	800be46 <__gethex+0xce>
 800be3c:	2400      	movs	r4, #0
 800be3e:	4625      	mov	r5, r4
 800be40:	e7e0      	b.n	800be04 <__gethex+0x8c>
 800be42:	2d00      	cmp	r5, #0
 800be44:	d1f7      	bne.n	800be36 <__gethex+0xbe>
 800be46:	7833      	ldrb	r3, [r6, #0]
 800be48:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800be4c:	2b50      	cmp	r3, #80	; 0x50
 800be4e:	d139      	bne.n	800bec4 <__gethex+0x14c>
 800be50:	7873      	ldrb	r3, [r6, #1]
 800be52:	2b2b      	cmp	r3, #43	; 0x2b
 800be54:	d02a      	beq.n	800beac <__gethex+0x134>
 800be56:	2b2d      	cmp	r3, #45	; 0x2d
 800be58:	d02c      	beq.n	800beb4 <__gethex+0x13c>
 800be5a:	f04f 0900 	mov.w	r9, #0
 800be5e:	1c71      	adds	r1, r6, #1
 800be60:	7808      	ldrb	r0, [r1, #0]
 800be62:	f7ff ff74 	bl	800bd4e <__hexdig_fun>
 800be66:	1e43      	subs	r3, r0, #1
 800be68:	b2db      	uxtb	r3, r3
 800be6a:	2b18      	cmp	r3, #24
 800be6c:	d82a      	bhi.n	800bec4 <__gethex+0x14c>
 800be6e:	f1a0 0210 	sub.w	r2, r0, #16
 800be72:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800be76:	f7ff ff6a 	bl	800bd4e <__hexdig_fun>
 800be7a:	1e43      	subs	r3, r0, #1
 800be7c:	b2db      	uxtb	r3, r3
 800be7e:	2b18      	cmp	r3, #24
 800be80:	d91b      	bls.n	800beba <__gethex+0x142>
 800be82:	f1b9 0f00 	cmp.w	r9, #0
 800be86:	d000      	beq.n	800be8a <__gethex+0x112>
 800be88:	4252      	negs	r2, r2
 800be8a:	4415      	add	r5, r2
 800be8c:	f8cb 1000 	str.w	r1, [fp]
 800be90:	b1d4      	cbz	r4, 800bec8 <__gethex+0x150>
 800be92:	9b01      	ldr	r3, [sp, #4]
 800be94:	2b00      	cmp	r3, #0
 800be96:	bf14      	ite	ne
 800be98:	2700      	movne	r7, #0
 800be9a:	2706      	moveq	r7, #6
 800be9c:	4638      	mov	r0, r7
 800be9e:	b00b      	add	sp, #44	; 0x2c
 800bea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bea4:	463e      	mov	r6, r7
 800bea6:	4625      	mov	r5, r4
 800bea8:	2401      	movs	r4, #1
 800beaa:	e7cc      	b.n	800be46 <__gethex+0xce>
 800beac:	f04f 0900 	mov.w	r9, #0
 800beb0:	1cb1      	adds	r1, r6, #2
 800beb2:	e7d5      	b.n	800be60 <__gethex+0xe8>
 800beb4:	f04f 0901 	mov.w	r9, #1
 800beb8:	e7fa      	b.n	800beb0 <__gethex+0x138>
 800beba:	230a      	movs	r3, #10
 800bebc:	fb03 0202 	mla	r2, r3, r2, r0
 800bec0:	3a10      	subs	r2, #16
 800bec2:	e7d6      	b.n	800be72 <__gethex+0xfa>
 800bec4:	4631      	mov	r1, r6
 800bec6:	e7e1      	b.n	800be8c <__gethex+0x114>
 800bec8:	4621      	mov	r1, r4
 800beca:	1bf3      	subs	r3, r6, r7
 800becc:	3b01      	subs	r3, #1
 800bece:	2b07      	cmp	r3, #7
 800bed0:	dc0a      	bgt.n	800bee8 <__gethex+0x170>
 800bed2:	9802      	ldr	r0, [sp, #8]
 800bed4:	f000 fa98 	bl	800c408 <_Balloc>
 800bed8:	4604      	mov	r4, r0
 800beda:	b940      	cbnz	r0, 800beee <__gethex+0x176>
 800bedc:	4602      	mov	r2, r0
 800bede:	21de      	movs	r1, #222	; 0xde
 800bee0:	4b5b      	ldr	r3, [pc, #364]	; (800c050 <__gethex+0x2d8>)
 800bee2:	485c      	ldr	r0, [pc, #368]	; (800c054 <__gethex+0x2dc>)
 800bee4:	f001 f93a 	bl	800d15c <__assert_func>
 800bee8:	3101      	adds	r1, #1
 800beea:	105b      	asrs	r3, r3, #1
 800beec:	e7ef      	b.n	800bece <__gethex+0x156>
 800beee:	f04f 0b00 	mov.w	fp, #0
 800bef2:	f100 0914 	add.w	r9, r0, #20
 800bef6:	f1ca 0301 	rsb	r3, sl, #1
 800befa:	f8cd 9010 	str.w	r9, [sp, #16]
 800befe:	f8cd b004 	str.w	fp, [sp, #4]
 800bf02:	9308      	str	r3, [sp, #32]
 800bf04:	42b7      	cmp	r7, r6
 800bf06:	d33f      	bcc.n	800bf88 <__gethex+0x210>
 800bf08:	9f04      	ldr	r7, [sp, #16]
 800bf0a:	9b01      	ldr	r3, [sp, #4]
 800bf0c:	f847 3b04 	str.w	r3, [r7], #4
 800bf10:	eba7 0709 	sub.w	r7, r7, r9
 800bf14:	10bf      	asrs	r7, r7, #2
 800bf16:	6127      	str	r7, [r4, #16]
 800bf18:	4618      	mov	r0, r3
 800bf1a:	f000 fb67 	bl	800c5ec <__hi0bits>
 800bf1e:	017f      	lsls	r7, r7, #5
 800bf20:	f8d8 6000 	ldr.w	r6, [r8]
 800bf24:	1a3f      	subs	r7, r7, r0
 800bf26:	42b7      	cmp	r7, r6
 800bf28:	dd62      	ble.n	800bff0 <__gethex+0x278>
 800bf2a:	1bbf      	subs	r7, r7, r6
 800bf2c:	4639      	mov	r1, r7
 800bf2e:	4620      	mov	r0, r4
 800bf30:	f000 ff01 	bl	800cd36 <__any_on>
 800bf34:	4682      	mov	sl, r0
 800bf36:	b1a8      	cbz	r0, 800bf64 <__gethex+0x1ec>
 800bf38:	f04f 0a01 	mov.w	sl, #1
 800bf3c:	1e7b      	subs	r3, r7, #1
 800bf3e:	1159      	asrs	r1, r3, #5
 800bf40:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800bf44:	f003 021f 	and.w	r2, r3, #31
 800bf48:	fa0a f202 	lsl.w	r2, sl, r2
 800bf4c:	420a      	tst	r2, r1
 800bf4e:	d009      	beq.n	800bf64 <__gethex+0x1ec>
 800bf50:	4553      	cmp	r3, sl
 800bf52:	dd05      	ble.n	800bf60 <__gethex+0x1e8>
 800bf54:	4620      	mov	r0, r4
 800bf56:	1eb9      	subs	r1, r7, #2
 800bf58:	f000 feed 	bl	800cd36 <__any_on>
 800bf5c:	2800      	cmp	r0, #0
 800bf5e:	d144      	bne.n	800bfea <__gethex+0x272>
 800bf60:	f04f 0a02 	mov.w	sl, #2
 800bf64:	4639      	mov	r1, r7
 800bf66:	4620      	mov	r0, r4
 800bf68:	f7ff fe9e 	bl	800bca8 <rshift>
 800bf6c:	443d      	add	r5, r7
 800bf6e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bf72:	42ab      	cmp	r3, r5
 800bf74:	da4a      	bge.n	800c00c <__gethex+0x294>
 800bf76:	4621      	mov	r1, r4
 800bf78:	9802      	ldr	r0, [sp, #8]
 800bf7a:	f000 fa85 	bl	800c488 <_Bfree>
 800bf7e:	2300      	movs	r3, #0
 800bf80:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bf82:	27a3      	movs	r7, #163	; 0xa3
 800bf84:	6013      	str	r3, [r2, #0]
 800bf86:	e789      	b.n	800be9c <__gethex+0x124>
 800bf88:	1e73      	subs	r3, r6, #1
 800bf8a:	9a06      	ldr	r2, [sp, #24]
 800bf8c:	9307      	str	r3, [sp, #28]
 800bf8e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bf92:	4293      	cmp	r3, r2
 800bf94:	d019      	beq.n	800bfca <__gethex+0x252>
 800bf96:	f1bb 0f20 	cmp.w	fp, #32
 800bf9a:	d107      	bne.n	800bfac <__gethex+0x234>
 800bf9c:	9b04      	ldr	r3, [sp, #16]
 800bf9e:	9a01      	ldr	r2, [sp, #4]
 800bfa0:	f843 2b04 	str.w	r2, [r3], #4
 800bfa4:	9304      	str	r3, [sp, #16]
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	469b      	mov	fp, r3
 800bfaa:	9301      	str	r3, [sp, #4]
 800bfac:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800bfb0:	f7ff fecd 	bl	800bd4e <__hexdig_fun>
 800bfb4:	9b01      	ldr	r3, [sp, #4]
 800bfb6:	f000 000f 	and.w	r0, r0, #15
 800bfba:	fa00 f00b 	lsl.w	r0, r0, fp
 800bfbe:	4303      	orrs	r3, r0
 800bfc0:	9301      	str	r3, [sp, #4]
 800bfc2:	f10b 0b04 	add.w	fp, fp, #4
 800bfc6:	9b07      	ldr	r3, [sp, #28]
 800bfc8:	e00d      	b.n	800bfe6 <__gethex+0x26e>
 800bfca:	9a08      	ldr	r2, [sp, #32]
 800bfcc:	1e73      	subs	r3, r6, #1
 800bfce:	4413      	add	r3, r2
 800bfd0:	42bb      	cmp	r3, r7
 800bfd2:	d3e0      	bcc.n	800bf96 <__gethex+0x21e>
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	4652      	mov	r2, sl
 800bfd8:	9903      	ldr	r1, [sp, #12]
 800bfda:	9309      	str	r3, [sp, #36]	; 0x24
 800bfdc:	f001 f89c 	bl	800d118 <strncmp>
 800bfe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfe2:	2800      	cmp	r0, #0
 800bfe4:	d1d7      	bne.n	800bf96 <__gethex+0x21e>
 800bfe6:	461e      	mov	r6, r3
 800bfe8:	e78c      	b.n	800bf04 <__gethex+0x18c>
 800bfea:	f04f 0a03 	mov.w	sl, #3
 800bfee:	e7b9      	b.n	800bf64 <__gethex+0x1ec>
 800bff0:	da09      	bge.n	800c006 <__gethex+0x28e>
 800bff2:	1bf7      	subs	r7, r6, r7
 800bff4:	4621      	mov	r1, r4
 800bff6:	463a      	mov	r2, r7
 800bff8:	9802      	ldr	r0, [sp, #8]
 800bffa:	f000 fc5d 	bl	800c8b8 <__lshift>
 800bffe:	4604      	mov	r4, r0
 800c000:	1bed      	subs	r5, r5, r7
 800c002:	f100 0914 	add.w	r9, r0, #20
 800c006:	f04f 0a00 	mov.w	sl, #0
 800c00a:	e7b0      	b.n	800bf6e <__gethex+0x1f6>
 800c00c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c010:	42a8      	cmp	r0, r5
 800c012:	dd72      	ble.n	800c0fa <__gethex+0x382>
 800c014:	1b45      	subs	r5, r0, r5
 800c016:	42ae      	cmp	r6, r5
 800c018:	dc35      	bgt.n	800c086 <__gethex+0x30e>
 800c01a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c01e:	2b02      	cmp	r3, #2
 800c020:	d029      	beq.n	800c076 <__gethex+0x2fe>
 800c022:	2b03      	cmp	r3, #3
 800c024:	d02b      	beq.n	800c07e <__gethex+0x306>
 800c026:	2b01      	cmp	r3, #1
 800c028:	d11c      	bne.n	800c064 <__gethex+0x2ec>
 800c02a:	42ae      	cmp	r6, r5
 800c02c:	d11a      	bne.n	800c064 <__gethex+0x2ec>
 800c02e:	2e01      	cmp	r6, #1
 800c030:	d112      	bne.n	800c058 <__gethex+0x2e0>
 800c032:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c036:	9a05      	ldr	r2, [sp, #20]
 800c038:	2762      	movs	r7, #98	; 0x62
 800c03a:	6013      	str	r3, [r2, #0]
 800c03c:	2301      	movs	r3, #1
 800c03e:	6123      	str	r3, [r4, #16]
 800c040:	f8c9 3000 	str.w	r3, [r9]
 800c044:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c046:	601c      	str	r4, [r3, #0]
 800c048:	e728      	b.n	800be9c <__gethex+0x124>
 800c04a:	bf00      	nop
 800c04c:	0800de60 	.word	0x0800de60
 800c050:	0800dde8 	.word	0x0800dde8
 800c054:	0800ddf9 	.word	0x0800ddf9
 800c058:	4620      	mov	r0, r4
 800c05a:	1e71      	subs	r1, r6, #1
 800c05c:	f000 fe6b 	bl	800cd36 <__any_on>
 800c060:	2800      	cmp	r0, #0
 800c062:	d1e6      	bne.n	800c032 <__gethex+0x2ba>
 800c064:	4621      	mov	r1, r4
 800c066:	9802      	ldr	r0, [sp, #8]
 800c068:	f000 fa0e 	bl	800c488 <_Bfree>
 800c06c:	2300      	movs	r3, #0
 800c06e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c070:	2750      	movs	r7, #80	; 0x50
 800c072:	6013      	str	r3, [r2, #0]
 800c074:	e712      	b.n	800be9c <__gethex+0x124>
 800c076:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d1f3      	bne.n	800c064 <__gethex+0x2ec>
 800c07c:	e7d9      	b.n	800c032 <__gethex+0x2ba>
 800c07e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c080:	2b00      	cmp	r3, #0
 800c082:	d1d6      	bne.n	800c032 <__gethex+0x2ba>
 800c084:	e7ee      	b.n	800c064 <__gethex+0x2ec>
 800c086:	1e6f      	subs	r7, r5, #1
 800c088:	f1ba 0f00 	cmp.w	sl, #0
 800c08c:	d132      	bne.n	800c0f4 <__gethex+0x37c>
 800c08e:	b127      	cbz	r7, 800c09a <__gethex+0x322>
 800c090:	4639      	mov	r1, r7
 800c092:	4620      	mov	r0, r4
 800c094:	f000 fe4f 	bl	800cd36 <__any_on>
 800c098:	4682      	mov	sl, r0
 800c09a:	2101      	movs	r1, #1
 800c09c:	117b      	asrs	r3, r7, #5
 800c09e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c0a2:	f007 071f 	and.w	r7, r7, #31
 800c0a6:	fa01 f707 	lsl.w	r7, r1, r7
 800c0aa:	421f      	tst	r7, r3
 800c0ac:	f04f 0702 	mov.w	r7, #2
 800c0b0:	4629      	mov	r1, r5
 800c0b2:	4620      	mov	r0, r4
 800c0b4:	bf18      	it	ne
 800c0b6:	f04a 0a02 	orrne.w	sl, sl, #2
 800c0ba:	1b76      	subs	r6, r6, r5
 800c0bc:	f7ff fdf4 	bl	800bca8 <rshift>
 800c0c0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c0c4:	f1ba 0f00 	cmp.w	sl, #0
 800c0c8:	d048      	beq.n	800c15c <__gethex+0x3e4>
 800c0ca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c0ce:	2b02      	cmp	r3, #2
 800c0d0:	d015      	beq.n	800c0fe <__gethex+0x386>
 800c0d2:	2b03      	cmp	r3, #3
 800c0d4:	d017      	beq.n	800c106 <__gethex+0x38e>
 800c0d6:	2b01      	cmp	r3, #1
 800c0d8:	d109      	bne.n	800c0ee <__gethex+0x376>
 800c0da:	f01a 0f02 	tst.w	sl, #2
 800c0de:	d006      	beq.n	800c0ee <__gethex+0x376>
 800c0e0:	f8d9 0000 	ldr.w	r0, [r9]
 800c0e4:	ea4a 0a00 	orr.w	sl, sl, r0
 800c0e8:	f01a 0f01 	tst.w	sl, #1
 800c0ec:	d10e      	bne.n	800c10c <__gethex+0x394>
 800c0ee:	f047 0710 	orr.w	r7, r7, #16
 800c0f2:	e033      	b.n	800c15c <__gethex+0x3e4>
 800c0f4:	f04f 0a01 	mov.w	sl, #1
 800c0f8:	e7cf      	b.n	800c09a <__gethex+0x322>
 800c0fa:	2701      	movs	r7, #1
 800c0fc:	e7e2      	b.n	800c0c4 <__gethex+0x34c>
 800c0fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c100:	f1c3 0301 	rsb	r3, r3, #1
 800c104:	9315      	str	r3, [sp, #84]	; 0x54
 800c106:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d0f0      	beq.n	800c0ee <__gethex+0x376>
 800c10c:	f04f 0c00 	mov.w	ip, #0
 800c110:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c114:	f104 0314 	add.w	r3, r4, #20
 800c118:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c11c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c120:	4618      	mov	r0, r3
 800c122:	f853 2b04 	ldr.w	r2, [r3], #4
 800c126:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c12a:	d01c      	beq.n	800c166 <__gethex+0x3ee>
 800c12c:	3201      	adds	r2, #1
 800c12e:	6002      	str	r2, [r0, #0]
 800c130:	2f02      	cmp	r7, #2
 800c132:	f104 0314 	add.w	r3, r4, #20
 800c136:	d13d      	bne.n	800c1b4 <__gethex+0x43c>
 800c138:	f8d8 2000 	ldr.w	r2, [r8]
 800c13c:	3a01      	subs	r2, #1
 800c13e:	42b2      	cmp	r2, r6
 800c140:	d10a      	bne.n	800c158 <__gethex+0x3e0>
 800c142:	2201      	movs	r2, #1
 800c144:	1171      	asrs	r1, r6, #5
 800c146:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c14a:	f006 061f 	and.w	r6, r6, #31
 800c14e:	fa02 f606 	lsl.w	r6, r2, r6
 800c152:	421e      	tst	r6, r3
 800c154:	bf18      	it	ne
 800c156:	4617      	movne	r7, r2
 800c158:	f047 0720 	orr.w	r7, r7, #32
 800c15c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c15e:	601c      	str	r4, [r3, #0]
 800c160:	9b05      	ldr	r3, [sp, #20]
 800c162:	601d      	str	r5, [r3, #0]
 800c164:	e69a      	b.n	800be9c <__gethex+0x124>
 800c166:	4299      	cmp	r1, r3
 800c168:	f843 cc04 	str.w	ip, [r3, #-4]
 800c16c:	d8d8      	bhi.n	800c120 <__gethex+0x3a8>
 800c16e:	68a3      	ldr	r3, [r4, #8]
 800c170:	459b      	cmp	fp, r3
 800c172:	db17      	blt.n	800c1a4 <__gethex+0x42c>
 800c174:	6861      	ldr	r1, [r4, #4]
 800c176:	9802      	ldr	r0, [sp, #8]
 800c178:	3101      	adds	r1, #1
 800c17a:	f000 f945 	bl	800c408 <_Balloc>
 800c17e:	4681      	mov	r9, r0
 800c180:	b918      	cbnz	r0, 800c18a <__gethex+0x412>
 800c182:	4602      	mov	r2, r0
 800c184:	2184      	movs	r1, #132	; 0x84
 800c186:	4b19      	ldr	r3, [pc, #100]	; (800c1ec <__gethex+0x474>)
 800c188:	e6ab      	b.n	800bee2 <__gethex+0x16a>
 800c18a:	6922      	ldr	r2, [r4, #16]
 800c18c:	f104 010c 	add.w	r1, r4, #12
 800c190:	3202      	adds	r2, #2
 800c192:	0092      	lsls	r2, r2, #2
 800c194:	300c      	adds	r0, #12
 800c196:	f7fc ffa4 	bl	80090e2 <memcpy>
 800c19a:	4621      	mov	r1, r4
 800c19c:	9802      	ldr	r0, [sp, #8]
 800c19e:	f000 f973 	bl	800c488 <_Bfree>
 800c1a2:	464c      	mov	r4, r9
 800c1a4:	6923      	ldr	r3, [r4, #16]
 800c1a6:	1c5a      	adds	r2, r3, #1
 800c1a8:	6122      	str	r2, [r4, #16]
 800c1aa:	2201      	movs	r2, #1
 800c1ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c1b0:	615a      	str	r2, [r3, #20]
 800c1b2:	e7bd      	b.n	800c130 <__gethex+0x3b8>
 800c1b4:	6922      	ldr	r2, [r4, #16]
 800c1b6:	455a      	cmp	r2, fp
 800c1b8:	dd0b      	ble.n	800c1d2 <__gethex+0x45a>
 800c1ba:	2101      	movs	r1, #1
 800c1bc:	4620      	mov	r0, r4
 800c1be:	f7ff fd73 	bl	800bca8 <rshift>
 800c1c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c1c6:	3501      	adds	r5, #1
 800c1c8:	42ab      	cmp	r3, r5
 800c1ca:	f6ff aed4 	blt.w	800bf76 <__gethex+0x1fe>
 800c1ce:	2701      	movs	r7, #1
 800c1d0:	e7c2      	b.n	800c158 <__gethex+0x3e0>
 800c1d2:	f016 061f 	ands.w	r6, r6, #31
 800c1d6:	d0fa      	beq.n	800c1ce <__gethex+0x456>
 800c1d8:	4453      	add	r3, sl
 800c1da:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c1de:	f000 fa05 	bl	800c5ec <__hi0bits>
 800c1e2:	f1c6 0620 	rsb	r6, r6, #32
 800c1e6:	42b0      	cmp	r0, r6
 800c1e8:	dbe7      	blt.n	800c1ba <__gethex+0x442>
 800c1ea:	e7f0      	b.n	800c1ce <__gethex+0x456>
 800c1ec:	0800dde8 	.word	0x0800dde8

0800c1f0 <L_shift>:
 800c1f0:	f1c2 0208 	rsb	r2, r2, #8
 800c1f4:	0092      	lsls	r2, r2, #2
 800c1f6:	b570      	push	{r4, r5, r6, lr}
 800c1f8:	f1c2 0620 	rsb	r6, r2, #32
 800c1fc:	6843      	ldr	r3, [r0, #4]
 800c1fe:	6804      	ldr	r4, [r0, #0]
 800c200:	fa03 f506 	lsl.w	r5, r3, r6
 800c204:	432c      	orrs	r4, r5
 800c206:	40d3      	lsrs	r3, r2
 800c208:	6004      	str	r4, [r0, #0]
 800c20a:	f840 3f04 	str.w	r3, [r0, #4]!
 800c20e:	4288      	cmp	r0, r1
 800c210:	d3f4      	bcc.n	800c1fc <L_shift+0xc>
 800c212:	bd70      	pop	{r4, r5, r6, pc}

0800c214 <__match>:
 800c214:	b530      	push	{r4, r5, lr}
 800c216:	6803      	ldr	r3, [r0, #0]
 800c218:	3301      	adds	r3, #1
 800c21a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c21e:	b914      	cbnz	r4, 800c226 <__match+0x12>
 800c220:	6003      	str	r3, [r0, #0]
 800c222:	2001      	movs	r0, #1
 800c224:	bd30      	pop	{r4, r5, pc}
 800c226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c22a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c22e:	2d19      	cmp	r5, #25
 800c230:	bf98      	it	ls
 800c232:	3220      	addls	r2, #32
 800c234:	42a2      	cmp	r2, r4
 800c236:	d0f0      	beq.n	800c21a <__match+0x6>
 800c238:	2000      	movs	r0, #0
 800c23a:	e7f3      	b.n	800c224 <__match+0x10>

0800c23c <__hexnan>:
 800c23c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c240:	2500      	movs	r5, #0
 800c242:	680b      	ldr	r3, [r1, #0]
 800c244:	4682      	mov	sl, r0
 800c246:	115e      	asrs	r6, r3, #5
 800c248:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c24c:	f013 031f 	ands.w	r3, r3, #31
 800c250:	bf18      	it	ne
 800c252:	3604      	addne	r6, #4
 800c254:	1f37      	subs	r7, r6, #4
 800c256:	46b9      	mov	r9, r7
 800c258:	463c      	mov	r4, r7
 800c25a:	46ab      	mov	fp, r5
 800c25c:	b087      	sub	sp, #28
 800c25e:	4690      	mov	r8, r2
 800c260:	6802      	ldr	r2, [r0, #0]
 800c262:	9301      	str	r3, [sp, #4]
 800c264:	f846 5c04 	str.w	r5, [r6, #-4]
 800c268:	9502      	str	r5, [sp, #8]
 800c26a:	7851      	ldrb	r1, [r2, #1]
 800c26c:	1c53      	adds	r3, r2, #1
 800c26e:	9303      	str	r3, [sp, #12]
 800c270:	b341      	cbz	r1, 800c2c4 <__hexnan+0x88>
 800c272:	4608      	mov	r0, r1
 800c274:	9205      	str	r2, [sp, #20]
 800c276:	9104      	str	r1, [sp, #16]
 800c278:	f7ff fd69 	bl	800bd4e <__hexdig_fun>
 800c27c:	2800      	cmp	r0, #0
 800c27e:	d14f      	bne.n	800c320 <__hexnan+0xe4>
 800c280:	9904      	ldr	r1, [sp, #16]
 800c282:	9a05      	ldr	r2, [sp, #20]
 800c284:	2920      	cmp	r1, #32
 800c286:	d818      	bhi.n	800c2ba <__hexnan+0x7e>
 800c288:	9b02      	ldr	r3, [sp, #8]
 800c28a:	459b      	cmp	fp, r3
 800c28c:	dd13      	ble.n	800c2b6 <__hexnan+0x7a>
 800c28e:	454c      	cmp	r4, r9
 800c290:	d206      	bcs.n	800c2a0 <__hexnan+0x64>
 800c292:	2d07      	cmp	r5, #7
 800c294:	dc04      	bgt.n	800c2a0 <__hexnan+0x64>
 800c296:	462a      	mov	r2, r5
 800c298:	4649      	mov	r1, r9
 800c29a:	4620      	mov	r0, r4
 800c29c:	f7ff ffa8 	bl	800c1f0 <L_shift>
 800c2a0:	4544      	cmp	r4, r8
 800c2a2:	d950      	bls.n	800c346 <__hexnan+0x10a>
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	f1a4 0904 	sub.w	r9, r4, #4
 800c2aa:	f844 3c04 	str.w	r3, [r4, #-4]
 800c2ae:	461d      	mov	r5, r3
 800c2b0:	464c      	mov	r4, r9
 800c2b2:	f8cd b008 	str.w	fp, [sp, #8]
 800c2b6:	9a03      	ldr	r2, [sp, #12]
 800c2b8:	e7d7      	b.n	800c26a <__hexnan+0x2e>
 800c2ba:	2929      	cmp	r1, #41	; 0x29
 800c2bc:	d156      	bne.n	800c36c <__hexnan+0x130>
 800c2be:	3202      	adds	r2, #2
 800c2c0:	f8ca 2000 	str.w	r2, [sl]
 800c2c4:	f1bb 0f00 	cmp.w	fp, #0
 800c2c8:	d050      	beq.n	800c36c <__hexnan+0x130>
 800c2ca:	454c      	cmp	r4, r9
 800c2cc:	d206      	bcs.n	800c2dc <__hexnan+0xa0>
 800c2ce:	2d07      	cmp	r5, #7
 800c2d0:	dc04      	bgt.n	800c2dc <__hexnan+0xa0>
 800c2d2:	462a      	mov	r2, r5
 800c2d4:	4649      	mov	r1, r9
 800c2d6:	4620      	mov	r0, r4
 800c2d8:	f7ff ff8a 	bl	800c1f0 <L_shift>
 800c2dc:	4544      	cmp	r4, r8
 800c2de:	d934      	bls.n	800c34a <__hexnan+0x10e>
 800c2e0:	4623      	mov	r3, r4
 800c2e2:	f1a8 0204 	sub.w	r2, r8, #4
 800c2e6:	f853 1b04 	ldr.w	r1, [r3], #4
 800c2ea:	429f      	cmp	r7, r3
 800c2ec:	f842 1f04 	str.w	r1, [r2, #4]!
 800c2f0:	d2f9      	bcs.n	800c2e6 <__hexnan+0xaa>
 800c2f2:	1b3b      	subs	r3, r7, r4
 800c2f4:	f023 0303 	bic.w	r3, r3, #3
 800c2f8:	3304      	adds	r3, #4
 800c2fa:	3401      	adds	r4, #1
 800c2fc:	3e03      	subs	r6, #3
 800c2fe:	42b4      	cmp	r4, r6
 800c300:	bf88      	it	hi
 800c302:	2304      	movhi	r3, #4
 800c304:	2200      	movs	r2, #0
 800c306:	4443      	add	r3, r8
 800c308:	f843 2b04 	str.w	r2, [r3], #4
 800c30c:	429f      	cmp	r7, r3
 800c30e:	d2fb      	bcs.n	800c308 <__hexnan+0xcc>
 800c310:	683b      	ldr	r3, [r7, #0]
 800c312:	b91b      	cbnz	r3, 800c31c <__hexnan+0xe0>
 800c314:	4547      	cmp	r7, r8
 800c316:	d127      	bne.n	800c368 <__hexnan+0x12c>
 800c318:	2301      	movs	r3, #1
 800c31a:	603b      	str	r3, [r7, #0]
 800c31c:	2005      	movs	r0, #5
 800c31e:	e026      	b.n	800c36e <__hexnan+0x132>
 800c320:	3501      	adds	r5, #1
 800c322:	2d08      	cmp	r5, #8
 800c324:	f10b 0b01 	add.w	fp, fp, #1
 800c328:	dd06      	ble.n	800c338 <__hexnan+0xfc>
 800c32a:	4544      	cmp	r4, r8
 800c32c:	d9c3      	bls.n	800c2b6 <__hexnan+0x7a>
 800c32e:	2300      	movs	r3, #0
 800c330:	2501      	movs	r5, #1
 800c332:	f844 3c04 	str.w	r3, [r4, #-4]
 800c336:	3c04      	subs	r4, #4
 800c338:	6822      	ldr	r2, [r4, #0]
 800c33a:	f000 000f 	and.w	r0, r0, #15
 800c33e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c342:	6022      	str	r2, [r4, #0]
 800c344:	e7b7      	b.n	800c2b6 <__hexnan+0x7a>
 800c346:	2508      	movs	r5, #8
 800c348:	e7b5      	b.n	800c2b6 <__hexnan+0x7a>
 800c34a:	9b01      	ldr	r3, [sp, #4]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d0df      	beq.n	800c310 <__hexnan+0xd4>
 800c350:	f04f 32ff 	mov.w	r2, #4294967295
 800c354:	f1c3 0320 	rsb	r3, r3, #32
 800c358:	fa22 f303 	lsr.w	r3, r2, r3
 800c35c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c360:	401a      	ands	r2, r3
 800c362:	f846 2c04 	str.w	r2, [r6, #-4]
 800c366:	e7d3      	b.n	800c310 <__hexnan+0xd4>
 800c368:	3f04      	subs	r7, #4
 800c36a:	e7d1      	b.n	800c310 <__hexnan+0xd4>
 800c36c:	2004      	movs	r0, #4
 800c36e:	b007      	add	sp, #28
 800c370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c374 <_localeconv_r>:
 800c374:	4800      	ldr	r0, [pc, #0]	; (800c378 <_localeconv_r+0x4>)
 800c376:	4770      	bx	lr
 800c378:	20000168 	.word	0x20000168

0800c37c <_lseek_r>:
 800c37c:	b538      	push	{r3, r4, r5, lr}
 800c37e:	4604      	mov	r4, r0
 800c380:	4608      	mov	r0, r1
 800c382:	4611      	mov	r1, r2
 800c384:	2200      	movs	r2, #0
 800c386:	4d05      	ldr	r5, [pc, #20]	; (800c39c <_lseek_r+0x20>)
 800c388:	602a      	str	r2, [r5, #0]
 800c38a:	461a      	mov	r2, r3
 800c38c:	f7f5 fbe0 	bl	8001b50 <_lseek>
 800c390:	1c43      	adds	r3, r0, #1
 800c392:	d102      	bne.n	800c39a <_lseek_r+0x1e>
 800c394:	682b      	ldr	r3, [r5, #0]
 800c396:	b103      	cbz	r3, 800c39a <_lseek_r+0x1e>
 800c398:	6023      	str	r3, [r4, #0]
 800c39a:	bd38      	pop	{r3, r4, r5, pc}
 800c39c:	2000326c 	.word	0x2000326c

0800c3a0 <malloc>:
 800c3a0:	4b02      	ldr	r3, [pc, #8]	; (800c3ac <malloc+0xc>)
 800c3a2:	4601      	mov	r1, r0
 800c3a4:	6818      	ldr	r0, [r3, #0]
 800c3a6:	f7fc bed3 	b.w	8009150 <_malloc_r>
 800c3aa:	bf00      	nop
 800c3ac:	20000010 	.word	0x20000010

0800c3b0 <__ascii_mbtowc>:
 800c3b0:	b082      	sub	sp, #8
 800c3b2:	b901      	cbnz	r1, 800c3b6 <__ascii_mbtowc+0x6>
 800c3b4:	a901      	add	r1, sp, #4
 800c3b6:	b142      	cbz	r2, 800c3ca <__ascii_mbtowc+0x1a>
 800c3b8:	b14b      	cbz	r3, 800c3ce <__ascii_mbtowc+0x1e>
 800c3ba:	7813      	ldrb	r3, [r2, #0]
 800c3bc:	600b      	str	r3, [r1, #0]
 800c3be:	7812      	ldrb	r2, [r2, #0]
 800c3c0:	1e10      	subs	r0, r2, #0
 800c3c2:	bf18      	it	ne
 800c3c4:	2001      	movne	r0, #1
 800c3c6:	b002      	add	sp, #8
 800c3c8:	4770      	bx	lr
 800c3ca:	4610      	mov	r0, r2
 800c3cc:	e7fb      	b.n	800c3c6 <__ascii_mbtowc+0x16>
 800c3ce:	f06f 0001 	mvn.w	r0, #1
 800c3d2:	e7f8      	b.n	800c3c6 <__ascii_mbtowc+0x16>

0800c3d4 <memchr>:
 800c3d4:	4603      	mov	r3, r0
 800c3d6:	b510      	push	{r4, lr}
 800c3d8:	b2c9      	uxtb	r1, r1
 800c3da:	4402      	add	r2, r0
 800c3dc:	4293      	cmp	r3, r2
 800c3de:	4618      	mov	r0, r3
 800c3e0:	d101      	bne.n	800c3e6 <memchr+0x12>
 800c3e2:	2000      	movs	r0, #0
 800c3e4:	e003      	b.n	800c3ee <memchr+0x1a>
 800c3e6:	7804      	ldrb	r4, [r0, #0]
 800c3e8:	3301      	adds	r3, #1
 800c3ea:	428c      	cmp	r4, r1
 800c3ec:	d1f6      	bne.n	800c3dc <memchr+0x8>
 800c3ee:	bd10      	pop	{r4, pc}

0800c3f0 <__malloc_lock>:
 800c3f0:	4801      	ldr	r0, [pc, #4]	; (800c3f8 <__malloc_lock+0x8>)
 800c3f2:	f7fc be74 	b.w	80090de <__retarget_lock_acquire_recursive>
 800c3f6:	bf00      	nop
 800c3f8:	20003260 	.word	0x20003260

0800c3fc <__malloc_unlock>:
 800c3fc:	4801      	ldr	r0, [pc, #4]	; (800c404 <__malloc_unlock+0x8>)
 800c3fe:	f7fc be6f 	b.w	80090e0 <__retarget_lock_release_recursive>
 800c402:	bf00      	nop
 800c404:	20003260 	.word	0x20003260

0800c408 <_Balloc>:
 800c408:	b570      	push	{r4, r5, r6, lr}
 800c40a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c40c:	4604      	mov	r4, r0
 800c40e:	460d      	mov	r5, r1
 800c410:	b976      	cbnz	r6, 800c430 <_Balloc+0x28>
 800c412:	2010      	movs	r0, #16
 800c414:	f7ff ffc4 	bl	800c3a0 <malloc>
 800c418:	4602      	mov	r2, r0
 800c41a:	6260      	str	r0, [r4, #36]	; 0x24
 800c41c:	b920      	cbnz	r0, 800c428 <_Balloc+0x20>
 800c41e:	2166      	movs	r1, #102	; 0x66
 800c420:	4b17      	ldr	r3, [pc, #92]	; (800c480 <_Balloc+0x78>)
 800c422:	4818      	ldr	r0, [pc, #96]	; (800c484 <_Balloc+0x7c>)
 800c424:	f000 fe9a 	bl	800d15c <__assert_func>
 800c428:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c42c:	6006      	str	r6, [r0, #0]
 800c42e:	60c6      	str	r6, [r0, #12]
 800c430:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c432:	68f3      	ldr	r3, [r6, #12]
 800c434:	b183      	cbz	r3, 800c458 <_Balloc+0x50>
 800c436:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c438:	68db      	ldr	r3, [r3, #12]
 800c43a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c43e:	b9b8      	cbnz	r0, 800c470 <_Balloc+0x68>
 800c440:	2101      	movs	r1, #1
 800c442:	fa01 f605 	lsl.w	r6, r1, r5
 800c446:	1d72      	adds	r2, r6, #5
 800c448:	4620      	mov	r0, r4
 800c44a:	0092      	lsls	r2, r2, #2
 800c44c:	f000 fc94 	bl	800cd78 <_calloc_r>
 800c450:	b160      	cbz	r0, 800c46c <_Balloc+0x64>
 800c452:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c456:	e00e      	b.n	800c476 <_Balloc+0x6e>
 800c458:	2221      	movs	r2, #33	; 0x21
 800c45a:	2104      	movs	r1, #4
 800c45c:	4620      	mov	r0, r4
 800c45e:	f000 fc8b 	bl	800cd78 <_calloc_r>
 800c462:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c464:	60f0      	str	r0, [r6, #12]
 800c466:	68db      	ldr	r3, [r3, #12]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d1e4      	bne.n	800c436 <_Balloc+0x2e>
 800c46c:	2000      	movs	r0, #0
 800c46e:	bd70      	pop	{r4, r5, r6, pc}
 800c470:	6802      	ldr	r2, [r0, #0]
 800c472:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c476:	2300      	movs	r3, #0
 800c478:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c47c:	e7f7      	b.n	800c46e <_Balloc+0x66>
 800c47e:	bf00      	nop
 800c480:	0800dd76 	.word	0x0800dd76
 800c484:	0800de74 	.word	0x0800de74

0800c488 <_Bfree>:
 800c488:	b570      	push	{r4, r5, r6, lr}
 800c48a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c48c:	4605      	mov	r5, r0
 800c48e:	460c      	mov	r4, r1
 800c490:	b976      	cbnz	r6, 800c4b0 <_Bfree+0x28>
 800c492:	2010      	movs	r0, #16
 800c494:	f7ff ff84 	bl	800c3a0 <malloc>
 800c498:	4602      	mov	r2, r0
 800c49a:	6268      	str	r0, [r5, #36]	; 0x24
 800c49c:	b920      	cbnz	r0, 800c4a8 <_Bfree+0x20>
 800c49e:	218a      	movs	r1, #138	; 0x8a
 800c4a0:	4b08      	ldr	r3, [pc, #32]	; (800c4c4 <_Bfree+0x3c>)
 800c4a2:	4809      	ldr	r0, [pc, #36]	; (800c4c8 <_Bfree+0x40>)
 800c4a4:	f000 fe5a 	bl	800d15c <__assert_func>
 800c4a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c4ac:	6006      	str	r6, [r0, #0]
 800c4ae:	60c6      	str	r6, [r0, #12]
 800c4b0:	b13c      	cbz	r4, 800c4c2 <_Bfree+0x3a>
 800c4b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c4b4:	6862      	ldr	r2, [r4, #4]
 800c4b6:	68db      	ldr	r3, [r3, #12]
 800c4b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c4bc:	6021      	str	r1, [r4, #0]
 800c4be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c4c2:	bd70      	pop	{r4, r5, r6, pc}
 800c4c4:	0800dd76 	.word	0x0800dd76
 800c4c8:	0800de74 	.word	0x0800de74

0800c4cc <__multadd>:
 800c4cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4d0:	4607      	mov	r7, r0
 800c4d2:	460c      	mov	r4, r1
 800c4d4:	461e      	mov	r6, r3
 800c4d6:	2000      	movs	r0, #0
 800c4d8:	690d      	ldr	r5, [r1, #16]
 800c4da:	f101 0c14 	add.w	ip, r1, #20
 800c4de:	f8dc 3000 	ldr.w	r3, [ip]
 800c4e2:	3001      	adds	r0, #1
 800c4e4:	b299      	uxth	r1, r3
 800c4e6:	fb02 6101 	mla	r1, r2, r1, r6
 800c4ea:	0c1e      	lsrs	r6, r3, #16
 800c4ec:	0c0b      	lsrs	r3, r1, #16
 800c4ee:	fb02 3306 	mla	r3, r2, r6, r3
 800c4f2:	b289      	uxth	r1, r1
 800c4f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c4f8:	4285      	cmp	r5, r0
 800c4fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c4fe:	f84c 1b04 	str.w	r1, [ip], #4
 800c502:	dcec      	bgt.n	800c4de <__multadd+0x12>
 800c504:	b30e      	cbz	r6, 800c54a <__multadd+0x7e>
 800c506:	68a3      	ldr	r3, [r4, #8]
 800c508:	42ab      	cmp	r3, r5
 800c50a:	dc19      	bgt.n	800c540 <__multadd+0x74>
 800c50c:	6861      	ldr	r1, [r4, #4]
 800c50e:	4638      	mov	r0, r7
 800c510:	3101      	adds	r1, #1
 800c512:	f7ff ff79 	bl	800c408 <_Balloc>
 800c516:	4680      	mov	r8, r0
 800c518:	b928      	cbnz	r0, 800c526 <__multadd+0x5a>
 800c51a:	4602      	mov	r2, r0
 800c51c:	21b5      	movs	r1, #181	; 0xb5
 800c51e:	4b0c      	ldr	r3, [pc, #48]	; (800c550 <__multadd+0x84>)
 800c520:	480c      	ldr	r0, [pc, #48]	; (800c554 <__multadd+0x88>)
 800c522:	f000 fe1b 	bl	800d15c <__assert_func>
 800c526:	6922      	ldr	r2, [r4, #16]
 800c528:	f104 010c 	add.w	r1, r4, #12
 800c52c:	3202      	adds	r2, #2
 800c52e:	0092      	lsls	r2, r2, #2
 800c530:	300c      	adds	r0, #12
 800c532:	f7fc fdd6 	bl	80090e2 <memcpy>
 800c536:	4621      	mov	r1, r4
 800c538:	4638      	mov	r0, r7
 800c53a:	f7ff ffa5 	bl	800c488 <_Bfree>
 800c53e:	4644      	mov	r4, r8
 800c540:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c544:	3501      	adds	r5, #1
 800c546:	615e      	str	r6, [r3, #20]
 800c548:	6125      	str	r5, [r4, #16]
 800c54a:	4620      	mov	r0, r4
 800c54c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c550:	0800dde8 	.word	0x0800dde8
 800c554:	0800de74 	.word	0x0800de74

0800c558 <__s2b>:
 800c558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c55c:	4615      	mov	r5, r2
 800c55e:	2209      	movs	r2, #9
 800c560:	461f      	mov	r7, r3
 800c562:	3308      	adds	r3, #8
 800c564:	460c      	mov	r4, r1
 800c566:	fb93 f3f2 	sdiv	r3, r3, r2
 800c56a:	4606      	mov	r6, r0
 800c56c:	2201      	movs	r2, #1
 800c56e:	2100      	movs	r1, #0
 800c570:	429a      	cmp	r2, r3
 800c572:	db09      	blt.n	800c588 <__s2b+0x30>
 800c574:	4630      	mov	r0, r6
 800c576:	f7ff ff47 	bl	800c408 <_Balloc>
 800c57a:	b940      	cbnz	r0, 800c58e <__s2b+0x36>
 800c57c:	4602      	mov	r2, r0
 800c57e:	21ce      	movs	r1, #206	; 0xce
 800c580:	4b18      	ldr	r3, [pc, #96]	; (800c5e4 <__s2b+0x8c>)
 800c582:	4819      	ldr	r0, [pc, #100]	; (800c5e8 <__s2b+0x90>)
 800c584:	f000 fdea 	bl	800d15c <__assert_func>
 800c588:	0052      	lsls	r2, r2, #1
 800c58a:	3101      	adds	r1, #1
 800c58c:	e7f0      	b.n	800c570 <__s2b+0x18>
 800c58e:	9b08      	ldr	r3, [sp, #32]
 800c590:	2d09      	cmp	r5, #9
 800c592:	6143      	str	r3, [r0, #20]
 800c594:	f04f 0301 	mov.w	r3, #1
 800c598:	6103      	str	r3, [r0, #16]
 800c59a:	dd16      	ble.n	800c5ca <__s2b+0x72>
 800c59c:	f104 0909 	add.w	r9, r4, #9
 800c5a0:	46c8      	mov	r8, r9
 800c5a2:	442c      	add	r4, r5
 800c5a4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c5a8:	4601      	mov	r1, r0
 800c5aa:	220a      	movs	r2, #10
 800c5ac:	4630      	mov	r0, r6
 800c5ae:	3b30      	subs	r3, #48	; 0x30
 800c5b0:	f7ff ff8c 	bl	800c4cc <__multadd>
 800c5b4:	45a0      	cmp	r8, r4
 800c5b6:	d1f5      	bne.n	800c5a4 <__s2b+0x4c>
 800c5b8:	f1a5 0408 	sub.w	r4, r5, #8
 800c5bc:	444c      	add	r4, r9
 800c5be:	1b2d      	subs	r5, r5, r4
 800c5c0:	1963      	adds	r3, r4, r5
 800c5c2:	42bb      	cmp	r3, r7
 800c5c4:	db04      	blt.n	800c5d0 <__s2b+0x78>
 800c5c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5ca:	2509      	movs	r5, #9
 800c5cc:	340a      	adds	r4, #10
 800c5ce:	e7f6      	b.n	800c5be <__s2b+0x66>
 800c5d0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c5d4:	4601      	mov	r1, r0
 800c5d6:	220a      	movs	r2, #10
 800c5d8:	4630      	mov	r0, r6
 800c5da:	3b30      	subs	r3, #48	; 0x30
 800c5dc:	f7ff ff76 	bl	800c4cc <__multadd>
 800c5e0:	e7ee      	b.n	800c5c0 <__s2b+0x68>
 800c5e2:	bf00      	nop
 800c5e4:	0800dde8 	.word	0x0800dde8
 800c5e8:	0800de74 	.word	0x0800de74

0800c5ec <__hi0bits>:
 800c5ec:	0c02      	lsrs	r2, r0, #16
 800c5ee:	0412      	lsls	r2, r2, #16
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	b9ca      	cbnz	r2, 800c628 <__hi0bits+0x3c>
 800c5f4:	0403      	lsls	r3, r0, #16
 800c5f6:	2010      	movs	r0, #16
 800c5f8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c5fc:	bf04      	itt	eq
 800c5fe:	021b      	lsleq	r3, r3, #8
 800c600:	3008      	addeq	r0, #8
 800c602:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c606:	bf04      	itt	eq
 800c608:	011b      	lsleq	r3, r3, #4
 800c60a:	3004      	addeq	r0, #4
 800c60c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c610:	bf04      	itt	eq
 800c612:	009b      	lsleq	r3, r3, #2
 800c614:	3002      	addeq	r0, #2
 800c616:	2b00      	cmp	r3, #0
 800c618:	db05      	blt.n	800c626 <__hi0bits+0x3a>
 800c61a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800c61e:	f100 0001 	add.w	r0, r0, #1
 800c622:	bf08      	it	eq
 800c624:	2020      	moveq	r0, #32
 800c626:	4770      	bx	lr
 800c628:	2000      	movs	r0, #0
 800c62a:	e7e5      	b.n	800c5f8 <__hi0bits+0xc>

0800c62c <__lo0bits>:
 800c62c:	6803      	ldr	r3, [r0, #0]
 800c62e:	4602      	mov	r2, r0
 800c630:	f013 0007 	ands.w	r0, r3, #7
 800c634:	d00b      	beq.n	800c64e <__lo0bits+0x22>
 800c636:	07d9      	lsls	r1, r3, #31
 800c638:	d421      	bmi.n	800c67e <__lo0bits+0x52>
 800c63a:	0798      	lsls	r0, r3, #30
 800c63c:	bf49      	itett	mi
 800c63e:	085b      	lsrmi	r3, r3, #1
 800c640:	089b      	lsrpl	r3, r3, #2
 800c642:	2001      	movmi	r0, #1
 800c644:	6013      	strmi	r3, [r2, #0]
 800c646:	bf5c      	itt	pl
 800c648:	2002      	movpl	r0, #2
 800c64a:	6013      	strpl	r3, [r2, #0]
 800c64c:	4770      	bx	lr
 800c64e:	b299      	uxth	r1, r3
 800c650:	b909      	cbnz	r1, 800c656 <__lo0bits+0x2a>
 800c652:	2010      	movs	r0, #16
 800c654:	0c1b      	lsrs	r3, r3, #16
 800c656:	b2d9      	uxtb	r1, r3
 800c658:	b909      	cbnz	r1, 800c65e <__lo0bits+0x32>
 800c65a:	3008      	adds	r0, #8
 800c65c:	0a1b      	lsrs	r3, r3, #8
 800c65e:	0719      	lsls	r1, r3, #28
 800c660:	bf04      	itt	eq
 800c662:	091b      	lsreq	r3, r3, #4
 800c664:	3004      	addeq	r0, #4
 800c666:	0799      	lsls	r1, r3, #30
 800c668:	bf04      	itt	eq
 800c66a:	089b      	lsreq	r3, r3, #2
 800c66c:	3002      	addeq	r0, #2
 800c66e:	07d9      	lsls	r1, r3, #31
 800c670:	d403      	bmi.n	800c67a <__lo0bits+0x4e>
 800c672:	085b      	lsrs	r3, r3, #1
 800c674:	f100 0001 	add.w	r0, r0, #1
 800c678:	d003      	beq.n	800c682 <__lo0bits+0x56>
 800c67a:	6013      	str	r3, [r2, #0]
 800c67c:	4770      	bx	lr
 800c67e:	2000      	movs	r0, #0
 800c680:	4770      	bx	lr
 800c682:	2020      	movs	r0, #32
 800c684:	4770      	bx	lr
	...

0800c688 <__i2b>:
 800c688:	b510      	push	{r4, lr}
 800c68a:	460c      	mov	r4, r1
 800c68c:	2101      	movs	r1, #1
 800c68e:	f7ff febb 	bl	800c408 <_Balloc>
 800c692:	4602      	mov	r2, r0
 800c694:	b928      	cbnz	r0, 800c6a2 <__i2b+0x1a>
 800c696:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c69a:	4b04      	ldr	r3, [pc, #16]	; (800c6ac <__i2b+0x24>)
 800c69c:	4804      	ldr	r0, [pc, #16]	; (800c6b0 <__i2b+0x28>)
 800c69e:	f000 fd5d 	bl	800d15c <__assert_func>
 800c6a2:	2301      	movs	r3, #1
 800c6a4:	6144      	str	r4, [r0, #20]
 800c6a6:	6103      	str	r3, [r0, #16]
 800c6a8:	bd10      	pop	{r4, pc}
 800c6aa:	bf00      	nop
 800c6ac:	0800dde8 	.word	0x0800dde8
 800c6b0:	0800de74 	.word	0x0800de74

0800c6b4 <__multiply>:
 800c6b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6b8:	4691      	mov	r9, r2
 800c6ba:	690a      	ldr	r2, [r1, #16]
 800c6bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c6c0:	460c      	mov	r4, r1
 800c6c2:	429a      	cmp	r2, r3
 800c6c4:	bfbe      	ittt	lt
 800c6c6:	460b      	movlt	r3, r1
 800c6c8:	464c      	movlt	r4, r9
 800c6ca:	4699      	movlt	r9, r3
 800c6cc:	6927      	ldr	r7, [r4, #16]
 800c6ce:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c6d2:	68a3      	ldr	r3, [r4, #8]
 800c6d4:	6861      	ldr	r1, [r4, #4]
 800c6d6:	eb07 060a 	add.w	r6, r7, sl
 800c6da:	42b3      	cmp	r3, r6
 800c6dc:	b085      	sub	sp, #20
 800c6de:	bfb8      	it	lt
 800c6e0:	3101      	addlt	r1, #1
 800c6e2:	f7ff fe91 	bl	800c408 <_Balloc>
 800c6e6:	b930      	cbnz	r0, 800c6f6 <__multiply+0x42>
 800c6e8:	4602      	mov	r2, r0
 800c6ea:	f240 115d 	movw	r1, #349	; 0x15d
 800c6ee:	4b43      	ldr	r3, [pc, #268]	; (800c7fc <__multiply+0x148>)
 800c6f0:	4843      	ldr	r0, [pc, #268]	; (800c800 <__multiply+0x14c>)
 800c6f2:	f000 fd33 	bl	800d15c <__assert_func>
 800c6f6:	f100 0514 	add.w	r5, r0, #20
 800c6fa:	462b      	mov	r3, r5
 800c6fc:	2200      	movs	r2, #0
 800c6fe:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c702:	4543      	cmp	r3, r8
 800c704:	d321      	bcc.n	800c74a <__multiply+0x96>
 800c706:	f104 0314 	add.w	r3, r4, #20
 800c70a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c70e:	f109 0314 	add.w	r3, r9, #20
 800c712:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c716:	9202      	str	r2, [sp, #8]
 800c718:	1b3a      	subs	r2, r7, r4
 800c71a:	3a15      	subs	r2, #21
 800c71c:	f022 0203 	bic.w	r2, r2, #3
 800c720:	3204      	adds	r2, #4
 800c722:	f104 0115 	add.w	r1, r4, #21
 800c726:	428f      	cmp	r7, r1
 800c728:	bf38      	it	cc
 800c72a:	2204      	movcc	r2, #4
 800c72c:	9201      	str	r2, [sp, #4]
 800c72e:	9a02      	ldr	r2, [sp, #8]
 800c730:	9303      	str	r3, [sp, #12]
 800c732:	429a      	cmp	r2, r3
 800c734:	d80c      	bhi.n	800c750 <__multiply+0x9c>
 800c736:	2e00      	cmp	r6, #0
 800c738:	dd03      	ble.n	800c742 <__multiply+0x8e>
 800c73a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d059      	beq.n	800c7f6 <__multiply+0x142>
 800c742:	6106      	str	r6, [r0, #16]
 800c744:	b005      	add	sp, #20
 800c746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c74a:	f843 2b04 	str.w	r2, [r3], #4
 800c74e:	e7d8      	b.n	800c702 <__multiply+0x4e>
 800c750:	f8b3 a000 	ldrh.w	sl, [r3]
 800c754:	f1ba 0f00 	cmp.w	sl, #0
 800c758:	d023      	beq.n	800c7a2 <__multiply+0xee>
 800c75a:	46a9      	mov	r9, r5
 800c75c:	f04f 0c00 	mov.w	ip, #0
 800c760:	f104 0e14 	add.w	lr, r4, #20
 800c764:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c768:	f8d9 1000 	ldr.w	r1, [r9]
 800c76c:	fa1f fb82 	uxth.w	fp, r2
 800c770:	b289      	uxth	r1, r1
 800c772:	fb0a 110b 	mla	r1, sl, fp, r1
 800c776:	4461      	add	r1, ip
 800c778:	f8d9 c000 	ldr.w	ip, [r9]
 800c77c:	0c12      	lsrs	r2, r2, #16
 800c77e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800c782:	fb0a c202 	mla	r2, sl, r2, ip
 800c786:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c78a:	b289      	uxth	r1, r1
 800c78c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c790:	4577      	cmp	r7, lr
 800c792:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c796:	f849 1b04 	str.w	r1, [r9], #4
 800c79a:	d8e3      	bhi.n	800c764 <__multiply+0xb0>
 800c79c:	9a01      	ldr	r2, [sp, #4]
 800c79e:	f845 c002 	str.w	ip, [r5, r2]
 800c7a2:	9a03      	ldr	r2, [sp, #12]
 800c7a4:	3304      	adds	r3, #4
 800c7a6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c7aa:	f1b9 0f00 	cmp.w	r9, #0
 800c7ae:	d020      	beq.n	800c7f2 <__multiply+0x13e>
 800c7b0:	46ae      	mov	lr, r5
 800c7b2:	f04f 0a00 	mov.w	sl, #0
 800c7b6:	6829      	ldr	r1, [r5, #0]
 800c7b8:	f104 0c14 	add.w	ip, r4, #20
 800c7bc:	f8bc b000 	ldrh.w	fp, [ip]
 800c7c0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c7c4:	b289      	uxth	r1, r1
 800c7c6:	fb09 220b 	mla	r2, r9, fp, r2
 800c7ca:	4492      	add	sl, r2
 800c7cc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c7d0:	f84e 1b04 	str.w	r1, [lr], #4
 800c7d4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c7d8:	f8be 1000 	ldrh.w	r1, [lr]
 800c7dc:	0c12      	lsrs	r2, r2, #16
 800c7de:	fb09 1102 	mla	r1, r9, r2, r1
 800c7e2:	4567      	cmp	r7, ip
 800c7e4:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c7e8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c7ec:	d8e6      	bhi.n	800c7bc <__multiply+0x108>
 800c7ee:	9a01      	ldr	r2, [sp, #4]
 800c7f0:	50a9      	str	r1, [r5, r2]
 800c7f2:	3504      	adds	r5, #4
 800c7f4:	e79b      	b.n	800c72e <__multiply+0x7a>
 800c7f6:	3e01      	subs	r6, #1
 800c7f8:	e79d      	b.n	800c736 <__multiply+0x82>
 800c7fa:	bf00      	nop
 800c7fc:	0800dde8 	.word	0x0800dde8
 800c800:	0800de74 	.word	0x0800de74

0800c804 <__pow5mult>:
 800c804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c808:	4615      	mov	r5, r2
 800c80a:	f012 0203 	ands.w	r2, r2, #3
 800c80e:	4606      	mov	r6, r0
 800c810:	460f      	mov	r7, r1
 800c812:	d007      	beq.n	800c824 <__pow5mult+0x20>
 800c814:	4c25      	ldr	r4, [pc, #148]	; (800c8ac <__pow5mult+0xa8>)
 800c816:	3a01      	subs	r2, #1
 800c818:	2300      	movs	r3, #0
 800c81a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c81e:	f7ff fe55 	bl	800c4cc <__multadd>
 800c822:	4607      	mov	r7, r0
 800c824:	10ad      	asrs	r5, r5, #2
 800c826:	d03d      	beq.n	800c8a4 <__pow5mult+0xa0>
 800c828:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c82a:	b97c      	cbnz	r4, 800c84c <__pow5mult+0x48>
 800c82c:	2010      	movs	r0, #16
 800c82e:	f7ff fdb7 	bl	800c3a0 <malloc>
 800c832:	4602      	mov	r2, r0
 800c834:	6270      	str	r0, [r6, #36]	; 0x24
 800c836:	b928      	cbnz	r0, 800c844 <__pow5mult+0x40>
 800c838:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c83c:	4b1c      	ldr	r3, [pc, #112]	; (800c8b0 <__pow5mult+0xac>)
 800c83e:	481d      	ldr	r0, [pc, #116]	; (800c8b4 <__pow5mult+0xb0>)
 800c840:	f000 fc8c 	bl	800d15c <__assert_func>
 800c844:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c848:	6004      	str	r4, [r0, #0]
 800c84a:	60c4      	str	r4, [r0, #12]
 800c84c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c850:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c854:	b94c      	cbnz	r4, 800c86a <__pow5mult+0x66>
 800c856:	f240 2171 	movw	r1, #625	; 0x271
 800c85a:	4630      	mov	r0, r6
 800c85c:	f7ff ff14 	bl	800c688 <__i2b>
 800c860:	2300      	movs	r3, #0
 800c862:	4604      	mov	r4, r0
 800c864:	f8c8 0008 	str.w	r0, [r8, #8]
 800c868:	6003      	str	r3, [r0, #0]
 800c86a:	f04f 0900 	mov.w	r9, #0
 800c86e:	07eb      	lsls	r3, r5, #31
 800c870:	d50a      	bpl.n	800c888 <__pow5mult+0x84>
 800c872:	4639      	mov	r1, r7
 800c874:	4622      	mov	r2, r4
 800c876:	4630      	mov	r0, r6
 800c878:	f7ff ff1c 	bl	800c6b4 <__multiply>
 800c87c:	4680      	mov	r8, r0
 800c87e:	4639      	mov	r1, r7
 800c880:	4630      	mov	r0, r6
 800c882:	f7ff fe01 	bl	800c488 <_Bfree>
 800c886:	4647      	mov	r7, r8
 800c888:	106d      	asrs	r5, r5, #1
 800c88a:	d00b      	beq.n	800c8a4 <__pow5mult+0xa0>
 800c88c:	6820      	ldr	r0, [r4, #0]
 800c88e:	b938      	cbnz	r0, 800c8a0 <__pow5mult+0x9c>
 800c890:	4622      	mov	r2, r4
 800c892:	4621      	mov	r1, r4
 800c894:	4630      	mov	r0, r6
 800c896:	f7ff ff0d 	bl	800c6b4 <__multiply>
 800c89a:	6020      	str	r0, [r4, #0]
 800c89c:	f8c0 9000 	str.w	r9, [r0]
 800c8a0:	4604      	mov	r4, r0
 800c8a2:	e7e4      	b.n	800c86e <__pow5mult+0x6a>
 800c8a4:	4638      	mov	r0, r7
 800c8a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8aa:	bf00      	nop
 800c8ac:	0800dfc0 	.word	0x0800dfc0
 800c8b0:	0800dd76 	.word	0x0800dd76
 800c8b4:	0800de74 	.word	0x0800de74

0800c8b8 <__lshift>:
 800c8b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8bc:	460c      	mov	r4, r1
 800c8be:	4607      	mov	r7, r0
 800c8c0:	4691      	mov	r9, r2
 800c8c2:	6923      	ldr	r3, [r4, #16]
 800c8c4:	6849      	ldr	r1, [r1, #4]
 800c8c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c8ca:	68a3      	ldr	r3, [r4, #8]
 800c8cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c8d0:	f108 0601 	add.w	r6, r8, #1
 800c8d4:	42b3      	cmp	r3, r6
 800c8d6:	db0b      	blt.n	800c8f0 <__lshift+0x38>
 800c8d8:	4638      	mov	r0, r7
 800c8da:	f7ff fd95 	bl	800c408 <_Balloc>
 800c8de:	4605      	mov	r5, r0
 800c8e0:	b948      	cbnz	r0, 800c8f6 <__lshift+0x3e>
 800c8e2:	4602      	mov	r2, r0
 800c8e4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c8e8:	4b29      	ldr	r3, [pc, #164]	; (800c990 <__lshift+0xd8>)
 800c8ea:	482a      	ldr	r0, [pc, #168]	; (800c994 <__lshift+0xdc>)
 800c8ec:	f000 fc36 	bl	800d15c <__assert_func>
 800c8f0:	3101      	adds	r1, #1
 800c8f2:	005b      	lsls	r3, r3, #1
 800c8f4:	e7ee      	b.n	800c8d4 <__lshift+0x1c>
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	f100 0114 	add.w	r1, r0, #20
 800c8fc:	f100 0210 	add.w	r2, r0, #16
 800c900:	4618      	mov	r0, r3
 800c902:	4553      	cmp	r3, sl
 800c904:	db37      	blt.n	800c976 <__lshift+0xbe>
 800c906:	6920      	ldr	r0, [r4, #16]
 800c908:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c90c:	f104 0314 	add.w	r3, r4, #20
 800c910:	f019 091f 	ands.w	r9, r9, #31
 800c914:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c918:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c91c:	d02f      	beq.n	800c97e <__lshift+0xc6>
 800c91e:	468a      	mov	sl, r1
 800c920:	f04f 0c00 	mov.w	ip, #0
 800c924:	f1c9 0e20 	rsb	lr, r9, #32
 800c928:	681a      	ldr	r2, [r3, #0]
 800c92a:	fa02 f209 	lsl.w	r2, r2, r9
 800c92e:	ea42 020c 	orr.w	r2, r2, ip
 800c932:	f84a 2b04 	str.w	r2, [sl], #4
 800c936:	f853 2b04 	ldr.w	r2, [r3], #4
 800c93a:	4298      	cmp	r0, r3
 800c93c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c940:	d8f2      	bhi.n	800c928 <__lshift+0x70>
 800c942:	1b03      	subs	r3, r0, r4
 800c944:	3b15      	subs	r3, #21
 800c946:	f023 0303 	bic.w	r3, r3, #3
 800c94a:	3304      	adds	r3, #4
 800c94c:	f104 0215 	add.w	r2, r4, #21
 800c950:	4290      	cmp	r0, r2
 800c952:	bf38      	it	cc
 800c954:	2304      	movcc	r3, #4
 800c956:	f841 c003 	str.w	ip, [r1, r3]
 800c95a:	f1bc 0f00 	cmp.w	ip, #0
 800c95e:	d001      	beq.n	800c964 <__lshift+0xac>
 800c960:	f108 0602 	add.w	r6, r8, #2
 800c964:	3e01      	subs	r6, #1
 800c966:	4638      	mov	r0, r7
 800c968:	4621      	mov	r1, r4
 800c96a:	612e      	str	r6, [r5, #16]
 800c96c:	f7ff fd8c 	bl	800c488 <_Bfree>
 800c970:	4628      	mov	r0, r5
 800c972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c976:	f842 0f04 	str.w	r0, [r2, #4]!
 800c97a:	3301      	adds	r3, #1
 800c97c:	e7c1      	b.n	800c902 <__lshift+0x4a>
 800c97e:	3904      	subs	r1, #4
 800c980:	f853 2b04 	ldr.w	r2, [r3], #4
 800c984:	4298      	cmp	r0, r3
 800c986:	f841 2f04 	str.w	r2, [r1, #4]!
 800c98a:	d8f9      	bhi.n	800c980 <__lshift+0xc8>
 800c98c:	e7ea      	b.n	800c964 <__lshift+0xac>
 800c98e:	bf00      	nop
 800c990:	0800dde8 	.word	0x0800dde8
 800c994:	0800de74 	.word	0x0800de74

0800c998 <__mcmp>:
 800c998:	4603      	mov	r3, r0
 800c99a:	690a      	ldr	r2, [r1, #16]
 800c99c:	6900      	ldr	r0, [r0, #16]
 800c99e:	b530      	push	{r4, r5, lr}
 800c9a0:	1a80      	subs	r0, r0, r2
 800c9a2:	d10d      	bne.n	800c9c0 <__mcmp+0x28>
 800c9a4:	3314      	adds	r3, #20
 800c9a6:	3114      	adds	r1, #20
 800c9a8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c9ac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c9b0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c9b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c9b8:	4295      	cmp	r5, r2
 800c9ba:	d002      	beq.n	800c9c2 <__mcmp+0x2a>
 800c9bc:	d304      	bcc.n	800c9c8 <__mcmp+0x30>
 800c9be:	2001      	movs	r0, #1
 800c9c0:	bd30      	pop	{r4, r5, pc}
 800c9c2:	42a3      	cmp	r3, r4
 800c9c4:	d3f4      	bcc.n	800c9b0 <__mcmp+0x18>
 800c9c6:	e7fb      	b.n	800c9c0 <__mcmp+0x28>
 800c9c8:	f04f 30ff 	mov.w	r0, #4294967295
 800c9cc:	e7f8      	b.n	800c9c0 <__mcmp+0x28>
	...

0800c9d0 <__mdiff>:
 800c9d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9d4:	460d      	mov	r5, r1
 800c9d6:	4607      	mov	r7, r0
 800c9d8:	4611      	mov	r1, r2
 800c9da:	4628      	mov	r0, r5
 800c9dc:	4614      	mov	r4, r2
 800c9de:	f7ff ffdb 	bl	800c998 <__mcmp>
 800c9e2:	1e06      	subs	r6, r0, #0
 800c9e4:	d111      	bne.n	800ca0a <__mdiff+0x3a>
 800c9e6:	4631      	mov	r1, r6
 800c9e8:	4638      	mov	r0, r7
 800c9ea:	f7ff fd0d 	bl	800c408 <_Balloc>
 800c9ee:	4602      	mov	r2, r0
 800c9f0:	b928      	cbnz	r0, 800c9fe <__mdiff+0x2e>
 800c9f2:	f240 2132 	movw	r1, #562	; 0x232
 800c9f6:	4b3a      	ldr	r3, [pc, #232]	; (800cae0 <__mdiff+0x110>)
 800c9f8:	483a      	ldr	r0, [pc, #232]	; (800cae4 <__mdiff+0x114>)
 800c9fa:	f000 fbaf 	bl	800d15c <__assert_func>
 800c9fe:	2301      	movs	r3, #1
 800ca00:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800ca04:	4610      	mov	r0, r2
 800ca06:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca0a:	bfa4      	itt	ge
 800ca0c:	4623      	movge	r3, r4
 800ca0e:	462c      	movge	r4, r5
 800ca10:	4638      	mov	r0, r7
 800ca12:	6861      	ldr	r1, [r4, #4]
 800ca14:	bfa6      	itte	ge
 800ca16:	461d      	movge	r5, r3
 800ca18:	2600      	movge	r6, #0
 800ca1a:	2601      	movlt	r6, #1
 800ca1c:	f7ff fcf4 	bl	800c408 <_Balloc>
 800ca20:	4602      	mov	r2, r0
 800ca22:	b918      	cbnz	r0, 800ca2c <__mdiff+0x5c>
 800ca24:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ca28:	4b2d      	ldr	r3, [pc, #180]	; (800cae0 <__mdiff+0x110>)
 800ca2a:	e7e5      	b.n	800c9f8 <__mdiff+0x28>
 800ca2c:	f102 0814 	add.w	r8, r2, #20
 800ca30:	46c2      	mov	sl, r8
 800ca32:	f04f 0c00 	mov.w	ip, #0
 800ca36:	6927      	ldr	r7, [r4, #16]
 800ca38:	60c6      	str	r6, [r0, #12]
 800ca3a:	692e      	ldr	r6, [r5, #16]
 800ca3c:	f104 0014 	add.w	r0, r4, #20
 800ca40:	f105 0914 	add.w	r9, r5, #20
 800ca44:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800ca48:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ca4c:	3410      	adds	r4, #16
 800ca4e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800ca52:	f859 3b04 	ldr.w	r3, [r9], #4
 800ca56:	fa1f f18b 	uxth.w	r1, fp
 800ca5a:	448c      	add	ip, r1
 800ca5c:	b299      	uxth	r1, r3
 800ca5e:	0c1b      	lsrs	r3, r3, #16
 800ca60:	ebac 0101 	sub.w	r1, ip, r1
 800ca64:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ca68:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800ca6c:	b289      	uxth	r1, r1
 800ca6e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800ca72:	454e      	cmp	r6, r9
 800ca74:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800ca78:	f84a 3b04 	str.w	r3, [sl], #4
 800ca7c:	d8e7      	bhi.n	800ca4e <__mdiff+0x7e>
 800ca7e:	1b73      	subs	r3, r6, r5
 800ca80:	3b15      	subs	r3, #21
 800ca82:	f023 0303 	bic.w	r3, r3, #3
 800ca86:	3515      	adds	r5, #21
 800ca88:	3304      	adds	r3, #4
 800ca8a:	42ae      	cmp	r6, r5
 800ca8c:	bf38      	it	cc
 800ca8e:	2304      	movcc	r3, #4
 800ca90:	4418      	add	r0, r3
 800ca92:	4443      	add	r3, r8
 800ca94:	461e      	mov	r6, r3
 800ca96:	4605      	mov	r5, r0
 800ca98:	4575      	cmp	r5, lr
 800ca9a:	d30e      	bcc.n	800caba <__mdiff+0xea>
 800ca9c:	f10e 0103 	add.w	r1, lr, #3
 800caa0:	1a09      	subs	r1, r1, r0
 800caa2:	f021 0103 	bic.w	r1, r1, #3
 800caa6:	3803      	subs	r0, #3
 800caa8:	4586      	cmp	lr, r0
 800caaa:	bf38      	it	cc
 800caac:	2100      	movcc	r1, #0
 800caae:	4419      	add	r1, r3
 800cab0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800cab4:	b18b      	cbz	r3, 800cada <__mdiff+0x10a>
 800cab6:	6117      	str	r7, [r2, #16]
 800cab8:	e7a4      	b.n	800ca04 <__mdiff+0x34>
 800caba:	f855 8b04 	ldr.w	r8, [r5], #4
 800cabe:	fa1f f188 	uxth.w	r1, r8
 800cac2:	4461      	add	r1, ip
 800cac4:	140c      	asrs	r4, r1, #16
 800cac6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800caca:	b289      	uxth	r1, r1
 800cacc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800cad0:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800cad4:	f846 1b04 	str.w	r1, [r6], #4
 800cad8:	e7de      	b.n	800ca98 <__mdiff+0xc8>
 800cada:	3f01      	subs	r7, #1
 800cadc:	e7e8      	b.n	800cab0 <__mdiff+0xe0>
 800cade:	bf00      	nop
 800cae0:	0800dde8 	.word	0x0800dde8
 800cae4:	0800de74 	.word	0x0800de74

0800cae8 <__ulp>:
 800cae8:	4b11      	ldr	r3, [pc, #68]	; (800cb30 <__ulp+0x48>)
 800caea:	400b      	ands	r3, r1
 800caec:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	dd02      	ble.n	800cafa <__ulp+0x12>
 800caf4:	2000      	movs	r0, #0
 800caf6:	4619      	mov	r1, r3
 800caf8:	4770      	bx	lr
 800cafa:	425b      	negs	r3, r3
 800cafc:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800cb00:	f04f 0000 	mov.w	r0, #0
 800cb04:	f04f 0100 	mov.w	r1, #0
 800cb08:	ea4f 5223 	mov.w	r2, r3, asr #20
 800cb0c:	da04      	bge.n	800cb18 <__ulp+0x30>
 800cb0e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800cb12:	fa43 f102 	asr.w	r1, r3, r2
 800cb16:	4770      	bx	lr
 800cb18:	f1a2 0314 	sub.w	r3, r2, #20
 800cb1c:	2b1e      	cmp	r3, #30
 800cb1e:	bfd6      	itet	le
 800cb20:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800cb24:	2301      	movgt	r3, #1
 800cb26:	fa22 f303 	lsrle.w	r3, r2, r3
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	4770      	bx	lr
 800cb2e:	bf00      	nop
 800cb30:	7ff00000 	.word	0x7ff00000

0800cb34 <__b2d>:
 800cb34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb38:	6907      	ldr	r7, [r0, #16]
 800cb3a:	f100 0914 	add.w	r9, r0, #20
 800cb3e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800cb42:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800cb46:	f1a7 0804 	sub.w	r8, r7, #4
 800cb4a:	4630      	mov	r0, r6
 800cb4c:	f7ff fd4e 	bl	800c5ec <__hi0bits>
 800cb50:	f1c0 0320 	rsb	r3, r0, #32
 800cb54:	280a      	cmp	r0, #10
 800cb56:	600b      	str	r3, [r1, #0]
 800cb58:	491f      	ldr	r1, [pc, #124]	; (800cbd8 <__b2d+0xa4>)
 800cb5a:	dc17      	bgt.n	800cb8c <__b2d+0x58>
 800cb5c:	45c1      	cmp	r9, r8
 800cb5e:	bf28      	it	cs
 800cb60:	2200      	movcs	r2, #0
 800cb62:	f1c0 0c0b 	rsb	ip, r0, #11
 800cb66:	fa26 f30c 	lsr.w	r3, r6, ip
 800cb6a:	bf38      	it	cc
 800cb6c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800cb70:	ea43 0501 	orr.w	r5, r3, r1
 800cb74:	f100 0315 	add.w	r3, r0, #21
 800cb78:	fa06 f303 	lsl.w	r3, r6, r3
 800cb7c:	fa22 f20c 	lsr.w	r2, r2, ip
 800cb80:	ea43 0402 	orr.w	r4, r3, r2
 800cb84:	4620      	mov	r0, r4
 800cb86:	4629      	mov	r1, r5
 800cb88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb8c:	45c1      	cmp	r9, r8
 800cb8e:	bf2e      	itee	cs
 800cb90:	2200      	movcs	r2, #0
 800cb92:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800cb96:	f1a7 0808 	subcc.w	r8, r7, #8
 800cb9a:	f1b0 030b 	subs.w	r3, r0, #11
 800cb9e:	d016      	beq.n	800cbce <__b2d+0x9a>
 800cba0:	f1c3 0720 	rsb	r7, r3, #32
 800cba4:	fa22 f107 	lsr.w	r1, r2, r7
 800cba8:	45c8      	cmp	r8, r9
 800cbaa:	fa06 f603 	lsl.w	r6, r6, r3
 800cbae:	ea46 0601 	orr.w	r6, r6, r1
 800cbb2:	bf94      	ite	ls
 800cbb4:	2100      	movls	r1, #0
 800cbb6:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800cbba:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800cbbe:	fa02 f003 	lsl.w	r0, r2, r3
 800cbc2:	40f9      	lsrs	r1, r7
 800cbc4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800cbc8:	ea40 0401 	orr.w	r4, r0, r1
 800cbcc:	e7da      	b.n	800cb84 <__b2d+0x50>
 800cbce:	4614      	mov	r4, r2
 800cbd0:	ea46 0501 	orr.w	r5, r6, r1
 800cbd4:	e7d6      	b.n	800cb84 <__b2d+0x50>
 800cbd6:	bf00      	nop
 800cbd8:	3ff00000 	.word	0x3ff00000

0800cbdc <__d2b>:
 800cbdc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800cbe0:	2101      	movs	r1, #1
 800cbe2:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800cbe6:	4690      	mov	r8, r2
 800cbe8:	461d      	mov	r5, r3
 800cbea:	f7ff fc0d 	bl	800c408 <_Balloc>
 800cbee:	4604      	mov	r4, r0
 800cbf0:	b930      	cbnz	r0, 800cc00 <__d2b+0x24>
 800cbf2:	4602      	mov	r2, r0
 800cbf4:	f240 310a 	movw	r1, #778	; 0x30a
 800cbf8:	4b24      	ldr	r3, [pc, #144]	; (800cc8c <__d2b+0xb0>)
 800cbfa:	4825      	ldr	r0, [pc, #148]	; (800cc90 <__d2b+0xb4>)
 800cbfc:	f000 faae 	bl	800d15c <__assert_func>
 800cc00:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800cc04:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800cc08:	bb2d      	cbnz	r5, 800cc56 <__d2b+0x7a>
 800cc0a:	9301      	str	r3, [sp, #4]
 800cc0c:	f1b8 0300 	subs.w	r3, r8, #0
 800cc10:	d026      	beq.n	800cc60 <__d2b+0x84>
 800cc12:	4668      	mov	r0, sp
 800cc14:	9300      	str	r3, [sp, #0]
 800cc16:	f7ff fd09 	bl	800c62c <__lo0bits>
 800cc1a:	9900      	ldr	r1, [sp, #0]
 800cc1c:	b1f0      	cbz	r0, 800cc5c <__d2b+0x80>
 800cc1e:	9a01      	ldr	r2, [sp, #4]
 800cc20:	f1c0 0320 	rsb	r3, r0, #32
 800cc24:	fa02 f303 	lsl.w	r3, r2, r3
 800cc28:	430b      	orrs	r3, r1
 800cc2a:	40c2      	lsrs	r2, r0
 800cc2c:	6163      	str	r3, [r4, #20]
 800cc2e:	9201      	str	r2, [sp, #4]
 800cc30:	9b01      	ldr	r3, [sp, #4]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	bf14      	ite	ne
 800cc36:	2102      	movne	r1, #2
 800cc38:	2101      	moveq	r1, #1
 800cc3a:	61a3      	str	r3, [r4, #24]
 800cc3c:	6121      	str	r1, [r4, #16]
 800cc3e:	b1c5      	cbz	r5, 800cc72 <__d2b+0x96>
 800cc40:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cc44:	4405      	add	r5, r0
 800cc46:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cc4a:	603d      	str	r5, [r7, #0]
 800cc4c:	6030      	str	r0, [r6, #0]
 800cc4e:	4620      	mov	r0, r4
 800cc50:	b002      	add	sp, #8
 800cc52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cc5a:	e7d6      	b.n	800cc0a <__d2b+0x2e>
 800cc5c:	6161      	str	r1, [r4, #20]
 800cc5e:	e7e7      	b.n	800cc30 <__d2b+0x54>
 800cc60:	a801      	add	r0, sp, #4
 800cc62:	f7ff fce3 	bl	800c62c <__lo0bits>
 800cc66:	2101      	movs	r1, #1
 800cc68:	9b01      	ldr	r3, [sp, #4]
 800cc6a:	6121      	str	r1, [r4, #16]
 800cc6c:	6163      	str	r3, [r4, #20]
 800cc6e:	3020      	adds	r0, #32
 800cc70:	e7e5      	b.n	800cc3e <__d2b+0x62>
 800cc72:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800cc76:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cc7a:	6038      	str	r0, [r7, #0]
 800cc7c:	6918      	ldr	r0, [r3, #16]
 800cc7e:	f7ff fcb5 	bl	800c5ec <__hi0bits>
 800cc82:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800cc86:	6031      	str	r1, [r6, #0]
 800cc88:	e7e1      	b.n	800cc4e <__d2b+0x72>
 800cc8a:	bf00      	nop
 800cc8c:	0800dde8 	.word	0x0800dde8
 800cc90:	0800de74 	.word	0x0800de74

0800cc94 <__ratio>:
 800cc94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc98:	4688      	mov	r8, r1
 800cc9a:	4669      	mov	r1, sp
 800cc9c:	4681      	mov	r9, r0
 800cc9e:	f7ff ff49 	bl	800cb34 <__b2d>
 800cca2:	460f      	mov	r7, r1
 800cca4:	4604      	mov	r4, r0
 800cca6:	460d      	mov	r5, r1
 800cca8:	4640      	mov	r0, r8
 800ccaa:	a901      	add	r1, sp, #4
 800ccac:	f7ff ff42 	bl	800cb34 <__b2d>
 800ccb0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ccb4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ccb8:	468b      	mov	fp, r1
 800ccba:	eba3 0c02 	sub.w	ip, r3, r2
 800ccbe:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ccc2:	1a9b      	subs	r3, r3, r2
 800ccc4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	bfd5      	itete	le
 800cccc:	460a      	movle	r2, r1
 800ccce:	462a      	movgt	r2, r5
 800ccd0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ccd4:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ccd8:	bfd8      	it	le
 800ccda:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ccde:	465b      	mov	r3, fp
 800cce0:	4602      	mov	r2, r0
 800cce2:	4639      	mov	r1, r7
 800cce4:	4620      	mov	r0, r4
 800cce6:	f7f3 fd21 	bl	800072c <__aeabi_ddiv>
 800ccea:	b003      	add	sp, #12
 800ccec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ccf0 <__copybits>:
 800ccf0:	3901      	subs	r1, #1
 800ccf2:	b570      	push	{r4, r5, r6, lr}
 800ccf4:	1149      	asrs	r1, r1, #5
 800ccf6:	6914      	ldr	r4, [r2, #16]
 800ccf8:	3101      	adds	r1, #1
 800ccfa:	f102 0314 	add.w	r3, r2, #20
 800ccfe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cd02:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cd06:	1f05      	subs	r5, r0, #4
 800cd08:	42a3      	cmp	r3, r4
 800cd0a:	d30c      	bcc.n	800cd26 <__copybits+0x36>
 800cd0c:	1aa3      	subs	r3, r4, r2
 800cd0e:	3b11      	subs	r3, #17
 800cd10:	f023 0303 	bic.w	r3, r3, #3
 800cd14:	3211      	adds	r2, #17
 800cd16:	42a2      	cmp	r2, r4
 800cd18:	bf88      	it	hi
 800cd1a:	2300      	movhi	r3, #0
 800cd1c:	4418      	add	r0, r3
 800cd1e:	2300      	movs	r3, #0
 800cd20:	4288      	cmp	r0, r1
 800cd22:	d305      	bcc.n	800cd30 <__copybits+0x40>
 800cd24:	bd70      	pop	{r4, r5, r6, pc}
 800cd26:	f853 6b04 	ldr.w	r6, [r3], #4
 800cd2a:	f845 6f04 	str.w	r6, [r5, #4]!
 800cd2e:	e7eb      	b.n	800cd08 <__copybits+0x18>
 800cd30:	f840 3b04 	str.w	r3, [r0], #4
 800cd34:	e7f4      	b.n	800cd20 <__copybits+0x30>

0800cd36 <__any_on>:
 800cd36:	f100 0214 	add.w	r2, r0, #20
 800cd3a:	6900      	ldr	r0, [r0, #16]
 800cd3c:	114b      	asrs	r3, r1, #5
 800cd3e:	4298      	cmp	r0, r3
 800cd40:	b510      	push	{r4, lr}
 800cd42:	db11      	blt.n	800cd68 <__any_on+0x32>
 800cd44:	dd0a      	ble.n	800cd5c <__any_on+0x26>
 800cd46:	f011 011f 	ands.w	r1, r1, #31
 800cd4a:	d007      	beq.n	800cd5c <__any_on+0x26>
 800cd4c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cd50:	fa24 f001 	lsr.w	r0, r4, r1
 800cd54:	fa00 f101 	lsl.w	r1, r0, r1
 800cd58:	428c      	cmp	r4, r1
 800cd5a:	d10b      	bne.n	800cd74 <__any_on+0x3e>
 800cd5c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cd60:	4293      	cmp	r3, r2
 800cd62:	d803      	bhi.n	800cd6c <__any_on+0x36>
 800cd64:	2000      	movs	r0, #0
 800cd66:	bd10      	pop	{r4, pc}
 800cd68:	4603      	mov	r3, r0
 800cd6a:	e7f7      	b.n	800cd5c <__any_on+0x26>
 800cd6c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cd70:	2900      	cmp	r1, #0
 800cd72:	d0f5      	beq.n	800cd60 <__any_on+0x2a>
 800cd74:	2001      	movs	r0, #1
 800cd76:	e7f6      	b.n	800cd66 <__any_on+0x30>

0800cd78 <_calloc_r>:
 800cd78:	b570      	push	{r4, r5, r6, lr}
 800cd7a:	fba1 5402 	umull	r5, r4, r1, r2
 800cd7e:	b934      	cbnz	r4, 800cd8e <_calloc_r+0x16>
 800cd80:	4629      	mov	r1, r5
 800cd82:	f7fc f9e5 	bl	8009150 <_malloc_r>
 800cd86:	4606      	mov	r6, r0
 800cd88:	b928      	cbnz	r0, 800cd96 <_calloc_r+0x1e>
 800cd8a:	4630      	mov	r0, r6
 800cd8c:	bd70      	pop	{r4, r5, r6, pc}
 800cd8e:	220c      	movs	r2, #12
 800cd90:	2600      	movs	r6, #0
 800cd92:	6002      	str	r2, [r0, #0]
 800cd94:	e7f9      	b.n	800cd8a <_calloc_r+0x12>
 800cd96:	462a      	mov	r2, r5
 800cd98:	4621      	mov	r1, r4
 800cd9a:	f7fc f9b0 	bl	80090fe <memset>
 800cd9e:	e7f4      	b.n	800cd8a <_calloc_r+0x12>

0800cda0 <_free_r>:
 800cda0:	b538      	push	{r3, r4, r5, lr}
 800cda2:	4605      	mov	r5, r0
 800cda4:	2900      	cmp	r1, #0
 800cda6:	d040      	beq.n	800ce2a <_free_r+0x8a>
 800cda8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cdac:	1f0c      	subs	r4, r1, #4
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	bfb8      	it	lt
 800cdb2:	18e4      	addlt	r4, r4, r3
 800cdb4:	f7ff fb1c 	bl	800c3f0 <__malloc_lock>
 800cdb8:	4a1c      	ldr	r2, [pc, #112]	; (800ce2c <_free_r+0x8c>)
 800cdba:	6813      	ldr	r3, [r2, #0]
 800cdbc:	b933      	cbnz	r3, 800cdcc <_free_r+0x2c>
 800cdbe:	6063      	str	r3, [r4, #4]
 800cdc0:	6014      	str	r4, [r2, #0]
 800cdc2:	4628      	mov	r0, r5
 800cdc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cdc8:	f7ff bb18 	b.w	800c3fc <__malloc_unlock>
 800cdcc:	42a3      	cmp	r3, r4
 800cdce:	d908      	bls.n	800cde2 <_free_r+0x42>
 800cdd0:	6820      	ldr	r0, [r4, #0]
 800cdd2:	1821      	adds	r1, r4, r0
 800cdd4:	428b      	cmp	r3, r1
 800cdd6:	bf01      	itttt	eq
 800cdd8:	6819      	ldreq	r1, [r3, #0]
 800cdda:	685b      	ldreq	r3, [r3, #4]
 800cddc:	1809      	addeq	r1, r1, r0
 800cdde:	6021      	streq	r1, [r4, #0]
 800cde0:	e7ed      	b.n	800cdbe <_free_r+0x1e>
 800cde2:	461a      	mov	r2, r3
 800cde4:	685b      	ldr	r3, [r3, #4]
 800cde6:	b10b      	cbz	r3, 800cdec <_free_r+0x4c>
 800cde8:	42a3      	cmp	r3, r4
 800cdea:	d9fa      	bls.n	800cde2 <_free_r+0x42>
 800cdec:	6811      	ldr	r1, [r2, #0]
 800cdee:	1850      	adds	r0, r2, r1
 800cdf0:	42a0      	cmp	r0, r4
 800cdf2:	d10b      	bne.n	800ce0c <_free_r+0x6c>
 800cdf4:	6820      	ldr	r0, [r4, #0]
 800cdf6:	4401      	add	r1, r0
 800cdf8:	1850      	adds	r0, r2, r1
 800cdfa:	4283      	cmp	r3, r0
 800cdfc:	6011      	str	r1, [r2, #0]
 800cdfe:	d1e0      	bne.n	800cdc2 <_free_r+0x22>
 800ce00:	6818      	ldr	r0, [r3, #0]
 800ce02:	685b      	ldr	r3, [r3, #4]
 800ce04:	4401      	add	r1, r0
 800ce06:	6011      	str	r1, [r2, #0]
 800ce08:	6053      	str	r3, [r2, #4]
 800ce0a:	e7da      	b.n	800cdc2 <_free_r+0x22>
 800ce0c:	d902      	bls.n	800ce14 <_free_r+0x74>
 800ce0e:	230c      	movs	r3, #12
 800ce10:	602b      	str	r3, [r5, #0]
 800ce12:	e7d6      	b.n	800cdc2 <_free_r+0x22>
 800ce14:	6820      	ldr	r0, [r4, #0]
 800ce16:	1821      	adds	r1, r4, r0
 800ce18:	428b      	cmp	r3, r1
 800ce1a:	bf01      	itttt	eq
 800ce1c:	6819      	ldreq	r1, [r3, #0]
 800ce1e:	685b      	ldreq	r3, [r3, #4]
 800ce20:	1809      	addeq	r1, r1, r0
 800ce22:	6021      	streq	r1, [r4, #0]
 800ce24:	6063      	str	r3, [r4, #4]
 800ce26:	6054      	str	r4, [r2, #4]
 800ce28:	e7cb      	b.n	800cdc2 <_free_r+0x22>
 800ce2a:	bd38      	pop	{r3, r4, r5, pc}
 800ce2c:	20003264 	.word	0x20003264

0800ce30 <__ssputs_r>:
 800ce30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce34:	688e      	ldr	r6, [r1, #8]
 800ce36:	4682      	mov	sl, r0
 800ce38:	429e      	cmp	r6, r3
 800ce3a:	460c      	mov	r4, r1
 800ce3c:	4690      	mov	r8, r2
 800ce3e:	461f      	mov	r7, r3
 800ce40:	d838      	bhi.n	800ceb4 <__ssputs_r+0x84>
 800ce42:	898a      	ldrh	r2, [r1, #12]
 800ce44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ce48:	d032      	beq.n	800ceb0 <__ssputs_r+0x80>
 800ce4a:	6825      	ldr	r5, [r4, #0]
 800ce4c:	6909      	ldr	r1, [r1, #16]
 800ce4e:	3301      	adds	r3, #1
 800ce50:	eba5 0901 	sub.w	r9, r5, r1
 800ce54:	6965      	ldr	r5, [r4, #20]
 800ce56:	444b      	add	r3, r9
 800ce58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ce5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ce60:	106d      	asrs	r5, r5, #1
 800ce62:	429d      	cmp	r5, r3
 800ce64:	bf38      	it	cc
 800ce66:	461d      	movcc	r5, r3
 800ce68:	0553      	lsls	r3, r2, #21
 800ce6a:	d531      	bpl.n	800ced0 <__ssputs_r+0xa0>
 800ce6c:	4629      	mov	r1, r5
 800ce6e:	f7fc f96f 	bl	8009150 <_malloc_r>
 800ce72:	4606      	mov	r6, r0
 800ce74:	b950      	cbnz	r0, 800ce8c <__ssputs_r+0x5c>
 800ce76:	230c      	movs	r3, #12
 800ce78:	f04f 30ff 	mov.w	r0, #4294967295
 800ce7c:	f8ca 3000 	str.w	r3, [sl]
 800ce80:	89a3      	ldrh	r3, [r4, #12]
 800ce82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce86:	81a3      	strh	r3, [r4, #12]
 800ce88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce8c:	464a      	mov	r2, r9
 800ce8e:	6921      	ldr	r1, [r4, #16]
 800ce90:	f7fc f927 	bl	80090e2 <memcpy>
 800ce94:	89a3      	ldrh	r3, [r4, #12]
 800ce96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ce9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce9e:	81a3      	strh	r3, [r4, #12]
 800cea0:	6126      	str	r6, [r4, #16]
 800cea2:	444e      	add	r6, r9
 800cea4:	6026      	str	r6, [r4, #0]
 800cea6:	463e      	mov	r6, r7
 800cea8:	6165      	str	r5, [r4, #20]
 800ceaa:	eba5 0509 	sub.w	r5, r5, r9
 800ceae:	60a5      	str	r5, [r4, #8]
 800ceb0:	42be      	cmp	r6, r7
 800ceb2:	d900      	bls.n	800ceb6 <__ssputs_r+0x86>
 800ceb4:	463e      	mov	r6, r7
 800ceb6:	4632      	mov	r2, r6
 800ceb8:	4641      	mov	r1, r8
 800ceba:	6820      	ldr	r0, [r4, #0]
 800cebc:	f000 f97e 	bl	800d1bc <memmove>
 800cec0:	68a3      	ldr	r3, [r4, #8]
 800cec2:	2000      	movs	r0, #0
 800cec4:	1b9b      	subs	r3, r3, r6
 800cec6:	60a3      	str	r3, [r4, #8]
 800cec8:	6823      	ldr	r3, [r4, #0]
 800ceca:	4433      	add	r3, r6
 800cecc:	6023      	str	r3, [r4, #0]
 800cece:	e7db      	b.n	800ce88 <__ssputs_r+0x58>
 800ced0:	462a      	mov	r2, r5
 800ced2:	f000 f98d 	bl	800d1f0 <_realloc_r>
 800ced6:	4606      	mov	r6, r0
 800ced8:	2800      	cmp	r0, #0
 800ceda:	d1e1      	bne.n	800cea0 <__ssputs_r+0x70>
 800cedc:	4650      	mov	r0, sl
 800cede:	6921      	ldr	r1, [r4, #16]
 800cee0:	f7ff ff5e 	bl	800cda0 <_free_r>
 800cee4:	e7c7      	b.n	800ce76 <__ssputs_r+0x46>
	...

0800cee8 <_svfiprintf_r>:
 800cee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceec:	4698      	mov	r8, r3
 800ceee:	898b      	ldrh	r3, [r1, #12]
 800cef0:	4607      	mov	r7, r0
 800cef2:	061b      	lsls	r3, r3, #24
 800cef4:	460d      	mov	r5, r1
 800cef6:	4614      	mov	r4, r2
 800cef8:	b09d      	sub	sp, #116	; 0x74
 800cefa:	d50e      	bpl.n	800cf1a <_svfiprintf_r+0x32>
 800cefc:	690b      	ldr	r3, [r1, #16]
 800cefe:	b963      	cbnz	r3, 800cf1a <_svfiprintf_r+0x32>
 800cf00:	2140      	movs	r1, #64	; 0x40
 800cf02:	f7fc f925 	bl	8009150 <_malloc_r>
 800cf06:	6028      	str	r0, [r5, #0]
 800cf08:	6128      	str	r0, [r5, #16]
 800cf0a:	b920      	cbnz	r0, 800cf16 <_svfiprintf_r+0x2e>
 800cf0c:	230c      	movs	r3, #12
 800cf0e:	603b      	str	r3, [r7, #0]
 800cf10:	f04f 30ff 	mov.w	r0, #4294967295
 800cf14:	e0d1      	b.n	800d0ba <_svfiprintf_r+0x1d2>
 800cf16:	2340      	movs	r3, #64	; 0x40
 800cf18:	616b      	str	r3, [r5, #20]
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	9309      	str	r3, [sp, #36]	; 0x24
 800cf1e:	2320      	movs	r3, #32
 800cf20:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cf24:	2330      	movs	r3, #48	; 0x30
 800cf26:	f04f 0901 	mov.w	r9, #1
 800cf2a:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf2e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d0d4 <_svfiprintf_r+0x1ec>
 800cf32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cf36:	4623      	mov	r3, r4
 800cf38:	469a      	mov	sl, r3
 800cf3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf3e:	b10a      	cbz	r2, 800cf44 <_svfiprintf_r+0x5c>
 800cf40:	2a25      	cmp	r2, #37	; 0x25
 800cf42:	d1f9      	bne.n	800cf38 <_svfiprintf_r+0x50>
 800cf44:	ebba 0b04 	subs.w	fp, sl, r4
 800cf48:	d00b      	beq.n	800cf62 <_svfiprintf_r+0x7a>
 800cf4a:	465b      	mov	r3, fp
 800cf4c:	4622      	mov	r2, r4
 800cf4e:	4629      	mov	r1, r5
 800cf50:	4638      	mov	r0, r7
 800cf52:	f7ff ff6d 	bl	800ce30 <__ssputs_r>
 800cf56:	3001      	adds	r0, #1
 800cf58:	f000 80aa 	beq.w	800d0b0 <_svfiprintf_r+0x1c8>
 800cf5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf5e:	445a      	add	r2, fp
 800cf60:	9209      	str	r2, [sp, #36]	; 0x24
 800cf62:	f89a 3000 	ldrb.w	r3, [sl]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	f000 80a2 	beq.w	800d0b0 <_svfiprintf_r+0x1c8>
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	f04f 32ff 	mov.w	r2, #4294967295
 800cf72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf76:	f10a 0a01 	add.w	sl, sl, #1
 800cf7a:	9304      	str	r3, [sp, #16]
 800cf7c:	9307      	str	r3, [sp, #28]
 800cf7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cf82:	931a      	str	r3, [sp, #104]	; 0x68
 800cf84:	4654      	mov	r4, sl
 800cf86:	2205      	movs	r2, #5
 800cf88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf8c:	4851      	ldr	r0, [pc, #324]	; (800d0d4 <_svfiprintf_r+0x1ec>)
 800cf8e:	f7ff fa21 	bl	800c3d4 <memchr>
 800cf92:	9a04      	ldr	r2, [sp, #16]
 800cf94:	b9d8      	cbnz	r0, 800cfce <_svfiprintf_r+0xe6>
 800cf96:	06d0      	lsls	r0, r2, #27
 800cf98:	bf44      	itt	mi
 800cf9a:	2320      	movmi	r3, #32
 800cf9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cfa0:	0711      	lsls	r1, r2, #28
 800cfa2:	bf44      	itt	mi
 800cfa4:	232b      	movmi	r3, #43	; 0x2b
 800cfa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cfaa:	f89a 3000 	ldrb.w	r3, [sl]
 800cfae:	2b2a      	cmp	r3, #42	; 0x2a
 800cfb0:	d015      	beq.n	800cfde <_svfiprintf_r+0xf6>
 800cfb2:	4654      	mov	r4, sl
 800cfb4:	2000      	movs	r0, #0
 800cfb6:	f04f 0c0a 	mov.w	ip, #10
 800cfba:	9a07      	ldr	r2, [sp, #28]
 800cfbc:	4621      	mov	r1, r4
 800cfbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cfc2:	3b30      	subs	r3, #48	; 0x30
 800cfc4:	2b09      	cmp	r3, #9
 800cfc6:	d94e      	bls.n	800d066 <_svfiprintf_r+0x17e>
 800cfc8:	b1b0      	cbz	r0, 800cff8 <_svfiprintf_r+0x110>
 800cfca:	9207      	str	r2, [sp, #28]
 800cfcc:	e014      	b.n	800cff8 <_svfiprintf_r+0x110>
 800cfce:	eba0 0308 	sub.w	r3, r0, r8
 800cfd2:	fa09 f303 	lsl.w	r3, r9, r3
 800cfd6:	4313      	orrs	r3, r2
 800cfd8:	46a2      	mov	sl, r4
 800cfda:	9304      	str	r3, [sp, #16]
 800cfdc:	e7d2      	b.n	800cf84 <_svfiprintf_r+0x9c>
 800cfde:	9b03      	ldr	r3, [sp, #12]
 800cfe0:	1d19      	adds	r1, r3, #4
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	9103      	str	r1, [sp, #12]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	bfbb      	ittet	lt
 800cfea:	425b      	neglt	r3, r3
 800cfec:	f042 0202 	orrlt.w	r2, r2, #2
 800cff0:	9307      	strge	r3, [sp, #28]
 800cff2:	9307      	strlt	r3, [sp, #28]
 800cff4:	bfb8      	it	lt
 800cff6:	9204      	strlt	r2, [sp, #16]
 800cff8:	7823      	ldrb	r3, [r4, #0]
 800cffa:	2b2e      	cmp	r3, #46	; 0x2e
 800cffc:	d10c      	bne.n	800d018 <_svfiprintf_r+0x130>
 800cffe:	7863      	ldrb	r3, [r4, #1]
 800d000:	2b2a      	cmp	r3, #42	; 0x2a
 800d002:	d135      	bne.n	800d070 <_svfiprintf_r+0x188>
 800d004:	9b03      	ldr	r3, [sp, #12]
 800d006:	3402      	adds	r4, #2
 800d008:	1d1a      	adds	r2, r3, #4
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	9203      	str	r2, [sp, #12]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	bfb8      	it	lt
 800d012:	f04f 33ff 	movlt.w	r3, #4294967295
 800d016:	9305      	str	r3, [sp, #20]
 800d018:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800d0d8 <_svfiprintf_r+0x1f0>
 800d01c:	2203      	movs	r2, #3
 800d01e:	4650      	mov	r0, sl
 800d020:	7821      	ldrb	r1, [r4, #0]
 800d022:	f7ff f9d7 	bl	800c3d4 <memchr>
 800d026:	b140      	cbz	r0, 800d03a <_svfiprintf_r+0x152>
 800d028:	2340      	movs	r3, #64	; 0x40
 800d02a:	eba0 000a 	sub.w	r0, r0, sl
 800d02e:	fa03 f000 	lsl.w	r0, r3, r0
 800d032:	9b04      	ldr	r3, [sp, #16]
 800d034:	3401      	adds	r4, #1
 800d036:	4303      	orrs	r3, r0
 800d038:	9304      	str	r3, [sp, #16]
 800d03a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d03e:	2206      	movs	r2, #6
 800d040:	4826      	ldr	r0, [pc, #152]	; (800d0dc <_svfiprintf_r+0x1f4>)
 800d042:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d046:	f7ff f9c5 	bl	800c3d4 <memchr>
 800d04a:	2800      	cmp	r0, #0
 800d04c:	d038      	beq.n	800d0c0 <_svfiprintf_r+0x1d8>
 800d04e:	4b24      	ldr	r3, [pc, #144]	; (800d0e0 <_svfiprintf_r+0x1f8>)
 800d050:	bb1b      	cbnz	r3, 800d09a <_svfiprintf_r+0x1b2>
 800d052:	9b03      	ldr	r3, [sp, #12]
 800d054:	3307      	adds	r3, #7
 800d056:	f023 0307 	bic.w	r3, r3, #7
 800d05a:	3308      	adds	r3, #8
 800d05c:	9303      	str	r3, [sp, #12]
 800d05e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d060:	4433      	add	r3, r6
 800d062:	9309      	str	r3, [sp, #36]	; 0x24
 800d064:	e767      	b.n	800cf36 <_svfiprintf_r+0x4e>
 800d066:	460c      	mov	r4, r1
 800d068:	2001      	movs	r0, #1
 800d06a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d06e:	e7a5      	b.n	800cfbc <_svfiprintf_r+0xd4>
 800d070:	2300      	movs	r3, #0
 800d072:	f04f 0c0a 	mov.w	ip, #10
 800d076:	4619      	mov	r1, r3
 800d078:	3401      	adds	r4, #1
 800d07a:	9305      	str	r3, [sp, #20]
 800d07c:	4620      	mov	r0, r4
 800d07e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d082:	3a30      	subs	r2, #48	; 0x30
 800d084:	2a09      	cmp	r2, #9
 800d086:	d903      	bls.n	800d090 <_svfiprintf_r+0x1a8>
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d0c5      	beq.n	800d018 <_svfiprintf_r+0x130>
 800d08c:	9105      	str	r1, [sp, #20]
 800d08e:	e7c3      	b.n	800d018 <_svfiprintf_r+0x130>
 800d090:	4604      	mov	r4, r0
 800d092:	2301      	movs	r3, #1
 800d094:	fb0c 2101 	mla	r1, ip, r1, r2
 800d098:	e7f0      	b.n	800d07c <_svfiprintf_r+0x194>
 800d09a:	ab03      	add	r3, sp, #12
 800d09c:	9300      	str	r3, [sp, #0]
 800d09e:	462a      	mov	r2, r5
 800d0a0:	4638      	mov	r0, r7
 800d0a2:	4b10      	ldr	r3, [pc, #64]	; (800d0e4 <_svfiprintf_r+0x1fc>)
 800d0a4:	a904      	add	r1, sp, #16
 800d0a6:	f7fc f965 	bl	8009374 <_printf_float>
 800d0aa:	1c42      	adds	r2, r0, #1
 800d0ac:	4606      	mov	r6, r0
 800d0ae:	d1d6      	bne.n	800d05e <_svfiprintf_r+0x176>
 800d0b0:	89ab      	ldrh	r3, [r5, #12]
 800d0b2:	065b      	lsls	r3, r3, #25
 800d0b4:	f53f af2c 	bmi.w	800cf10 <_svfiprintf_r+0x28>
 800d0b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d0ba:	b01d      	add	sp, #116	; 0x74
 800d0bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0c0:	ab03      	add	r3, sp, #12
 800d0c2:	9300      	str	r3, [sp, #0]
 800d0c4:	462a      	mov	r2, r5
 800d0c6:	4638      	mov	r0, r7
 800d0c8:	4b06      	ldr	r3, [pc, #24]	; (800d0e4 <_svfiprintf_r+0x1fc>)
 800d0ca:	a904      	add	r1, sp, #16
 800d0cc:	f7fc fbee 	bl	80098ac <_printf_i>
 800d0d0:	e7eb      	b.n	800d0aa <_svfiprintf_r+0x1c2>
 800d0d2:	bf00      	nop
 800d0d4:	0800dfcc 	.word	0x0800dfcc
 800d0d8:	0800dfd2 	.word	0x0800dfd2
 800d0dc:	0800dfd6 	.word	0x0800dfd6
 800d0e0:	08009375 	.word	0x08009375
 800d0e4:	0800ce31 	.word	0x0800ce31

0800d0e8 <_read_r>:
 800d0e8:	b538      	push	{r3, r4, r5, lr}
 800d0ea:	4604      	mov	r4, r0
 800d0ec:	4608      	mov	r0, r1
 800d0ee:	4611      	mov	r1, r2
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	4d05      	ldr	r5, [pc, #20]	; (800d108 <_read_r+0x20>)
 800d0f4:	602a      	str	r2, [r5, #0]
 800d0f6:	461a      	mov	r2, r3
 800d0f8:	f7f4 fccd 	bl	8001a96 <_read>
 800d0fc:	1c43      	adds	r3, r0, #1
 800d0fe:	d102      	bne.n	800d106 <_read_r+0x1e>
 800d100:	682b      	ldr	r3, [r5, #0]
 800d102:	b103      	cbz	r3, 800d106 <_read_r+0x1e>
 800d104:	6023      	str	r3, [r4, #0]
 800d106:	bd38      	pop	{r3, r4, r5, pc}
 800d108:	2000326c 	.word	0x2000326c

0800d10c <nan>:
 800d10c:	2000      	movs	r0, #0
 800d10e:	4901      	ldr	r1, [pc, #4]	; (800d114 <nan+0x8>)
 800d110:	4770      	bx	lr
 800d112:	bf00      	nop
 800d114:	7ff80000 	.word	0x7ff80000

0800d118 <strncmp>:
 800d118:	4603      	mov	r3, r0
 800d11a:	b510      	push	{r4, lr}
 800d11c:	b172      	cbz	r2, 800d13c <strncmp+0x24>
 800d11e:	3901      	subs	r1, #1
 800d120:	1884      	adds	r4, r0, r2
 800d122:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d126:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d12a:	4290      	cmp	r0, r2
 800d12c:	d101      	bne.n	800d132 <strncmp+0x1a>
 800d12e:	42a3      	cmp	r3, r4
 800d130:	d101      	bne.n	800d136 <strncmp+0x1e>
 800d132:	1a80      	subs	r0, r0, r2
 800d134:	bd10      	pop	{r4, pc}
 800d136:	2800      	cmp	r0, #0
 800d138:	d1f3      	bne.n	800d122 <strncmp+0xa>
 800d13a:	e7fa      	b.n	800d132 <strncmp+0x1a>
 800d13c:	4610      	mov	r0, r2
 800d13e:	e7f9      	b.n	800d134 <strncmp+0x1c>

0800d140 <__ascii_wctomb>:
 800d140:	4603      	mov	r3, r0
 800d142:	4608      	mov	r0, r1
 800d144:	b141      	cbz	r1, 800d158 <__ascii_wctomb+0x18>
 800d146:	2aff      	cmp	r2, #255	; 0xff
 800d148:	d904      	bls.n	800d154 <__ascii_wctomb+0x14>
 800d14a:	228a      	movs	r2, #138	; 0x8a
 800d14c:	f04f 30ff 	mov.w	r0, #4294967295
 800d150:	601a      	str	r2, [r3, #0]
 800d152:	4770      	bx	lr
 800d154:	2001      	movs	r0, #1
 800d156:	700a      	strb	r2, [r1, #0]
 800d158:	4770      	bx	lr
	...

0800d15c <__assert_func>:
 800d15c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d15e:	4614      	mov	r4, r2
 800d160:	461a      	mov	r2, r3
 800d162:	4b09      	ldr	r3, [pc, #36]	; (800d188 <__assert_func+0x2c>)
 800d164:	4605      	mov	r5, r0
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	68d8      	ldr	r0, [r3, #12]
 800d16a:	b14c      	cbz	r4, 800d180 <__assert_func+0x24>
 800d16c:	4b07      	ldr	r3, [pc, #28]	; (800d18c <__assert_func+0x30>)
 800d16e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d172:	9100      	str	r1, [sp, #0]
 800d174:	462b      	mov	r3, r5
 800d176:	4906      	ldr	r1, [pc, #24]	; (800d190 <__assert_func+0x34>)
 800d178:	f000 f80e 	bl	800d198 <fiprintf>
 800d17c:	f000 fa7e 	bl	800d67c <abort>
 800d180:	4b04      	ldr	r3, [pc, #16]	; (800d194 <__assert_func+0x38>)
 800d182:	461c      	mov	r4, r3
 800d184:	e7f3      	b.n	800d16e <__assert_func+0x12>
 800d186:	bf00      	nop
 800d188:	20000010 	.word	0x20000010
 800d18c:	0800dfdd 	.word	0x0800dfdd
 800d190:	0800dfea 	.word	0x0800dfea
 800d194:	0800e018 	.word	0x0800e018

0800d198 <fiprintf>:
 800d198:	b40e      	push	{r1, r2, r3}
 800d19a:	b503      	push	{r0, r1, lr}
 800d19c:	4601      	mov	r1, r0
 800d19e:	ab03      	add	r3, sp, #12
 800d1a0:	4805      	ldr	r0, [pc, #20]	; (800d1b8 <fiprintf+0x20>)
 800d1a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1a6:	6800      	ldr	r0, [r0, #0]
 800d1a8:	9301      	str	r3, [sp, #4]
 800d1aa:	f000 f877 	bl	800d29c <_vfiprintf_r>
 800d1ae:	b002      	add	sp, #8
 800d1b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d1b4:	b003      	add	sp, #12
 800d1b6:	4770      	bx	lr
 800d1b8:	20000010 	.word	0x20000010

0800d1bc <memmove>:
 800d1bc:	4288      	cmp	r0, r1
 800d1be:	b510      	push	{r4, lr}
 800d1c0:	eb01 0402 	add.w	r4, r1, r2
 800d1c4:	d902      	bls.n	800d1cc <memmove+0x10>
 800d1c6:	4284      	cmp	r4, r0
 800d1c8:	4623      	mov	r3, r4
 800d1ca:	d807      	bhi.n	800d1dc <memmove+0x20>
 800d1cc:	1e43      	subs	r3, r0, #1
 800d1ce:	42a1      	cmp	r1, r4
 800d1d0:	d008      	beq.n	800d1e4 <memmove+0x28>
 800d1d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d1d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d1da:	e7f8      	b.n	800d1ce <memmove+0x12>
 800d1dc:	4601      	mov	r1, r0
 800d1de:	4402      	add	r2, r0
 800d1e0:	428a      	cmp	r2, r1
 800d1e2:	d100      	bne.n	800d1e6 <memmove+0x2a>
 800d1e4:	bd10      	pop	{r4, pc}
 800d1e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d1ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d1ee:	e7f7      	b.n	800d1e0 <memmove+0x24>

0800d1f0 <_realloc_r>:
 800d1f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1f4:	4680      	mov	r8, r0
 800d1f6:	4614      	mov	r4, r2
 800d1f8:	460e      	mov	r6, r1
 800d1fa:	b921      	cbnz	r1, 800d206 <_realloc_r+0x16>
 800d1fc:	4611      	mov	r1, r2
 800d1fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d202:	f7fb bfa5 	b.w	8009150 <_malloc_r>
 800d206:	b92a      	cbnz	r2, 800d214 <_realloc_r+0x24>
 800d208:	f7ff fdca 	bl	800cda0 <_free_r>
 800d20c:	4625      	mov	r5, r4
 800d20e:	4628      	mov	r0, r5
 800d210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d214:	f000 fa9e 	bl	800d754 <_malloc_usable_size_r>
 800d218:	4284      	cmp	r4, r0
 800d21a:	4607      	mov	r7, r0
 800d21c:	d802      	bhi.n	800d224 <_realloc_r+0x34>
 800d21e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d222:	d812      	bhi.n	800d24a <_realloc_r+0x5a>
 800d224:	4621      	mov	r1, r4
 800d226:	4640      	mov	r0, r8
 800d228:	f7fb ff92 	bl	8009150 <_malloc_r>
 800d22c:	4605      	mov	r5, r0
 800d22e:	2800      	cmp	r0, #0
 800d230:	d0ed      	beq.n	800d20e <_realloc_r+0x1e>
 800d232:	42bc      	cmp	r4, r7
 800d234:	4622      	mov	r2, r4
 800d236:	4631      	mov	r1, r6
 800d238:	bf28      	it	cs
 800d23a:	463a      	movcs	r2, r7
 800d23c:	f7fb ff51 	bl	80090e2 <memcpy>
 800d240:	4631      	mov	r1, r6
 800d242:	4640      	mov	r0, r8
 800d244:	f7ff fdac 	bl	800cda0 <_free_r>
 800d248:	e7e1      	b.n	800d20e <_realloc_r+0x1e>
 800d24a:	4635      	mov	r5, r6
 800d24c:	e7df      	b.n	800d20e <_realloc_r+0x1e>

0800d24e <__sfputc_r>:
 800d24e:	6893      	ldr	r3, [r2, #8]
 800d250:	b410      	push	{r4}
 800d252:	3b01      	subs	r3, #1
 800d254:	2b00      	cmp	r3, #0
 800d256:	6093      	str	r3, [r2, #8]
 800d258:	da07      	bge.n	800d26a <__sfputc_r+0x1c>
 800d25a:	6994      	ldr	r4, [r2, #24]
 800d25c:	42a3      	cmp	r3, r4
 800d25e:	db01      	blt.n	800d264 <__sfputc_r+0x16>
 800d260:	290a      	cmp	r1, #10
 800d262:	d102      	bne.n	800d26a <__sfputc_r+0x1c>
 800d264:	bc10      	pop	{r4}
 800d266:	f000 b949 	b.w	800d4fc <__swbuf_r>
 800d26a:	6813      	ldr	r3, [r2, #0]
 800d26c:	1c58      	adds	r0, r3, #1
 800d26e:	6010      	str	r0, [r2, #0]
 800d270:	7019      	strb	r1, [r3, #0]
 800d272:	4608      	mov	r0, r1
 800d274:	bc10      	pop	{r4}
 800d276:	4770      	bx	lr

0800d278 <__sfputs_r>:
 800d278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d27a:	4606      	mov	r6, r0
 800d27c:	460f      	mov	r7, r1
 800d27e:	4614      	mov	r4, r2
 800d280:	18d5      	adds	r5, r2, r3
 800d282:	42ac      	cmp	r4, r5
 800d284:	d101      	bne.n	800d28a <__sfputs_r+0x12>
 800d286:	2000      	movs	r0, #0
 800d288:	e007      	b.n	800d29a <__sfputs_r+0x22>
 800d28a:	463a      	mov	r2, r7
 800d28c:	4630      	mov	r0, r6
 800d28e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d292:	f7ff ffdc 	bl	800d24e <__sfputc_r>
 800d296:	1c43      	adds	r3, r0, #1
 800d298:	d1f3      	bne.n	800d282 <__sfputs_r+0xa>
 800d29a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d29c <_vfiprintf_r>:
 800d29c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2a0:	460d      	mov	r5, r1
 800d2a2:	4614      	mov	r4, r2
 800d2a4:	4698      	mov	r8, r3
 800d2a6:	4606      	mov	r6, r0
 800d2a8:	b09d      	sub	sp, #116	; 0x74
 800d2aa:	b118      	cbz	r0, 800d2b4 <_vfiprintf_r+0x18>
 800d2ac:	6983      	ldr	r3, [r0, #24]
 800d2ae:	b90b      	cbnz	r3, 800d2b4 <_vfiprintf_r+0x18>
 800d2b0:	f7fb fe52 	bl	8008f58 <__sinit>
 800d2b4:	4b89      	ldr	r3, [pc, #548]	; (800d4dc <_vfiprintf_r+0x240>)
 800d2b6:	429d      	cmp	r5, r3
 800d2b8:	d11b      	bne.n	800d2f2 <_vfiprintf_r+0x56>
 800d2ba:	6875      	ldr	r5, [r6, #4]
 800d2bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d2be:	07d9      	lsls	r1, r3, #31
 800d2c0:	d405      	bmi.n	800d2ce <_vfiprintf_r+0x32>
 800d2c2:	89ab      	ldrh	r3, [r5, #12]
 800d2c4:	059a      	lsls	r2, r3, #22
 800d2c6:	d402      	bmi.n	800d2ce <_vfiprintf_r+0x32>
 800d2c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d2ca:	f7fb ff08 	bl	80090de <__retarget_lock_acquire_recursive>
 800d2ce:	89ab      	ldrh	r3, [r5, #12]
 800d2d0:	071b      	lsls	r3, r3, #28
 800d2d2:	d501      	bpl.n	800d2d8 <_vfiprintf_r+0x3c>
 800d2d4:	692b      	ldr	r3, [r5, #16]
 800d2d6:	b9eb      	cbnz	r3, 800d314 <_vfiprintf_r+0x78>
 800d2d8:	4629      	mov	r1, r5
 800d2da:	4630      	mov	r0, r6
 800d2dc:	f000 f960 	bl	800d5a0 <__swsetup_r>
 800d2e0:	b1c0      	cbz	r0, 800d314 <_vfiprintf_r+0x78>
 800d2e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d2e4:	07dc      	lsls	r4, r3, #31
 800d2e6:	d50e      	bpl.n	800d306 <_vfiprintf_r+0x6a>
 800d2e8:	f04f 30ff 	mov.w	r0, #4294967295
 800d2ec:	b01d      	add	sp, #116	; 0x74
 800d2ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2f2:	4b7b      	ldr	r3, [pc, #492]	; (800d4e0 <_vfiprintf_r+0x244>)
 800d2f4:	429d      	cmp	r5, r3
 800d2f6:	d101      	bne.n	800d2fc <_vfiprintf_r+0x60>
 800d2f8:	68b5      	ldr	r5, [r6, #8]
 800d2fa:	e7df      	b.n	800d2bc <_vfiprintf_r+0x20>
 800d2fc:	4b79      	ldr	r3, [pc, #484]	; (800d4e4 <_vfiprintf_r+0x248>)
 800d2fe:	429d      	cmp	r5, r3
 800d300:	bf08      	it	eq
 800d302:	68f5      	ldreq	r5, [r6, #12]
 800d304:	e7da      	b.n	800d2bc <_vfiprintf_r+0x20>
 800d306:	89ab      	ldrh	r3, [r5, #12]
 800d308:	0598      	lsls	r0, r3, #22
 800d30a:	d4ed      	bmi.n	800d2e8 <_vfiprintf_r+0x4c>
 800d30c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d30e:	f7fb fee7 	bl	80090e0 <__retarget_lock_release_recursive>
 800d312:	e7e9      	b.n	800d2e8 <_vfiprintf_r+0x4c>
 800d314:	2300      	movs	r3, #0
 800d316:	9309      	str	r3, [sp, #36]	; 0x24
 800d318:	2320      	movs	r3, #32
 800d31a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d31e:	2330      	movs	r3, #48	; 0x30
 800d320:	f04f 0901 	mov.w	r9, #1
 800d324:	f8cd 800c 	str.w	r8, [sp, #12]
 800d328:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800d4e8 <_vfiprintf_r+0x24c>
 800d32c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d330:	4623      	mov	r3, r4
 800d332:	469a      	mov	sl, r3
 800d334:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d338:	b10a      	cbz	r2, 800d33e <_vfiprintf_r+0xa2>
 800d33a:	2a25      	cmp	r2, #37	; 0x25
 800d33c:	d1f9      	bne.n	800d332 <_vfiprintf_r+0x96>
 800d33e:	ebba 0b04 	subs.w	fp, sl, r4
 800d342:	d00b      	beq.n	800d35c <_vfiprintf_r+0xc0>
 800d344:	465b      	mov	r3, fp
 800d346:	4622      	mov	r2, r4
 800d348:	4629      	mov	r1, r5
 800d34a:	4630      	mov	r0, r6
 800d34c:	f7ff ff94 	bl	800d278 <__sfputs_r>
 800d350:	3001      	adds	r0, #1
 800d352:	f000 80aa 	beq.w	800d4aa <_vfiprintf_r+0x20e>
 800d356:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d358:	445a      	add	r2, fp
 800d35a:	9209      	str	r2, [sp, #36]	; 0x24
 800d35c:	f89a 3000 	ldrb.w	r3, [sl]
 800d360:	2b00      	cmp	r3, #0
 800d362:	f000 80a2 	beq.w	800d4aa <_vfiprintf_r+0x20e>
 800d366:	2300      	movs	r3, #0
 800d368:	f04f 32ff 	mov.w	r2, #4294967295
 800d36c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d370:	f10a 0a01 	add.w	sl, sl, #1
 800d374:	9304      	str	r3, [sp, #16]
 800d376:	9307      	str	r3, [sp, #28]
 800d378:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d37c:	931a      	str	r3, [sp, #104]	; 0x68
 800d37e:	4654      	mov	r4, sl
 800d380:	2205      	movs	r2, #5
 800d382:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d386:	4858      	ldr	r0, [pc, #352]	; (800d4e8 <_vfiprintf_r+0x24c>)
 800d388:	f7ff f824 	bl	800c3d4 <memchr>
 800d38c:	9a04      	ldr	r2, [sp, #16]
 800d38e:	b9d8      	cbnz	r0, 800d3c8 <_vfiprintf_r+0x12c>
 800d390:	06d1      	lsls	r1, r2, #27
 800d392:	bf44      	itt	mi
 800d394:	2320      	movmi	r3, #32
 800d396:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d39a:	0713      	lsls	r3, r2, #28
 800d39c:	bf44      	itt	mi
 800d39e:	232b      	movmi	r3, #43	; 0x2b
 800d3a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d3a4:	f89a 3000 	ldrb.w	r3, [sl]
 800d3a8:	2b2a      	cmp	r3, #42	; 0x2a
 800d3aa:	d015      	beq.n	800d3d8 <_vfiprintf_r+0x13c>
 800d3ac:	4654      	mov	r4, sl
 800d3ae:	2000      	movs	r0, #0
 800d3b0:	f04f 0c0a 	mov.w	ip, #10
 800d3b4:	9a07      	ldr	r2, [sp, #28]
 800d3b6:	4621      	mov	r1, r4
 800d3b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d3bc:	3b30      	subs	r3, #48	; 0x30
 800d3be:	2b09      	cmp	r3, #9
 800d3c0:	d94e      	bls.n	800d460 <_vfiprintf_r+0x1c4>
 800d3c2:	b1b0      	cbz	r0, 800d3f2 <_vfiprintf_r+0x156>
 800d3c4:	9207      	str	r2, [sp, #28]
 800d3c6:	e014      	b.n	800d3f2 <_vfiprintf_r+0x156>
 800d3c8:	eba0 0308 	sub.w	r3, r0, r8
 800d3cc:	fa09 f303 	lsl.w	r3, r9, r3
 800d3d0:	4313      	orrs	r3, r2
 800d3d2:	46a2      	mov	sl, r4
 800d3d4:	9304      	str	r3, [sp, #16]
 800d3d6:	e7d2      	b.n	800d37e <_vfiprintf_r+0xe2>
 800d3d8:	9b03      	ldr	r3, [sp, #12]
 800d3da:	1d19      	adds	r1, r3, #4
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	9103      	str	r1, [sp, #12]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	bfbb      	ittet	lt
 800d3e4:	425b      	neglt	r3, r3
 800d3e6:	f042 0202 	orrlt.w	r2, r2, #2
 800d3ea:	9307      	strge	r3, [sp, #28]
 800d3ec:	9307      	strlt	r3, [sp, #28]
 800d3ee:	bfb8      	it	lt
 800d3f0:	9204      	strlt	r2, [sp, #16]
 800d3f2:	7823      	ldrb	r3, [r4, #0]
 800d3f4:	2b2e      	cmp	r3, #46	; 0x2e
 800d3f6:	d10c      	bne.n	800d412 <_vfiprintf_r+0x176>
 800d3f8:	7863      	ldrb	r3, [r4, #1]
 800d3fa:	2b2a      	cmp	r3, #42	; 0x2a
 800d3fc:	d135      	bne.n	800d46a <_vfiprintf_r+0x1ce>
 800d3fe:	9b03      	ldr	r3, [sp, #12]
 800d400:	3402      	adds	r4, #2
 800d402:	1d1a      	adds	r2, r3, #4
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	9203      	str	r2, [sp, #12]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	bfb8      	it	lt
 800d40c:	f04f 33ff 	movlt.w	r3, #4294967295
 800d410:	9305      	str	r3, [sp, #20]
 800d412:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800d4ec <_vfiprintf_r+0x250>
 800d416:	2203      	movs	r2, #3
 800d418:	4650      	mov	r0, sl
 800d41a:	7821      	ldrb	r1, [r4, #0]
 800d41c:	f7fe ffda 	bl	800c3d4 <memchr>
 800d420:	b140      	cbz	r0, 800d434 <_vfiprintf_r+0x198>
 800d422:	2340      	movs	r3, #64	; 0x40
 800d424:	eba0 000a 	sub.w	r0, r0, sl
 800d428:	fa03 f000 	lsl.w	r0, r3, r0
 800d42c:	9b04      	ldr	r3, [sp, #16]
 800d42e:	3401      	adds	r4, #1
 800d430:	4303      	orrs	r3, r0
 800d432:	9304      	str	r3, [sp, #16]
 800d434:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d438:	2206      	movs	r2, #6
 800d43a:	482d      	ldr	r0, [pc, #180]	; (800d4f0 <_vfiprintf_r+0x254>)
 800d43c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d440:	f7fe ffc8 	bl	800c3d4 <memchr>
 800d444:	2800      	cmp	r0, #0
 800d446:	d03f      	beq.n	800d4c8 <_vfiprintf_r+0x22c>
 800d448:	4b2a      	ldr	r3, [pc, #168]	; (800d4f4 <_vfiprintf_r+0x258>)
 800d44a:	bb1b      	cbnz	r3, 800d494 <_vfiprintf_r+0x1f8>
 800d44c:	9b03      	ldr	r3, [sp, #12]
 800d44e:	3307      	adds	r3, #7
 800d450:	f023 0307 	bic.w	r3, r3, #7
 800d454:	3308      	adds	r3, #8
 800d456:	9303      	str	r3, [sp, #12]
 800d458:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d45a:	443b      	add	r3, r7
 800d45c:	9309      	str	r3, [sp, #36]	; 0x24
 800d45e:	e767      	b.n	800d330 <_vfiprintf_r+0x94>
 800d460:	460c      	mov	r4, r1
 800d462:	2001      	movs	r0, #1
 800d464:	fb0c 3202 	mla	r2, ip, r2, r3
 800d468:	e7a5      	b.n	800d3b6 <_vfiprintf_r+0x11a>
 800d46a:	2300      	movs	r3, #0
 800d46c:	f04f 0c0a 	mov.w	ip, #10
 800d470:	4619      	mov	r1, r3
 800d472:	3401      	adds	r4, #1
 800d474:	9305      	str	r3, [sp, #20]
 800d476:	4620      	mov	r0, r4
 800d478:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d47c:	3a30      	subs	r2, #48	; 0x30
 800d47e:	2a09      	cmp	r2, #9
 800d480:	d903      	bls.n	800d48a <_vfiprintf_r+0x1ee>
 800d482:	2b00      	cmp	r3, #0
 800d484:	d0c5      	beq.n	800d412 <_vfiprintf_r+0x176>
 800d486:	9105      	str	r1, [sp, #20]
 800d488:	e7c3      	b.n	800d412 <_vfiprintf_r+0x176>
 800d48a:	4604      	mov	r4, r0
 800d48c:	2301      	movs	r3, #1
 800d48e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d492:	e7f0      	b.n	800d476 <_vfiprintf_r+0x1da>
 800d494:	ab03      	add	r3, sp, #12
 800d496:	9300      	str	r3, [sp, #0]
 800d498:	462a      	mov	r2, r5
 800d49a:	4630      	mov	r0, r6
 800d49c:	4b16      	ldr	r3, [pc, #88]	; (800d4f8 <_vfiprintf_r+0x25c>)
 800d49e:	a904      	add	r1, sp, #16
 800d4a0:	f7fb ff68 	bl	8009374 <_printf_float>
 800d4a4:	4607      	mov	r7, r0
 800d4a6:	1c78      	adds	r0, r7, #1
 800d4a8:	d1d6      	bne.n	800d458 <_vfiprintf_r+0x1bc>
 800d4aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d4ac:	07d9      	lsls	r1, r3, #31
 800d4ae:	d405      	bmi.n	800d4bc <_vfiprintf_r+0x220>
 800d4b0:	89ab      	ldrh	r3, [r5, #12]
 800d4b2:	059a      	lsls	r2, r3, #22
 800d4b4:	d402      	bmi.n	800d4bc <_vfiprintf_r+0x220>
 800d4b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d4b8:	f7fb fe12 	bl	80090e0 <__retarget_lock_release_recursive>
 800d4bc:	89ab      	ldrh	r3, [r5, #12]
 800d4be:	065b      	lsls	r3, r3, #25
 800d4c0:	f53f af12 	bmi.w	800d2e8 <_vfiprintf_r+0x4c>
 800d4c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d4c6:	e711      	b.n	800d2ec <_vfiprintf_r+0x50>
 800d4c8:	ab03      	add	r3, sp, #12
 800d4ca:	9300      	str	r3, [sp, #0]
 800d4cc:	462a      	mov	r2, r5
 800d4ce:	4630      	mov	r0, r6
 800d4d0:	4b09      	ldr	r3, [pc, #36]	; (800d4f8 <_vfiprintf_r+0x25c>)
 800d4d2:	a904      	add	r1, sp, #16
 800d4d4:	f7fc f9ea 	bl	80098ac <_printf_i>
 800d4d8:	e7e4      	b.n	800d4a4 <_vfiprintf_r+0x208>
 800d4da:	bf00      	nop
 800d4dc:	0800db98 	.word	0x0800db98
 800d4e0:	0800dbb8 	.word	0x0800dbb8
 800d4e4:	0800db78 	.word	0x0800db78
 800d4e8:	0800dfcc 	.word	0x0800dfcc
 800d4ec:	0800dfd2 	.word	0x0800dfd2
 800d4f0:	0800dfd6 	.word	0x0800dfd6
 800d4f4:	08009375 	.word	0x08009375
 800d4f8:	0800d279 	.word	0x0800d279

0800d4fc <__swbuf_r>:
 800d4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4fe:	460e      	mov	r6, r1
 800d500:	4614      	mov	r4, r2
 800d502:	4605      	mov	r5, r0
 800d504:	b118      	cbz	r0, 800d50e <__swbuf_r+0x12>
 800d506:	6983      	ldr	r3, [r0, #24]
 800d508:	b90b      	cbnz	r3, 800d50e <__swbuf_r+0x12>
 800d50a:	f7fb fd25 	bl	8008f58 <__sinit>
 800d50e:	4b21      	ldr	r3, [pc, #132]	; (800d594 <__swbuf_r+0x98>)
 800d510:	429c      	cmp	r4, r3
 800d512:	d12b      	bne.n	800d56c <__swbuf_r+0x70>
 800d514:	686c      	ldr	r4, [r5, #4]
 800d516:	69a3      	ldr	r3, [r4, #24]
 800d518:	60a3      	str	r3, [r4, #8]
 800d51a:	89a3      	ldrh	r3, [r4, #12]
 800d51c:	071a      	lsls	r2, r3, #28
 800d51e:	d52f      	bpl.n	800d580 <__swbuf_r+0x84>
 800d520:	6923      	ldr	r3, [r4, #16]
 800d522:	b36b      	cbz	r3, 800d580 <__swbuf_r+0x84>
 800d524:	6923      	ldr	r3, [r4, #16]
 800d526:	6820      	ldr	r0, [r4, #0]
 800d528:	b2f6      	uxtb	r6, r6
 800d52a:	1ac0      	subs	r0, r0, r3
 800d52c:	6963      	ldr	r3, [r4, #20]
 800d52e:	4637      	mov	r7, r6
 800d530:	4283      	cmp	r3, r0
 800d532:	dc04      	bgt.n	800d53e <__swbuf_r+0x42>
 800d534:	4621      	mov	r1, r4
 800d536:	4628      	mov	r0, r5
 800d538:	f7fe fb7a 	bl	800bc30 <_fflush_r>
 800d53c:	bb30      	cbnz	r0, 800d58c <__swbuf_r+0x90>
 800d53e:	68a3      	ldr	r3, [r4, #8]
 800d540:	3001      	adds	r0, #1
 800d542:	3b01      	subs	r3, #1
 800d544:	60a3      	str	r3, [r4, #8]
 800d546:	6823      	ldr	r3, [r4, #0]
 800d548:	1c5a      	adds	r2, r3, #1
 800d54a:	6022      	str	r2, [r4, #0]
 800d54c:	701e      	strb	r6, [r3, #0]
 800d54e:	6963      	ldr	r3, [r4, #20]
 800d550:	4283      	cmp	r3, r0
 800d552:	d004      	beq.n	800d55e <__swbuf_r+0x62>
 800d554:	89a3      	ldrh	r3, [r4, #12]
 800d556:	07db      	lsls	r3, r3, #31
 800d558:	d506      	bpl.n	800d568 <__swbuf_r+0x6c>
 800d55a:	2e0a      	cmp	r6, #10
 800d55c:	d104      	bne.n	800d568 <__swbuf_r+0x6c>
 800d55e:	4621      	mov	r1, r4
 800d560:	4628      	mov	r0, r5
 800d562:	f7fe fb65 	bl	800bc30 <_fflush_r>
 800d566:	b988      	cbnz	r0, 800d58c <__swbuf_r+0x90>
 800d568:	4638      	mov	r0, r7
 800d56a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d56c:	4b0a      	ldr	r3, [pc, #40]	; (800d598 <__swbuf_r+0x9c>)
 800d56e:	429c      	cmp	r4, r3
 800d570:	d101      	bne.n	800d576 <__swbuf_r+0x7a>
 800d572:	68ac      	ldr	r4, [r5, #8]
 800d574:	e7cf      	b.n	800d516 <__swbuf_r+0x1a>
 800d576:	4b09      	ldr	r3, [pc, #36]	; (800d59c <__swbuf_r+0xa0>)
 800d578:	429c      	cmp	r4, r3
 800d57a:	bf08      	it	eq
 800d57c:	68ec      	ldreq	r4, [r5, #12]
 800d57e:	e7ca      	b.n	800d516 <__swbuf_r+0x1a>
 800d580:	4621      	mov	r1, r4
 800d582:	4628      	mov	r0, r5
 800d584:	f000 f80c 	bl	800d5a0 <__swsetup_r>
 800d588:	2800      	cmp	r0, #0
 800d58a:	d0cb      	beq.n	800d524 <__swbuf_r+0x28>
 800d58c:	f04f 37ff 	mov.w	r7, #4294967295
 800d590:	e7ea      	b.n	800d568 <__swbuf_r+0x6c>
 800d592:	bf00      	nop
 800d594:	0800db98 	.word	0x0800db98
 800d598:	0800dbb8 	.word	0x0800dbb8
 800d59c:	0800db78 	.word	0x0800db78

0800d5a0 <__swsetup_r>:
 800d5a0:	4b32      	ldr	r3, [pc, #200]	; (800d66c <__swsetup_r+0xcc>)
 800d5a2:	b570      	push	{r4, r5, r6, lr}
 800d5a4:	681d      	ldr	r5, [r3, #0]
 800d5a6:	4606      	mov	r6, r0
 800d5a8:	460c      	mov	r4, r1
 800d5aa:	b125      	cbz	r5, 800d5b6 <__swsetup_r+0x16>
 800d5ac:	69ab      	ldr	r3, [r5, #24]
 800d5ae:	b913      	cbnz	r3, 800d5b6 <__swsetup_r+0x16>
 800d5b0:	4628      	mov	r0, r5
 800d5b2:	f7fb fcd1 	bl	8008f58 <__sinit>
 800d5b6:	4b2e      	ldr	r3, [pc, #184]	; (800d670 <__swsetup_r+0xd0>)
 800d5b8:	429c      	cmp	r4, r3
 800d5ba:	d10f      	bne.n	800d5dc <__swsetup_r+0x3c>
 800d5bc:	686c      	ldr	r4, [r5, #4]
 800d5be:	89a3      	ldrh	r3, [r4, #12]
 800d5c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d5c4:	0719      	lsls	r1, r3, #28
 800d5c6:	d42c      	bmi.n	800d622 <__swsetup_r+0x82>
 800d5c8:	06dd      	lsls	r5, r3, #27
 800d5ca:	d411      	bmi.n	800d5f0 <__swsetup_r+0x50>
 800d5cc:	2309      	movs	r3, #9
 800d5ce:	6033      	str	r3, [r6, #0]
 800d5d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d5d4:	f04f 30ff 	mov.w	r0, #4294967295
 800d5d8:	81a3      	strh	r3, [r4, #12]
 800d5da:	e03e      	b.n	800d65a <__swsetup_r+0xba>
 800d5dc:	4b25      	ldr	r3, [pc, #148]	; (800d674 <__swsetup_r+0xd4>)
 800d5de:	429c      	cmp	r4, r3
 800d5e0:	d101      	bne.n	800d5e6 <__swsetup_r+0x46>
 800d5e2:	68ac      	ldr	r4, [r5, #8]
 800d5e4:	e7eb      	b.n	800d5be <__swsetup_r+0x1e>
 800d5e6:	4b24      	ldr	r3, [pc, #144]	; (800d678 <__swsetup_r+0xd8>)
 800d5e8:	429c      	cmp	r4, r3
 800d5ea:	bf08      	it	eq
 800d5ec:	68ec      	ldreq	r4, [r5, #12]
 800d5ee:	e7e6      	b.n	800d5be <__swsetup_r+0x1e>
 800d5f0:	0758      	lsls	r0, r3, #29
 800d5f2:	d512      	bpl.n	800d61a <__swsetup_r+0x7a>
 800d5f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d5f6:	b141      	cbz	r1, 800d60a <__swsetup_r+0x6a>
 800d5f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d5fc:	4299      	cmp	r1, r3
 800d5fe:	d002      	beq.n	800d606 <__swsetup_r+0x66>
 800d600:	4630      	mov	r0, r6
 800d602:	f7ff fbcd 	bl	800cda0 <_free_r>
 800d606:	2300      	movs	r3, #0
 800d608:	6363      	str	r3, [r4, #52]	; 0x34
 800d60a:	89a3      	ldrh	r3, [r4, #12]
 800d60c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d610:	81a3      	strh	r3, [r4, #12]
 800d612:	2300      	movs	r3, #0
 800d614:	6063      	str	r3, [r4, #4]
 800d616:	6923      	ldr	r3, [r4, #16]
 800d618:	6023      	str	r3, [r4, #0]
 800d61a:	89a3      	ldrh	r3, [r4, #12]
 800d61c:	f043 0308 	orr.w	r3, r3, #8
 800d620:	81a3      	strh	r3, [r4, #12]
 800d622:	6923      	ldr	r3, [r4, #16]
 800d624:	b94b      	cbnz	r3, 800d63a <__swsetup_r+0x9a>
 800d626:	89a3      	ldrh	r3, [r4, #12]
 800d628:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d62c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d630:	d003      	beq.n	800d63a <__swsetup_r+0x9a>
 800d632:	4621      	mov	r1, r4
 800d634:	4630      	mov	r0, r6
 800d636:	f000 f84d 	bl	800d6d4 <__smakebuf_r>
 800d63a:	89a0      	ldrh	r0, [r4, #12]
 800d63c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d640:	f010 0301 	ands.w	r3, r0, #1
 800d644:	d00a      	beq.n	800d65c <__swsetup_r+0xbc>
 800d646:	2300      	movs	r3, #0
 800d648:	60a3      	str	r3, [r4, #8]
 800d64a:	6963      	ldr	r3, [r4, #20]
 800d64c:	425b      	negs	r3, r3
 800d64e:	61a3      	str	r3, [r4, #24]
 800d650:	6923      	ldr	r3, [r4, #16]
 800d652:	b943      	cbnz	r3, 800d666 <__swsetup_r+0xc6>
 800d654:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d658:	d1ba      	bne.n	800d5d0 <__swsetup_r+0x30>
 800d65a:	bd70      	pop	{r4, r5, r6, pc}
 800d65c:	0781      	lsls	r1, r0, #30
 800d65e:	bf58      	it	pl
 800d660:	6963      	ldrpl	r3, [r4, #20]
 800d662:	60a3      	str	r3, [r4, #8]
 800d664:	e7f4      	b.n	800d650 <__swsetup_r+0xb0>
 800d666:	2000      	movs	r0, #0
 800d668:	e7f7      	b.n	800d65a <__swsetup_r+0xba>
 800d66a:	bf00      	nop
 800d66c:	20000010 	.word	0x20000010
 800d670:	0800db98 	.word	0x0800db98
 800d674:	0800dbb8 	.word	0x0800dbb8
 800d678:	0800db78 	.word	0x0800db78

0800d67c <abort>:
 800d67c:	2006      	movs	r0, #6
 800d67e:	b508      	push	{r3, lr}
 800d680:	f000 f898 	bl	800d7b4 <raise>
 800d684:	2001      	movs	r0, #1
 800d686:	f7f4 f9fc 	bl	8001a82 <_exit>

0800d68a <__swhatbuf_r>:
 800d68a:	b570      	push	{r4, r5, r6, lr}
 800d68c:	460e      	mov	r6, r1
 800d68e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d692:	4614      	mov	r4, r2
 800d694:	2900      	cmp	r1, #0
 800d696:	461d      	mov	r5, r3
 800d698:	b096      	sub	sp, #88	; 0x58
 800d69a:	da08      	bge.n	800d6ae <__swhatbuf_r+0x24>
 800d69c:	2200      	movs	r2, #0
 800d69e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d6a2:	602a      	str	r2, [r5, #0]
 800d6a4:	061a      	lsls	r2, r3, #24
 800d6a6:	d410      	bmi.n	800d6ca <__swhatbuf_r+0x40>
 800d6a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d6ac:	e00e      	b.n	800d6cc <__swhatbuf_r+0x42>
 800d6ae:	466a      	mov	r2, sp
 800d6b0:	f000 f89c 	bl	800d7ec <_fstat_r>
 800d6b4:	2800      	cmp	r0, #0
 800d6b6:	dbf1      	blt.n	800d69c <__swhatbuf_r+0x12>
 800d6b8:	9a01      	ldr	r2, [sp, #4]
 800d6ba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d6be:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d6c2:	425a      	negs	r2, r3
 800d6c4:	415a      	adcs	r2, r3
 800d6c6:	602a      	str	r2, [r5, #0]
 800d6c8:	e7ee      	b.n	800d6a8 <__swhatbuf_r+0x1e>
 800d6ca:	2340      	movs	r3, #64	; 0x40
 800d6cc:	2000      	movs	r0, #0
 800d6ce:	6023      	str	r3, [r4, #0]
 800d6d0:	b016      	add	sp, #88	; 0x58
 800d6d2:	bd70      	pop	{r4, r5, r6, pc}

0800d6d4 <__smakebuf_r>:
 800d6d4:	898b      	ldrh	r3, [r1, #12]
 800d6d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d6d8:	079d      	lsls	r5, r3, #30
 800d6da:	4606      	mov	r6, r0
 800d6dc:	460c      	mov	r4, r1
 800d6de:	d507      	bpl.n	800d6f0 <__smakebuf_r+0x1c>
 800d6e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d6e4:	6023      	str	r3, [r4, #0]
 800d6e6:	6123      	str	r3, [r4, #16]
 800d6e8:	2301      	movs	r3, #1
 800d6ea:	6163      	str	r3, [r4, #20]
 800d6ec:	b002      	add	sp, #8
 800d6ee:	bd70      	pop	{r4, r5, r6, pc}
 800d6f0:	466a      	mov	r2, sp
 800d6f2:	ab01      	add	r3, sp, #4
 800d6f4:	f7ff ffc9 	bl	800d68a <__swhatbuf_r>
 800d6f8:	9900      	ldr	r1, [sp, #0]
 800d6fa:	4605      	mov	r5, r0
 800d6fc:	4630      	mov	r0, r6
 800d6fe:	f7fb fd27 	bl	8009150 <_malloc_r>
 800d702:	b948      	cbnz	r0, 800d718 <__smakebuf_r+0x44>
 800d704:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d708:	059a      	lsls	r2, r3, #22
 800d70a:	d4ef      	bmi.n	800d6ec <__smakebuf_r+0x18>
 800d70c:	f023 0303 	bic.w	r3, r3, #3
 800d710:	f043 0302 	orr.w	r3, r3, #2
 800d714:	81a3      	strh	r3, [r4, #12]
 800d716:	e7e3      	b.n	800d6e0 <__smakebuf_r+0xc>
 800d718:	4b0d      	ldr	r3, [pc, #52]	; (800d750 <__smakebuf_r+0x7c>)
 800d71a:	62b3      	str	r3, [r6, #40]	; 0x28
 800d71c:	89a3      	ldrh	r3, [r4, #12]
 800d71e:	6020      	str	r0, [r4, #0]
 800d720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d724:	81a3      	strh	r3, [r4, #12]
 800d726:	9b00      	ldr	r3, [sp, #0]
 800d728:	6120      	str	r0, [r4, #16]
 800d72a:	6163      	str	r3, [r4, #20]
 800d72c:	9b01      	ldr	r3, [sp, #4]
 800d72e:	b15b      	cbz	r3, 800d748 <__smakebuf_r+0x74>
 800d730:	4630      	mov	r0, r6
 800d732:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d736:	f000 f86b 	bl	800d810 <_isatty_r>
 800d73a:	b128      	cbz	r0, 800d748 <__smakebuf_r+0x74>
 800d73c:	89a3      	ldrh	r3, [r4, #12]
 800d73e:	f023 0303 	bic.w	r3, r3, #3
 800d742:	f043 0301 	orr.w	r3, r3, #1
 800d746:	81a3      	strh	r3, [r4, #12]
 800d748:	89a0      	ldrh	r0, [r4, #12]
 800d74a:	4305      	orrs	r5, r0
 800d74c:	81a5      	strh	r5, [r4, #12]
 800d74e:	e7cd      	b.n	800d6ec <__smakebuf_r+0x18>
 800d750:	08008ef1 	.word	0x08008ef1

0800d754 <_malloc_usable_size_r>:
 800d754:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d758:	1f18      	subs	r0, r3, #4
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	bfbc      	itt	lt
 800d75e:	580b      	ldrlt	r3, [r1, r0]
 800d760:	18c0      	addlt	r0, r0, r3
 800d762:	4770      	bx	lr

0800d764 <_raise_r>:
 800d764:	291f      	cmp	r1, #31
 800d766:	b538      	push	{r3, r4, r5, lr}
 800d768:	4604      	mov	r4, r0
 800d76a:	460d      	mov	r5, r1
 800d76c:	d904      	bls.n	800d778 <_raise_r+0x14>
 800d76e:	2316      	movs	r3, #22
 800d770:	6003      	str	r3, [r0, #0]
 800d772:	f04f 30ff 	mov.w	r0, #4294967295
 800d776:	bd38      	pop	{r3, r4, r5, pc}
 800d778:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d77a:	b112      	cbz	r2, 800d782 <_raise_r+0x1e>
 800d77c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d780:	b94b      	cbnz	r3, 800d796 <_raise_r+0x32>
 800d782:	4620      	mov	r0, r4
 800d784:	f000 f830 	bl	800d7e8 <_getpid_r>
 800d788:	462a      	mov	r2, r5
 800d78a:	4601      	mov	r1, r0
 800d78c:	4620      	mov	r0, r4
 800d78e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d792:	f000 b817 	b.w	800d7c4 <_kill_r>
 800d796:	2b01      	cmp	r3, #1
 800d798:	d00a      	beq.n	800d7b0 <_raise_r+0x4c>
 800d79a:	1c59      	adds	r1, r3, #1
 800d79c:	d103      	bne.n	800d7a6 <_raise_r+0x42>
 800d79e:	2316      	movs	r3, #22
 800d7a0:	6003      	str	r3, [r0, #0]
 800d7a2:	2001      	movs	r0, #1
 800d7a4:	e7e7      	b.n	800d776 <_raise_r+0x12>
 800d7a6:	2400      	movs	r4, #0
 800d7a8:	4628      	mov	r0, r5
 800d7aa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d7ae:	4798      	blx	r3
 800d7b0:	2000      	movs	r0, #0
 800d7b2:	e7e0      	b.n	800d776 <_raise_r+0x12>

0800d7b4 <raise>:
 800d7b4:	4b02      	ldr	r3, [pc, #8]	; (800d7c0 <raise+0xc>)
 800d7b6:	4601      	mov	r1, r0
 800d7b8:	6818      	ldr	r0, [r3, #0]
 800d7ba:	f7ff bfd3 	b.w	800d764 <_raise_r>
 800d7be:	bf00      	nop
 800d7c0:	20000010 	.word	0x20000010

0800d7c4 <_kill_r>:
 800d7c4:	b538      	push	{r3, r4, r5, lr}
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	4d06      	ldr	r5, [pc, #24]	; (800d7e4 <_kill_r+0x20>)
 800d7ca:	4604      	mov	r4, r0
 800d7cc:	4608      	mov	r0, r1
 800d7ce:	4611      	mov	r1, r2
 800d7d0:	602b      	str	r3, [r5, #0]
 800d7d2:	f7f4 f946 	bl	8001a62 <_kill>
 800d7d6:	1c43      	adds	r3, r0, #1
 800d7d8:	d102      	bne.n	800d7e0 <_kill_r+0x1c>
 800d7da:	682b      	ldr	r3, [r5, #0]
 800d7dc:	b103      	cbz	r3, 800d7e0 <_kill_r+0x1c>
 800d7de:	6023      	str	r3, [r4, #0]
 800d7e0:	bd38      	pop	{r3, r4, r5, pc}
 800d7e2:	bf00      	nop
 800d7e4:	2000326c 	.word	0x2000326c

0800d7e8 <_getpid_r>:
 800d7e8:	f7f4 b934 	b.w	8001a54 <_getpid>

0800d7ec <_fstat_r>:
 800d7ec:	b538      	push	{r3, r4, r5, lr}
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	4d06      	ldr	r5, [pc, #24]	; (800d80c <_fstat_r+0x20>)
 800d7f2:	4604      	mov	r4, r0
 800d7f4:	4608      	mov	r0, r1
 800d7f6:	4611      	mov	r1, r2
 800d7f8:	602b      	str	r3, [r5, #0]
 800d7fa:	f7f4 f990 	bl	8001b1e <_fstat>
 800d7fe:	1c43      	adds	r3, r0, #1
 800d800:	d102      	bne.n	800d808 <_fstat_r+0x1c>
 800d802:	682b      	ldr	r3, [r5, #0]
 800d804:	b103      	cbz	r3, 800d808 <_fstat_r+0x1c>
 800d806:	6023      	str	r3, [r4, #0]
 800d808:	bd38      	pop	{r3, r4, r5, pc}
 800d80a:	bf00      	nop
 800d80c:	2000326c 	.word	0x2000326c

0800d810 <_isatty_r>:
 800d810:	b538      	push	{r3, r4, r5, lr}
 800d812:	2300      	movs	r3, #0
 800d814:	4d05      	ldr	r5, [pc, #20]	; (800d82c <_isatty_r+0x1c>)
 800d816:	4604      	mov	r4, r0
 800d818:	4608      	mov	r0, r1
 800d81a:	602b      	str	r3, [r5, #0]
 800d81c:	f7f4 f98e 	bl	8001b3c <_isatty>
 800d820:	1c43      	adds	r3, r0, #1
 800d822:	d102      	bne.n	800d82a <_isatty_r+0x1a>
 800d824:	682b      	ldr	r3, [r5, #0]
 800d826:	b103      	cbz	r3, 800d82a <_isatty_r+0x1a>
 800d828:	6023      	str	r3, [r4, #0]
 800d82a:	bd38      	pop	{r3, r4, r5, pc}
 800d82c:	2000326c 	.word	0x2000326c

0800d830 <_init>:
 800d830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d832:	bf00      	nop
 800d834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d836:	bc08      	pop	{r3}
 800d838:	469e      	mov	lr, r3
 800d83a:	4770      	bx	lr

0800d83c <_fini>:
 800d83c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d83e:	bf00      	nop
 800d840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d842:	bc08      	pop	{r3}
 800d844:	469e      	mov	lr, r3
 800d846:	4770      	bx	lr
